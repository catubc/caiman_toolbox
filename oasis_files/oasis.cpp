/* Generated by Cython 0.24.1 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_24_1"
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if !defined(CYTHON_USE_PYLONG_INTERNALS) && CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x02070000
  #define CYTHON_USE_PYLONG_INTERNALS 1
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if PY_VERSION_HEX >= 0x030500B1
#define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
#define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
#elif CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
typedef struct {
    unaryfunc am_await;
    unaryfunc am_aiter;
    unaryfunc am_anext;
} __Pyx_PyAsyncMethodsStruct;
#define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
#else
#define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #define CYTHON_INLINE inline
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    operator T&() { return *ptr; }
  private:
    T *ptr;
};

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__oasis
#define __PYX_HAVE_API__oasis
#include "string.h"
#include "stdio.h"
#include "stdlib.h"
#include "numpy/arrayobject.h"
#include "numpy/ufuncobject.h"
#include "math.h"
#include <vector>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include "pythread.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER) && defined (_M_X64)
    #define __Pyx_sst_abs(value) _abs64(value)
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;

/* None.proto */
#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif


static const char *__pyx_f[] = {
  "oasis.pyx",
  "__init__.pxd",
  "stringsource",
  "type.pxd",
  "bool.pxd",
  "complex.pxd",
};
/* BufferFormatStructs.proto */
#define IS_UNSIGNED(type) (((type) -1) > 0)
struct __Pyx_StructField_;
#define __PYX_BUF_FLAGS_PACKED_STRUCT (1 << 0)
typedef struct {
  const char* name;
  struct __Pyx_StructField_* fields;
  size_t size;
  size_t arraysize[8];
  int ndim;
  char typegroup;
  char is_unsigned;
  int flags;
} __Pyx_TypeInfo;
typedef struct __Pyx_StructField_ {
  __Pyx_TypeInfo* type;
  const char* name;
  size_t offset;
} __Pyx_StructField;
typedef struct {
  __Pyx_StructField* field;
  size_t parent_offset;
} __Pyx_BufFmt_StackElem;
typedef struct {
  __Pyx_StructField root;
  __Pyx_BufFmt_StackElem* head;
  size_t fmt_offset;
  size_t new_count, enc_count;
  size_t struct_alignment;
  int is_complex;
  char enc_type;
  char new_packmode;
  char enc_packmode;
  char is_valid_array;
} __Pyx_BufFmt_Context;


/* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":725
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":726
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":727
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":728
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":732
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":733
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":734
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":735
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":739
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":740
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":749
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":750
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":751
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":753
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":754
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":755
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":757
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":758
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":760
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":761
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":762
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;

/* "oasis.pyx":15
 * from libcpp.vector cimport vector
 * 
 * ctypedef np.float32_t SINGLE             # <<<<<<<<<<<<<<
 * 
 * 
 */
typedef __pyx_t_5numpy_float32_t __pyx_t_5oasis_SINGLE;
/* None.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif

/* None.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif


/*--- Type declarations ---*/
struct __pyx_obj_5oasis_OASIS;
struct __pyx_obj_5oasis___pyx_scope_struct__constrained_oasisAR1;
struct __pyx_obj_5oasis___pyx_scope_struct_1_baz;
struct __pyx_obj_5oasis___pyx_scope_struct_2_baz;

/* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":764
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":765
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":766
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":768
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;
struct __pyx_t_5oasis_Pool;
struct __pyx_defaults;
typedef struct __pyx_defaults __pyx_defaults;
struct __pyx_defaults1;
typedef struct __pyx_defaults1 __pyx_defaults1;

/* "oasis.pyx":18
 * 
 * 
 * cdef struct Pool:             # <<<<<<<<<<<<<<
 *     SINGLE v
 *     SINGLE w
 */
struct __pyx_t_5oasis_Pool {
  __pyx_t_5oasis_SINGLE v;
  __pyx_t_5oasis_SINGLE w;
  Py_ssize_t t;
  Py_ssize_t l;
};
struct __pyx_defaults {
  PyObject *__pyx_arg_lam;
};
struct __pyx_defaults1 {
  PyObject *__pyx_arg_lam;
};

/* "oasis.pyx":29
 * 
 * 
 * cdef class OASIS:             # <<<<<<<<<<<<<<
 *     """
 *     Deconvolution class implementing OASIS
 */
struct __pyx_obj_5oasis_OASIS {
  PyObject_HEAD
  Py_ssize_t i;
  __pyx_t_5oasis_SINGLE v;
  __pyx_t_5oasis_SINGLE w;
  __pyx_t_5oasis_SINGLE g;
  __pyx_t_5oasis_SINGLE lam;
  __pyx_t_5oasis_SINGLE s_min;
  __pyx_t_5oasis_SINGLE b;
  __pyx_t_5oasis_SINGLE g2;
  __pyx_t_5oasis_SINGLE d;
  __pyx_t_5oasis_SINGLE r;
  __pyx_t_5oasis_SINGLE yt;
  std::vector<struct __pyx_t_5oasis_Pool>  P;
  unsigned int t;
  __pyx_t_5oasis_SINGLE h[0x3E8];
  __pyx_t_5oasis_SINGLE g12[0x3E8];
  __pyx_t_5oasis_SINGLE g11g11[0x3E8];
  __pyx_t_5oasis_SINGLE g11g12[0x3E8];
  std::vector<__pyx_t_5oasis_SINGLE>  _y;
};


/* "oasis.pyx":659
 * 
 * @cython.cdivision(True)
 * def constrained_oasisAR1(np.ndarray[SINGLE, ndim=1] y, SINGLE g, SINGLE sn,             # <<<<<<<<<<<<<<
 *                          bool optimize_b=False, bool b_nonneg=True, int optimize_g=0,
 *                          int decimate=1, int max_iter=5, int penalty=1):
 */
struct __pyx_obj_5oasis___pyx_scope_struct__constrained_oasisAR1 {
  PyObject_HEAD
  std::vector<struct __pyx_t_5oasis_Pool>  __pyx_v_P;
  unsigned int __pyx_v_T;
  __pyx_t_5oasis_SINGLE __pyx_v_b;
  PyBoolObject *__pyx_v_b_nonneg;
  PyObject *__pyx_v_bar;
  __pyx_t_5oasis_SINGLE __pyx_v_g;
  __pyx_t_5oasis_SINGLE __pyx_v_lam;
  unsigned int __pyx_v_ma;
  int __pyx_v_optimize_g;
};


/* "oasis.pyx":853
 *                                 for i in range(optimize_g)])
 * 
 *                 def baz(y, Pt, Pl):             # <<<<<<<<<<<<<<
 *                     # minimizes residual
 *                     return fminbound(lambda x: bar(y, x, Pt, Pl), 0, 1, xtol=1e-4, maxfun=50)
 */
struct __pyx_obj_5oasis___pyx_scope_struct_1_baz {
  PyObject_HEAD
  struct __pyx_obj_5oasis___pyx_scope_struct__constrained_oasisAR1 *__pyx_outer_scope;
  PyObject *__pyx_v_Pl;
  PyObject *__pyx_v_Pt;
  PyObject *__pyx_v_y;
};


/* "oasis.pyx":953
 *                                 for i in range(P.size() if P.size() < optimize_g else optimize_g)])
 * 
 *                 def baz(y, Pt, Pl):             # <<<<<<<<<<<<<<
 *                     return minimize(lambda x: bar(y, x, Pt, Pl), (b, g),
 *                                     bounds=((0 if b_nonneg else None, None), (.001, .999)),
 */
struct __pyx_obj_5oasis___pyx_scope_struct_2_baz {
  PyObject_HEAD
  struct __pyx_obj_5oasis___pyx_scope_struct__constrained_oasisAR1 *__pyx_outer_scope;
  PyObject *__pyx_v_Pl;
  PyObject *__pyx_v_Pt;
  PyObject *__pyx_v_y;
};


/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* PyIntBinop.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_EqObjC(op1, op2, intval, inplace)\
    PyObject_RichCompare(op1, op2, Py_EQ)
    #endif

/* PyIntBinop.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx_PyInt_SubtractCObj(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_SubtractCObj(op1, op2, intval, inplace)\
    (inplace ? PyNumber_InPlaceSubtract(op1, op2) : PyNumber_Subtract(op1, op2))
#endif

/* GetModuleGlobalName.proto */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* BufferFormatCheck.proto */
static CYTHON_INLINE int  __Pyx_GetBufferAndValidate(Py_buffer* buf, PyObject* obj,
    __Pyx_TypeInfo* dtype, int flags, int nd, int cast, __Pyx_BufFmt_StackElem* stack);
static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info);
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts);
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type); // PROTO

/* BufferFallbackError.proto */
static void __Pyx_RaiseBufferFallbackError(void);

/* BufferIndexError.proto */
static void __Pyx_RaiseBufferIndexError(int axis);

#define __Pyx_BufPtrStrided1d(type, buf, i0, s0) (type)((char*)buf + i0 * s0)
/* PyThreadStateGet.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = PyThreadState_GET();
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* ListAppend.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* ArgTypeTest.proto */
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* SliceObject.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(
        PyObject* obj, Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** py_start, PyObject** py_stop, PyObject** py_slice,
        int has_cstart, int has_cstop, int wraparound);

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* CythonFunction.proto */
#define __Pyx_CyFunction_USED 1
#include <structmember.h>
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f)\
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_NewEx(ml, flags, qualname, self, module, globals, code)\
    __Pyx_CyFunction_New(__pyx_CyFunctionType, ml, flags, qualname, self, module, globals, code)
static PyObject *__Pyx_CyFunction_New(PyTypeObject *, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(void);

/* ListCompAppend.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* SliceObject.proto */
#define __Pyx_PyObject_DelSlice(obj, cstart, cstop, py_start, py_stop, py_slice, has_cstart, has_cstop, wraparound)\
    __Pyx_PyObject_SetSlice(obj, (PyObject*)NULL, cstart, cstop, py_start, py_stop, py_slice, has_cstart, has_cstop, wraparound)
static CYTHON_INLINE int __Pyx_PyObject_SetSlice(
        PyObject* obj, PyObject* value, Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** py_start, PyObject** py_stop, PyObject** py_slice,
        int has_cstart, int has_cstop, int wraparound);

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            PyObject* args = PyTuple_Pack(1, key);
            if (likely(args))
                PyErr_SetObject(PyExc_KeyError, args);
            Py_XDECREF(args);
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#else
    #define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#endif

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* SaveResetException.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetException.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* IncludeStringH.proto */
#include <string.h>

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* None.proto */
#include <new>

/* BufferStructDeclare.proto */
typedef struct {
  Py_ssize_t shape, strides, suboffsets;
} __Pyx_Buf_DimInfo;
typedef struct {
  size_t refcount;
  Py_buffer pybuffer;
} __Pyx_Buffer;
typedef struct {
  __Pyx_Buffer *rcbuffer;
  char *data;
  __Pyx_Buf_DimInfo diminfo[8];
} __Pyx_LocalBuf_ND;

#if PY_MAJOR_VERSION < 3
    static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags);
    static void __Pyx_ReleaseBuffer(Py_buffer *view);
#else
    #define __Pyx_GetBuffer PyObject_GetBuffer
    #define __Pyx_ReleaseBuffer PyBuffer_Release
#endif


/* None.proto */
static Py_ssize_t __Pyx_zeros[] = {0, 0, 0, 0, 0, 0, 0, 0};
static Py_ssize_t __Pyx_minusones[] = {-1, -1, -1, -1, -1, -1, -1, -1};

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

struct __pyx_t_5oasis_Pool;
static PyObject* __pyx_convert__to_py_struct____pyx_t_5oasis_Pool(struct __pyx_t_5oasis_Pool s);
/* None.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if defined(__cplusplus) && CYTHON_CCOMPLEX         && (defined(_WIN32) || defined(__clang__) || (defined(__GNUC__) && (__GNUC__ >= 5 || __GNUC__ == 4 && __GNUC_MINOR__ >= 4 )) || __cplusplus >= 201103)
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

/* None.proto */
static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

/* None.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eqf(a, b)   ((a)==(b))
    #define __Pyx_c_sumf(a, b)  ((a)+(b))
    #define __Pyx_c_difff(a, b) ((a)-(b))
    #define __Pyx_c_prodf(a, b) ((a)*(b))
    #define __Pyx_c_quotf(a, b) ((a)/(b))
    #define __Pyx_c_negf(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zerof(z) ((z)==(float)0)
    #define __Pyx_c_conjf(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_absf(z)     (::std::abs(z))
        #define __Pyx_c_powf(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zerof(z) ((z)==0)
    #define __Pyx_c_conjf(z)    (conjf(z))
    #if 1
        #define __Pyx_c_absf(z)     (cabsf(z))
        #define __Pyx_c_powf(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eqf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sumf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_difff(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prodf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quotf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_negf(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zerof(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conjf(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_absf(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_powf(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

/* None.proto */
static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);

/* None.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq(a, b)   ((a)==(b))
    #define __Pyx_c_sum(a, b)  ((a)+(b))
    #define __Pyx_c_diff(a, b) ((a)-(b))
    #define __Pyx_c_prod(a, b) ((a)*(b))
    #define __Pyx_c_quot(a, b) ((a)/(b))
    #define __Pyx_c_neg(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero(z) ((z)==(double)0)
    #define __Pyx_c_conj(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs(z)     (::std::abs(z))
        #define __Pyx_c_pow(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero(z) ((z)==0)
    #define __Pyx_c_conj(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs(z)     (cabs(z))
        #define __Pyx_c_pow(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NPY_TYPES(enum NPY_TYPES value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* PyIdentifierFromString.proto */
#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

/* ModuleImport.proto */
static PyObject *__Pyx_ImportModule(const char *name);

/* TypeImport.proto */
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython.version' */

/* Module declarations from 'cpython.exc' */

/* Module declarations from 'cpython.module' */

/* Module declarations from 'cpython.mem' */

/* Module declarations from 'cpython.tuple' */

/* Module declarations from 'cpython.list' */

/* Module declarations from 'cpython.sequence' */

/* Module declarations from 'cpython.mapping' */

/* Module declarations from 'cpython.iterator' */

/* Module declarations from 'cpython.number' */

/* Module declarations from 'cpython.int' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.bool' */
static PyTypeObject *__pyx_ptype_7cpython_4bool_bool = 0;

/* Module declarations from 'cpython.long' */

/* Module declarations from 'cpython.float' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.complex' */
static PyTypeObject *__pyx_ptype_7cpython_7complex_complex = 0;

/* Module declarations from 'cpython.string' */

/* Module declarations from 'cpython.unicode' */

/* Module declarations from 'cpython.dict' */

/* Module declarations from 'cpython.instance' */

/* Module declarations from 'cpython.function' */

/* Module declarations from 'cpython.method' */

/* Module declarations from 'cpython.weakref' */

/* Module declarations from 'cpython.getargs' */

/* Module declarations from 'cpython.pythread' */

/* Module declarations from 'cpython.pystate' */

/* Module declarations from 'cpython.cobject' */

/* Module declarations from 'cpython.oldbuffer' */

/* Module declarations from 'cpython.set' */

/* Module declarations from 'cpython.bytes' */

/* Module declarations from 'cpython.pycapsule' */

/* Module declarations from 'cpython' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'numpy' */

/* Module declarations from 'numpy' */
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;
static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *, char *, char *, int *); /*proto*/

/* Module declarations from 'cython' */

/* Module declarations from 'libc.math' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'oasis' */
static PyTypeObject *__pyx_ptype_5oasis_OASIS = 0;
static PyTypeObject *__pyx_ptype_5oasis___pyx_scope_struct__constrained_oasisAR1 = 0;
static PyTypeObject *__pyx_ptype_5oasis___pyx_scope_struct_1_baz = 0;
static PyTypeObject *__pyx_ptype_5oasis___pyx_scope_struct_2_baz = 0;
static PyObject *__pyx_f_5oasis_min1000(PyObject *); /*proto*/
static struct __pyx_t_5oasis_Pool __pyx_convert__from_py_struct____pyx_t_5oasis_Pool(PyObject *); /*proto*/
static std::vector<struct __pyx_t_5oasis_Pool>  __pyx_convert_vector_from_py_struct____pyx_t_5oasis_Pool(PyObject *); /*proto*/
static std::vector<__pyx_t_5oasis_SINGLE>  __pyx_convert_vector_from_py___pyx_t_5oasis_SINGLE(PyObject *); /*proto*/
static PyObject *__pyx_convert_vector_to_py_struct____pyx_t_5oasis_Pool(const std::vector<struct __pyx_t_5oasis_Pool>  &); /*proto*/
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE = { "SINGLE", NULL, sizeof(__pyx_t_5oasis_SINGLE), { 0 }, 0, 'R', 0, 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_long = { "long", NULL, sizeof(long), { 0 }, 0, IS_UNSIGNED(long) ? 'U' : 'I', IS_UNSIGNED(long), 0 };
#define __Pyx_MODULE_NAME "oasis"
int __pyx_module_is_main_oasis = 0;

/* Implementation of 'oasis' */
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_max;
static PyObject *__pyx_builtin_sum;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_KeyError;
static const char __pyx_k_P[] = "P";
static const char __pyx_k_T[] = "T";
static const char __pyx_k_b[] = "b";
static const char __pyx_k_c[] = "c";
static const char __pyx_k_g[] = "g";
static const char __pyx_k_h[] = "h";
static const char __pyx_k_i[] = "i";
static const char __pyx_k_j[] = "j";
static const char __pyx_k_k[] = "k";
static const char __pyx_k_l[] = "l";
static const char __pyx_k_p[] = "p";
static const char __pyx_k_q[] = "q";
static const char __pyx_k_s[] = "s";
static const char __pyx_k_t[] = "t";
static const char __pyx_k_v[] = "v";
static const char __pyx_k_w[] = "w";
static const char __pyx_k_x[] = "x";
static const char __pyx_k_y[] = "y";
static const char __pyx_k_Pl[] = "Pl";
static const char __pyx_k_Pt[] = "Pt";
static const char __pyx_k_aa[] = "aa";
static const char __pyx_k_bb[] = "bb";
static const char __pyx_k_cc[] = "cc";
static const char __pyx_k_db[] = "db";
static const char __pyx_k_ff[] = "ff";
static const char __pyx_k_g2[] = "g2";
static const char __pyx_k_ll[] = "ll";
static const char __pyx_k_ma[] = "ma";
static const char __pyx_k_np[] = "np";
static const char __pyx_k_sn[] = "sn";
static const char __pyx_k_yt[] = "yt";
static const char __pyx_k_yy[] = "yy";
static const char __pyx_k_RSS[] = "RSS";
static const char __pyx_k_bar[] = "bar";
static const char __pyx_k_baz[] = "baz";
static const char __pyx_k_dot[] = "dot";
static const char __pyx_k_exp[] = "exp";
static const char __pyx_k_foo[] = "foo";
static const char __pyx_k_idx[] = "idx";
static const char __pyx_k_inf[] = "inf";
static const char __pyx_k_lam[] = "lam";
static const char __pyx_k_lls[] = "lls";
static const char __pyx_k_max[] = "max";
static const char __pyx_k_num[] = "num";
static const char __pyx_k_opt[] = "opt";
static const char __pyx_k_pos[] = "pos";
static const char __pyx_k_res[] = "res";
static const char __pyx_k_sum[] = "sum";
static const char __pyx_k_tmp[] = "tmp";
static const char __pyx_k_val[] = "val";
static const char __pyx_k_copy[] = "copy";
static const char __pyx_k_dlam[] = "dlam";
static const char __pyx_k_dphi[] = "dphi";
static const char __pyx_k_ftol[] = "ftol";
static const char __pyx_k_gtol[] = "gtol";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_mean[] = "mean";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_xtol[] = "xtol";
static const char __pyx_k_yt_2[] = "_yt";
static const char __pyx_k_count[] = "count";
static const char __pyx_k_dtype[] = "dtype";
static const char __pyx_k_empty[] = "empty";
static const char __pyx_k_fluor[] = "fluor";
static const char __pyx_k_get_s[] = "get_s";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_oasis[] = "oasis";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_ravel[] = "ravel";
static const char __pyx_k_s_min[] = "s_min";
static const char __pyx_k_zeros[] = "zeros";
static const char __pyx_k_append[] = "append";
static const char __pyx_k_arange[] = "arange";
static const char __pyx_k_bounds[] = "bounds";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_maxfun[] = "maxfun";
static const char __pyx_k_method[] = "method";
static const char __pyx_k_result[] = "result";
static const char __pyx_k_thresh[] = "thresh";
static const char __pyx_k_unique[] = "unique";
static const char __pyx_k_argsort[] = "argsort";
static const char __pyx_k_float32[] = "float32";
static const char __pyx_k_maxiter[] = "maxiter";
static const char __pyx_k_newpool[] = "newpool";
static const char __pyx_k_options[] = "options";
static const char __pyx_k_penalty[] = "penalty";
static const char __pyx_k_reshape[] = "reshape";
static const char __pyx_k_KeyError[] = "KeyError";
static const char __pyx_k_L_BFGS_B[] = "L-BFGS-B";
static const char __pyx_k_b_nonneg[] = "b_nonneg";
static const char __pyx_k_decimate[] = "decimate";
static const char __pyx_k_fit_next[] = "fit_next";
static const char __pyx_k_max_iter[] = "max_iter";
static const char __pyx_k_minimize[] = "minimize";
static const char __pyx_k_oasisAR1[] = "oasisAR1";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_fminbound[] = "fminbound";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_optimize_b[] = "optimize_b";
static const char __pyx_k_optimize_g[] = "optimize_g";
static const char __pyx_k_percentile[] = "percentile";
static const char __pyx_k_zeros_like[] = "zeros_like";
static const char __pyx_k_g_converged[] = "g_converged";
static const char __pyx_k_oasis1strun[] = "oasis1strun";
static const char __pyx_k_RuntimeError[] = "RuntimeError";
static const char __pyx_k_idx_from_end[] = "idx_from_end";
static const char __pyx_k_scipy_optimize[] = "scipy.optimize";
static const char __pyx_k_num_empty_samples[] = "num_empty_samples";
static const char __pyx_k_constrained_oasisAR1[] = "constrained_oasisAR1";
static const char __pyx_k_ndarray_is_not_C_contiguous[] = "ndarray is not C contiguous";
static const char __pyx_k_constrained_oasisAR1_locals_bar[] = "constrained_oasisAR1.<locals>.bar.<locals>.foo";
static const char __pyx_k_constrained_oasisAR1_locals_baz[] = "constrained_oasisAR1.<locals>.baz.<locals>.<lambda>";
static const char __pyx_k_home_cat_code_caimin_CaimAn_oas[] = "/home/cat/code/caimin/CaimAn/oasis.pyx";
static const char __pyx_k_unknown_dtype_code_in_numpy_pxd[] = "unknown dtype code in numpy.pxd (%d)";
static const char __pyx_k_Extract_neural_activity_from_a_f[] = "Extract neural activity from a fluorescence trace using OASIS,\nan active set method for sparse nonnegative deconvolution\nCreated on Mon Apr 4 18:21:13 2016\n@author: Johannes Friedrich\n";
static const char __pyx_k_Format_string_allocated_too_shor[] = "Format string allocated too short, see comment in numpy.pxd";
static const char __pyx_k_No_value_specified_for_struct_at[] = "No value specified for struct attribute 'v'";
static const char __pyx_k_Non_native_byte_order_not_suppor[] = "Non-native byte order not supported";
static const char __pyx_k_constrained_oasisAR1_locals_oasi[] = "constrained_oasisAR1.<locals>.oasis1strun";
static const char __pyx_k_ndarray_is_not_Fortran_contiguou[] = "ndarray is not Fortran contiguous";
static const char __pyx_k_constrained_oasisAR1_locals_bar_2[] = "constrained_oasisAR1.<locals>.bar";
static const char __pyx_k_constrained_oasisAR1_locals_baz_2[] = "constrained_oasisAR1.<locals>.baz";
static const char __pyx_k_Format_string_allocated_too_shor_2[] = "Format string allocated too short.";
static const char __pyx_k_No_value_specified_for_struct_at_2[] = "No value specified for struct attribute 'w'";
static const char __pyx_k_No_value_specified_for_struct_at_3[] = "No value specified for struct attribute 't'";
static const char __pyx_k_No_value_specified_for_struct_at_4[] = "No value specified for struct attribute 'l'";
static const char __pyx_k_constrained_oasisAR1_locals_oasi_2[] = "constrained_oasisAR1.<locals>.oasis";
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor_2;
static PyObject *__pyx_n_s_KeyError;
static PyObject *__pyx_kp_s_L_BFGS_B;
static PyObject *__pyx_kp_s_No_value_specified_for_struct_at;
static PyObject *__pyx_kp_s_No_value_specified_for_struct_at_2;
static PyObject *__pyx_kp_s_No_value_specified_for_struct_at_3;
static PyObject *__pyx_kp_s_No_value_specified_for_struct_at_4;
static PyObject *__pyx_kp_u_Non_native_byte_order_not_suppor;
static PyObject *__pyx_n_s_P;
static PyObject *__pyx_n_s_Pl;
static PyObject *__pyx_n_s_Pt;
static PyObject *__pyx_n_s_RSS;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_n_s_T;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s_aa;
static PyObject *__pyx_n_s_append;
static PyObject *__pyx_n_s_arange;
static PyObject *__pyx_n_s_argsort;
static PyObject *__pyx_n_s_b;
static PyObject *__pyx_n_s_b_nonneg;
static PyObject *__pyx_n_s_bar;
static PyObject *__pyx_n_s_baz;
static PyObject *__pyx_n_s_bb;
static PyObject *__pyx_n_s_bounds;
static PyObject *__pyx_n_s_c;
static PyObject *__pyx_n_s_cc;
static PyObject *__pyx_n_s_constrained_oasisAR1;
static PyObject *__pyx_n_s_constrained_oasisAR1_locals_bar;
static PyObject *__pyx_n_s_constrained_oasisAR1_locals_bar_2;
static PyObject *__pyx_n_s_constrained_oasisAR1_locals_baz;
static PyObject *__pyx_n_s_constrained_oasisAR1_locals_baz_2;
static PyObject *__pyx_n_s_constrained_oasisAR1_locals_oasi;
static PyObject *__pyx_n_s_constrained_oasisAR1_locals_oasi_2;
static PyObject *__pyx_n_s_copy;
static PyObject *__pyx_n_s_count;
static PyObject *__pyx_n_s_db;
static PyObject *__pyx_n_s_decimate;
static PyObject *__pyx_n_s_dlam;
static PyObject *__pyx_n_s_dot;
static PyObject *__pyx_n_s_dphi;
static PyObject *__pyx_n_s_dtype;
static PyObject *__pyx_n_s_empty;
static PyObject *__pyx_n_s_exp;
static PyObject *__pyx_n_s_ff;
static PyObject *__pyx_n_s_fit_next;
static PyObject *__pyx_n_s_float32;
static PyObject *__pyx_n_s_fluor;
static PyObject *__pyx_n_s_fminbound;
static PyObject *__pyx_n_s_foo;
static PyObject *__pyx_n_s_ftol;
static PyObject *__pyx_n_s_g;
static PyObject *__pyx_n_s_g2;
static PyObject *__pyx_n_s_g_converged;
static PyObject *__pyx_n_s_get_s;
static PyObject *__pyx_n_s_gtol;
static PyObject *__pyx_n_s_h;
static PyObject *__pyx_kp_s_home_cat_code_caimin_CaimAn_oas;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_n_s_idx;
static PyObject *__pyx_n_s_idx_from_end;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_inf;
static PyObject *__pyx_n_s_j;
static PyObject *__pyx_n_s_k;
static PyObject *__pyx_n_s_l;
static PyObject *__pyx_n_s_lam;
static PyObject *__pyx_n_s_ll;
static PyObject *__pyx_n_s_lls;
static PyObject *__pyx_n_s_ma;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_max;
static PyObject *__pyx_n_s_max_iter;
static PyObject *__pyx_n_s_maxfun;
static PyObject *__pyx_n_s_maxiter;
static PyObject *__pyx_n_s_mean;
static PyObject *__pyx_n_s_method;
static PyObject *__pyx_n_s_minimize;
static PyObject *__pyx_kp_u_ndarray_is_not_C_contiguous;
static PyObject *__pyx_kp_u_ndarray_is_not_Fortran_contiguou;
static PyObject *__pyx_n_s_newpool;
static PyObject *__pyx_n_s_np;
static PyObject *__pyx_n_s_num;
static PyObject *__pyx_n_s_num_empty_samples;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_n_s_oasis;
static PyObject *__pyx_n_s_oasis1strun;
static PyObject *__pyx_n_s_oasisAR1;
static PyObject *__pyx_n_s_opt;
static PyObject *__pyx_n_s_optimize_b;
static PyObject *__pyx_n_s_optimize_g;
static PyObject *__pyx_n_s_options;
static PyObject *__pyx_n_s_p;
static PyObject *__pyx_n_s_penalty;
static PyObject *__pyx_n_s_percentile;
static PyObject *__pyx_n_s_pos;
static PyObject *__pyx_n_s_q;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_ravel;
static PyObject *__pyx_n_s_res;
static PyObject *__pyx_n_s_reshape;
static PyObject *__pyx_n_s_result;
static PyObject *__pyx_n_s_s;
static PyObject *__pyx_n_s_s_min;
static PyObject *__pyx_n_s_scipy_optimize;
static PyObject *__pyx_n_s_sn;
static PyObject *__pyx_n_s_sum;
static PyObject *__pyx_n_s_t;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_thresh;
static PyObject *__pyx_n_s_tmp;
static PyObject *__pyx_n_s_unique;
static PyObject *__pyx_kp_u_unknown_dtype_code_in_numpy_pxd;
static PyObject *__pyx_n_s_v;
static PyObject *__pyx_n_s_val;
static PyObject *__pyx_n_s_w;
static PyObject *__pyx_n_s_x;
static PyObject *__pyx_n_s_xtol;
static PyObject *__pyx_n_s_y;
static PyObject *__pyx_n_s_yt;
static PyObject *__pyx_n_s_yt_2;
static PyObject *__pyx_n_s_yy;
static PyObject *__pyx_n_s_zeros;
static PyObject *__pyx_n_s_zeros_like;
static int __pyx_pf_5oasis_5OASIS___init__(struct __pyx_obj_5oasis_OASIS *__pyx_v_self, PyObject *__pyx_v_g, PyObject *__pyx_v_lam, PyObject *__pyx_v_s_min, PyObject *__pyx_v_b, PyObject *__pyx_v_num_empty_samples, PyObject *__pyx_v_g2); /* proto */
static PyObject *__pyx_pf_5oasis_5OASIS_2fit_next(struct __pyx_obj_5oasis_OASIS *__pyx_v_self, PyObject *__pyx_v_yt); /* proto */
static PyObject *__pyx_pf_5oasis_5OASIS_4fit_next_tmp(struct __pyx_obj_5oasis_OASIS *__pyx_v_self, PyObject *__pyx_v_yt, PyObject *__pyx_v_num); /* proto */
static PyObject *__pyx_pf_5oasis_5OASIS_6fit(struct __pyx_obj_5oasis_OASIS *__pyx_v_self, PyObject *__pyx_v_y); /* proto */
static PyObject *__pyx_pf_5oasis_5OASIS_8get_c(struct __pyx_obj_5oasis_OASIS *__pyx_v_self, PyObject *__pyx_v_num); /* proto */
static PyObject *__pyx_pf_5oasis_5OASIS_10get_s(struct __pyx_obj_5oasis_OASIS *__pyx_v_self, PyObject *__pyx_v_num); /* proto */
static PyObject *__pyx_pf_5oasis_5OASIS_12get_l_of_last_pool(struct __pyx_obj_5oasis_OASIS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5oasis_5OASIS_14get_c_of_last_pool(struct __pyx_obj_5oasis_OASIS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5oasis_5OASIS_16remove_last_pool(struct __pyx_obj_5oasis_OASIS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5oasis_5OASIS_18get_l_of_pool(struct __pyx_obj_5oasis_OASIS *__pyx_v_self, PyObject *__pyx_v_idx_from_end); /* proto */
static PyObject *__pyx_pf_5oasis_5OASIS_20set_poolvalue(struct __pyx_obj_5oasis_OASIS *__pyx_v_self, PyObject *__pyx_v_val, PyObject *__pyx_v_idx_from_end); /* proto */
static PyObject *__pyx_pf_5oasis_5OASIS_1P___get__(struct __pyx_obj_5oasis_OASIS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5oasis_5OASIS_1g___get__(struct __pyx_obj_5oasis_OASIS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5oasis_5OASIS_2g2___get__(struct __pyx_obj_5oasis_OASIS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5oasis_5OASIS_3lam___get__(struct __pyx_obj_5oasis_OASIS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5oasis_5OASIS_5s_min___get__(struct __pyx_obj_5oasis_OASIS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5oasis_5OASIS_1b___get__(struct __pyx_obj_5oasis_OASIS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5oasis_5OASIS_1t___get__(struct __pyx_obj_5oasis_OASIS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5oasis_5OASIS_1c___get__(struct __pyx_obj_5oasis_OASIS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5oasis_5OASIS_1s___get__(struct __pyx_obj_5oasis_OASIS *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_5oasis_oasisAR1(CYTHON_UNUSED PyObject *__pyx_self, PyArrayObject *__pyx_v_y, __pyx_t_5oasis_SINGLE __pyx_v_g, __pyx_t_5oasis_SINGLE __pyx_v_lam, __pyx_t_5oasis_SINGLE __pyx_v_s_min); /* proto */
static PyObject *__pyx_pf_5oasis_20constrained_oasisAR1_oasis1strun(CYTHON_UNUSED PyObject *__pyx_self, PyArrayObject *__pyx_v_y, __pyx_t_5oasis_SINGLE __pyx_v_g, PyArrayObject *__pyx_v_c); /* proto */
static PyObject *__pyx_pf_5oasis_20constrained_oasisAR1_2oasis(CYTHON_UNUSED PyObject *__pyx_self, std::vector<struct __pyx_t_5oasis_Pool>  __pyx_v_P, __pyx_t_5oasis_SINGLE __pyx_v_g, PyArrayObject *__pyx_v_c); /* proto */
static PyObject *__pyx_pf_5oasis_20constrained_oasisAR1_3bar_4__defaults__(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5oasis_20constrained_oasisAR1_3bar_foo(PyObject *__pyx_self, PyObject *__pyx_v_y, PyObject *__pyx_v_t, PyObject *__pyx_v_l, PyObject *__pyx_v_q, PyObject *__pyx_v_g, PyObject *__pyx_v_lam); /* proto */
static PyObject *__pyx_pf_5oasis_20constrained_oasisAR1_4bar(PyObject *__pyx_self, PyObject *__pyx_v_y, PyObject *__pyx_v_g, PyObject *__pyx_v_Pt, PyObject *__pyx_v_Pl); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda(PyObject *__pyx_self, PyObject *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_5oasis_20constrained_oasisAR1_6baz(PyObject *__pyx_self, PyObject *__pyx_v_y, PyObject *__pyx_v_Pt, PyObject *__pyx_v_Pl); /* proto */
static PyObject *__pyx_pf_5oasis_20constrained_oasisAR1_3bar_6__defaults__(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_5oasis_20constrained_oasisAR1_3bar_2foo(PyObject *__pyx_self, PyObject *__pyx_v_y, PyObject *__pyx_v_t, PyObject *__pyx_v_l, PyObject *__pyx_v_q, PyObject *__pyx_v_b, PyObject *__pyx_v_g, PyObject *__pyx_v_lam); /* proto */
static PyObject *__pyx_pf_5oasis_20constrained_oasisAR1_8bar(PyObject *__pyx_self, PyObject *__pyx_v_y, PyObject *__pyx_v_opt, PyObject *__pyx_v_Pt, PyObject *__pyx_v_Pl); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda1(PyObject *__pyx_self, PyObject *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_5oasis_20constrained_oasisAR1_10baz(PyObject *__pyx_self, PyObject *__pyx_v_y, PyObject *__pyx_v_Pt, PyObject *__pyx_v_Pl); /* proto */
static PyObject *__pyx_pf_5oasis_2constrained_oasisAR1(CYTHON_UNUSED PyObject *__pyx_self, PyArrayObject *__pyx_v_y, __pyx_t_5oasis_SINGLE __pyx_v_g, __pyx_t_5oasis_SINGLE __pyx_v_sn, PyBoolObject *__pyx_v_optimize_b, PyBoolObject *__pyx_v_b_nonneg, int __pyx_v_optimize_g, int __pyx_v_decimate, int __pyx_v_max_iter, int __pyx_v_penalty); /* proto */
static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info); /* proto */
static PyObject *__pyx_tp_new_5oasis_OASIS(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5oasis___pyx_scope_struct__constrained_oasisAR1(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5oasis___pyx_scope_struct_1_baz(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_5oasis___pyx_scope_struct_2_baz(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_float__001;
static PyObject *__pyx_float__999;
static PyObject *__pyx_float_1eneg_4;
static PyObject *__pyx_float_1eneg_9;
static PyObject *__pyx_float_1eneg_04;
static PyObject *__pyx_float_1eneg_05;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_3;
static PyObject *__pyx_int_4;
static PyObject *__pyx_int_15;
static PyObject *__pyx_int_50;
static PyObject *__pyx_int_1000;
static PyObject *__pyx_int_neg_1;
static PyObject *__pyx_slice_;
static PyObject *__pyx_slice__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_slice__21;
static PyObject *__pyx_slice__22;
static PyObject *__pyx_slice__23;
static PyObject *__pyx_slice__24;
static PyObject *__pyx_slice__25;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__32;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_tuple__34;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__38;
static PyObject *__pyx_codeobj__4;
static PyObject *__pyx_codeobj__6;
static PyObject *__pyx_codeobj__10;
static PyObject *__pyx_codeobj__12;
static PyObject *__pyx_codeobj__14;
static PyObject *__pyx_codeobj__16;
static PyObject *__pyx_codeobj__18;
static PyObject *__pyx_codeobj__20;
static PyObject *__pyx_codeobj__37;
static PyObject *__pyx_codeobj__39;

/* "oasis.pyx":25
 * 
 * 
 * cdef min1000(a):             # <<<<<<<<<<<<<<
 *     return a if a < 1000 else 1000
 * 
 */

static PyObject *__pyx_f_5oasis_min1000(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("min1000", 0);

  /* "oasis.pyx":26
 * 
 * cdef min1000(a):
 *     return a if a < 1000 else 1000             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_a, __pyx_int_1000, Py_LT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 26, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {
    __Pyx_INCREF(__pyx_v_a);
    __pyx_t_1 = __pyx_v_a;
  } else {
    __Pyx_INCREF(__pyx_int_1000);
    __pyx_t_1 = __pyx_int_1000;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "oasis.pyx":25
 * 
 * 
 * cdef min1000(a):             # <<<<<<<<<<<<<<
 *     return a if a < 1000 else 1000
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("oasis.min1000", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "oasis.pyx":83
 *         vector[SINGLE] _y
 * 
 *     def __init__(self, g, lam=0, s_min=0, b=0, num_empty_samples=0, g2=0):             # <<<<<<<<<<<<<<
 *         # save the parameters as attributes
 *         # self.p = len(np.ravel(g))
 */

/* Python wrapper */
static int __pyx_pw_5oasis_5OASIS_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_5oasis_5OASIS_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_g = 0;
  PyObject *__pyx_v_lam = 0;
  PyObject *__pyx_v_s_min = 0;
  PyObject *__pyx_v_b = 0;
  PyObject *__pyx_v_num_empty_samples = 0;
  PyObject *__pyx_v_g2 = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_g,&__pyx_n_s_lam,&__pyx_n_s_s_min,&__pyx_n_s_b,&__pyx_n_s_num_empty_samples,&__pyx_n_s_g2,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    values[1] = ((PyObject *)__pyx_int_0);
    values[2] = ((PyObject *)__pyx_int_0);
    values[3] = ((PyObject *)__pyx_int_0);
    values[4] = ((PyObject *)__pyx_int_0);
    values[5] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_g)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_lam);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_s_min);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_b);
          if (value) { values[3] = value; kw_args--; }
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_num_empty_samples);
          if (value) { values[4] = value; kw_args--; }
        }
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_g2);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 83, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_g = values[0];
    __pyx_v_lam = values[1];
    __pyx_v_s_min = values[2];
    __pyx_v_b = values[3];
    __pyx_v_num_empty_samples = values[4];
    __pyx_v_g2 = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 1, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 83, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("oasis.OASIS.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5oasis_5OASIS___init__(((struct __pyx_obj_5oasis_OASIS *)__pyx_v_self), __pyx_v_g, __pyx_v_lam, __pyx_v_s_min, __pyx_v_b, __pyx_v_num_empty_samples, __pyx_v_g2);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5oasis_5OASIS___init__(struct __pyx_obj_5oasis_OASIS *__pyx_v_self, PyObject *__pyx_v_g, PyObject *__pyx_v_lam, PyObject *__pyx_v_s_min, PyObject *__pyx_v_b, PyObject *__pyx_v_num_empty_samples, PyObject *__pyx_v_g2) {
  __pyx_t_5oasis_SINGLE __pyx_v_lg;
  __pyx_t_5oasis_SINGLE __pyx_v_ld;
  __pyx_t_5oasis_SINGLE __pyx_v_lr;
  Py_ssize_t __pyx_v_k;
  struct __pyx_t_5oasis_Pool __pyx_v_newpool;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __pyx_t_5oasis_SINGLE __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  std::vector<struct __pyx_t_5oasis_Pool>  __pyx_t_3;
  int __pyx_t_4;
  double __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  unsigned int __pyx_t_10;
  __pyx_t_5oasis_SINGLE __pyx_t_11;
  std::vector<__pyx_t_5oasis_SINGLE>  __pyx_t_12;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "oasis.pyx":89
 *         cdef Py_ssize_t k
 *         cdef Pool newpool
 *         self.g = g             # <<<<<<<<<<<<<<
 *         self.g2 = g2
 *         self.lam = lam
 */
  __pyx_t_1 = __pyx_PyFloat_AsFloat(__pyx_v_g); if (unlikely((__pyx_t_1 == (npy_float32)-1) && PyErr_Occurred())) __PYX_ERR(0, 89, __pyx_L1_error)
  __pyx_v_self->g = __pyx_t_1;

  /* "oasis.pyx":90
 *         cdef Pool newpool
 *         self.g = g
 *         self.g2 = g2             # <<<<<<<<<<<<<<
 *         self.lam = lam
 *         self.s_min = s_min
 */
  __pyx_t_1 = __pyx_PyFloat_AsFloat(__pyx_v_g2); if (unlikely((__pyx_t_1 == (npy_float32)-1) && PyErr_Occurred())) __PYX_ERR(0, 90, __pyx_L1_error)
  __pyx_v_self->g2 = __pyx_t_1;

  /* "oasis.pyx":91
 *         self.g = g
 *         self.g2 = g2
 *         self.lam = lam             # <<<<<<<<<<<<<<
 *         self.s_min = s_min
 *         self.b = b
 */
  __pyx_t_1 = __pyx_PyFloat_AsFloat(__pyx_v_lam); if (unlikely((__pyx_t_1 == (npy_float32)-1) && PyErr_Occurred())) __PYX_ERR(0, 91, __pyx_L1_error)
  __pyx_v_self->lam = __pyx_t_1;

  /* "oasis.pyx":92
 *         self.g2 = g2
 *         self.lam = lam
 *         self.s_min = s_min             # <<<<<<<<<<<<<<
 *         self.b = b
 *         self.P = []
 */
  __pyx_t_1 = __pyx_PyFloat_AsFloat(__pyx_v_s_min); if (unlikely((__pyx_t_1 == (npy_float32)-1) && PyErr_Occurred())) __PYX_ERR(0, 92, __pyx_L1_error)
  __pyx_v_self->s_min = __pyx_t_1;

  /* "oasis.pyx":93
 *         self.lam = lam
 *         self.s_min = s_min
 *         self.b = b             # <<<<<<<<<<<<<<
 *         self.P = []
 *         # precompute
 */
  __pyx_t_1 = __pyx_PyFloat_AsFloat(__pyx_v_b); if (unlikely((__pyx_t_1 == (npy_float32)-1) && PyErr_Occurred())) __PYX_ERR(0, 93, __pyx_L1_error)
  __pyx_v_self->b = __pyx_t_1;

  /* "oasis.pyx":94
 *         self.s_min = s_min
 *         self.b = b
 *         self.P = []             # <<<<<<<<<<<<<<
 *         # precompute
 *         if g2 == 0:  # AR(1)
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __pyx_convert_vector_from_py_struct____pyx_t_5oasis_Pool(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_self->P = __pyx_t_3;

  /* "oasis.pyx":96
 *         self.P = []
 *         # precompute
 *         if g2 == 0:  # AR(1)             # <<<<<<<<<<<<<<
 *             # calc explicit kernel h just once; length should be >=max ISI
 *             lg = log(g)
 */
  __pyx_t_2 = __Pyx_PyInt_EqObjC(__pyx_v_g2, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 96, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 96, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "oasis.pyx":98
 *         if g2 == 0:  # AR(1)
 *             # calc explicit kernel h just once; length should be >=max ISI
 *             lg = log(g)             # <<<<<<<<<<<<<<
 *             for k in range(1000):
 *                 self.h[k] = exp(lg * k)
 */
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_g); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 98, __pyx_L1_error)
    __pyx_v_lg = log(__pyx_t_5);

    /* "oasis.pyx":99
 *             # calc explicit kernel h just once; length should be >=max ISI
 *             lg = log(g)
 *             for k in range(1000):             # <<<<<<<<<<<<<<
 *                 self.h[k] = exp(lg * k)
 *             if num_empty_samples > 0:
 */
    for (__pyx_t_6 = 0; __pyx_t_6 < 0x3E8; __pyx_t_6+=1) {
      __pyx_v_k = __pyx_t_6;

      /* "oasis.pyx":100
 *             lg = log(g)
 *             for k in range(1000):
 *                 self.h[k] = exp(lg * k)             # <<<<<<<<<<<<<<
 *             if num_empty_samples > 0:
 *                 newpool.w = (1 - g**(2 * num_empty_samples)) / (1 - g * g)
 */
      (__pyx_v_self->h[__pyx_v_k]) = exp((__pyx_v_lg * __pyx_v_k));
    }

    /* "oasis.pyx":101
 *             for k in range(1000):
 *                 self.h[k] = exp(lg * k)
 *             if num_empty_samples > 0:             # <<<<<<<<<<<<<<
 *                 newpool.w = (1 - g**(2 * num_empty_samples)) / (1 - g * g)
 *                 newpool.v, newpool.t, newpool.l = 0, 0, num_empty_samples
 */
    __pyx_t_2 = PyObject_RichCompare(__pyx_v_num_empty_samples, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 101, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 101, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_4) {

      /* "oasis.pyx":102
 *                 self.h[k] = exp(lg * k)
 *             if num_empty_samples > 0:
 *                 newpool.w = (1 - g**(2 * num_empty_samples)) / (1 - g * g)             # <<<<<<<<<<<<<<
 *                 newpool.v, newpool.t, newpool.l = 0, 0, num_empty_samples
 *                 self.P.push_back(newpool)
 */
      __pyx_t_2 = PyNumber_Multiply(__pyx_int_2, __pyx_v_num_empty_samples); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 102, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_7 = PyNumber_Power(__pyx_v_g, __pyx_t_2, Py_None); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 102, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyInt_SubtractCObj(__pyx_int_1, __pyx_t_7, 1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 102, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = PyNumber_Multiply(__pyx_v_g, __pyx_v_g); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 102, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = __Pyx_PyInt_SubtractCObj(__pyx_int_1, __pyx_t_7, 1, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 102, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyNumber_Divide(__pyx_t_2, __pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 102, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_1 = __pyx_PyFloat_AsFloat(__pyx_t_7); if (unlikely((__pyx_t_1 == (npy_float32)-1) && PyErr_Occurred())) __PYX_ERR(0, 102, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_v_newpool.w = __pyx_t_1;

      /* "oasis.pyx":103
 *             if num_empty_samples > 0:
 *                 newpool.w = (1 - g**(2 * num_empty_samples)) / (1 - g * g)
 *                 newpool.v, newpool.t, newpool.l = 0, 0, num_empty_samples             # <<<<<<<<<<<<<<
 *                 self.P.push_back(newpool)
 *                 self.t = num_empty_samples
 */
      __pyx_t_1 = 0.0;
      __pyx_t_6 = 0;
      __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_v_num_empty_samples); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 103, __pyx_L1_error)
      __pyx_v_newpool.v = __pyx_t_1;
      __pyx_v_newpool.t = __pyx_t_6;
      __pyx_v_newpool.l = __pyx_t_9;

      /* "oasis.pyx":104
 *                 newpool.w = (1 - g**(2 * num_empty_samples)) / (1 - g * g)
 *                 newpool.v, newpool.t, newpool.l = 0, 0, num_empty_samples
 *                 self.P.push_back(newpool)             # <<<<<<<<<<<<<<
 *                 self.t = num_empty_samples
 *                 self.i = 0  # index of last pool
 */
      try {
        __pyx_v_self->P.push_back(__pyx_v_newpool);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 104, __pyx_L1_error)
      }

      /* "oasis.pyx":105
 *                 newpool.v, newpool.t, newpool.l = 0, 0, num_empty_samples
 *                 self.P.push_back(newpool)
 *                 self.t = num_empty_samples             # <<<<<<<<<<<<<<
 *                 self.i = 0  # index of last pool
 *             else:
 */
      __pyx_t_10 = __Pyx_PyInt_As_unsigned_int(__pyx_v_num_empty_samples); if (unlikely((__pyx_t_10 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 105, __pyx_L1_error)
      __pyx_v_self->t = __pyx_t_10;

      /* "oasis.pyx":106
 *                 self.P.push_back(newpool)
 *                 self.t = num_empty_samples
 *                 self.i = 0  # index of last pool             # <<<<<<<<<<<<<<
 *             else:
 *                 self.t = 0
 */
      __pyx_v_self->i = 0;

      /* "oasis.pyx":101
 *             for k in range(1000):
 *                 self.h[k] = exp(lg * k)
 *             if num_empty_samples > 0:             # <<<<<<<<<<<<<<
 *                 newpool.w = (1 - g**(2 * num_empty_samples)) / (1 - g * g)
 *                 newpool.v, newpool.t, newpool.l = 0, 0, num_empty_samples
 */
      goto __pyx_L6;
    }

    /* "oasis.pyx":108
 *                 self.i = 0  # index of last pool
 *             else:
 *                 self.t = 0             # <<<<<<<<<<<<<<
 *                 self.i = -1
 *         else:  # AR(2)
 */
    /*else*/ {
      __pyx_v_self->t = 0;

      /* "oasis.pyx":109
 *             else:
 *                 self.t = 0
 *                 self.i = -1             # <<<<<<<<<<<<<<
 *         else:  # AR(2)
 *             self.d = (g + sqrt(g * g + 4 * g2)) / 2
 */
      __pyx_v_self->i = -1L;
    }
    __pyx_L6:;

    /* "oasis.pyx":96
 *         self.P = []
 *         # precompute
 *         if g2 == 0:  # AR(1)             # <<<<<<<<<<<<<<
 *             # calc explicit kernel h just once; length should be >=max ISI
 *             lg = log(g)
 */
    goto __pyx_L3;
  }

  /* "oasis.pyx":111
 *                 self.i = -1
 *         else:  # AR(2)
 *             self.d = (g + sqrt(g * g + 4 * g2)) / 2             # <<<<<<<<<<<<<<
 *             self.r = (g - sqrt(g * g + 4 * g2)) / 2
 *             ld = log(self.d)
 */
  /*else*/ {
    __pyx_t_7 = PyNumber_Multiply(__pyx_v_g, __pyx_v_g); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 111, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = PyNumber_Multiply(__pyx_int_4, __pyx_v_g2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 111, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_2 = PyNumber_Add(__pyx_t_7, __pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 111, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 111, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyFloat_FromDouble(sqrt(__pyx_t_5)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 111, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_8 = PyNumber_Add(__pyx_v_g, __pyx_t_2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 111, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_t_8, __pyx_int_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 111, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_1 = __pyx_PyFloat_AsFloat(__pyx_t_2); if (unlikely((__pyx_t_1 == (npy_float32)-1) && PyErr_Occurred())) __PYX_ERR(0, 111, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_self->d = __pyx_t_1;

    /* "oasis.pyx":112
 *         else:  # AR(2)
 *             self.d = (g + sqrt(g * g + 4 * g2)) / 2
 *             self.r = (g - sqrt(g * g + 4 * g2)) / 2             # <<<<<<<<<<<<<<
 *             ld = log(self.d)
 *             if self.d == self.r:
 */
    __pyx_t_2 = PyNumber_Multiply(__pyx_v_g, __pyx_v_g); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 112, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_8 = PyNumber_Multiply(__pyx_int_4, __pyx_v_g2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 112, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_7 = PyNumber_Add(__pyx_t_2, __pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 112, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_7); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 112, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyFloat_FromDouble(sqrt(__pyx_t_5)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 112, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = PyNumber_Subtract(__pyx_v_g, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 112, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyNumber_Divide(__pyx_t_8, __pyx_int_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 112, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_1 = __pyx_PyFloat_AsFloat(__pyx_t_7); if (unlikely((__pyx_t_1 == (npy_float32)-1) && PyErr_Occurred())) __PYX_ERR(0, 112, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_v_self->r = __pyx_t_1;

    /* "oasis.pyx":113
 *             self.d = (g + sqrt(g * g + 4 * g2)) / 2
 *             self.r = (g - sqrt(g * g + 4 * g2)) / 2
 *             ld = log(self.d)             # <<<<<<<<<<<<<<
 *             if self.d == self.r:
 *                 for k in range(1000):
 */
    __pyx_v_ld = log(__pyx_v_self->d);

    /* "oasis.pyx":114
 *             self.r = (g - sqrt(g * g + 4 * g2)) / 2
 *             ld = log(self.d)
 *             if self.d == self.r:             # <<<<<<<<<<<<<<
 *                 for k in range(1000):
 *                     self.h[k] = exp(ld * k) * (k + 1)
 */
    __pyx_t_4 = ((__pyx_v_self->d == __pyx_v_self->r) != 0);
    if (__pyx_t_4) {

      /* "oasis.pyx":115
 *             ld = log(self.d)
 *             if self.d == self.r:
 *                 for k in range(1000):             # <<<<<<<<<<<<<<
 *                     self.h[k] = exp(ld * k) * (k + 1)
 *             else:
 */
      for (__pyx_t_9 = 0; __pyx_t_9 < 0x3E8; __pyx_t_9+=1) {
        __pyx_v_k = __pyx_t_9;

        /* "oasis.pyx":116
 *             if self.d == self.r:
 *                 for k in range(1000):
 *                     self.h[k] = exp(ld * k) * (k + 1)             # <<<<<<<<<<<<<<
 *             else:
 *                 lr = log(self.r)
 */
        (__pyx_v_self->h[__pyx_v_k]) = (exp((__pyx_v_ld * __pyx_v_k)) * (__pyx_v_k + 1));
      }

      /* "oasis.pyx":114
 *             self.r = (g - sqrt(g * g + 4 * g2)) / 2
 *             ld = log(self.d)
 *             if self.d == self.r:             # <<<<<<<<<<<<<<
 *                 for k in range(1000):
 *                     self.h[k] = exp(ld * k) * (k + 1)
 */
      goto __pyx_L7;
    }

    /* "oasis.pyx":118
 *                     self.h[k] = exp(ld * k) * (k + 1)
 *             else:
 *                 lr = log(self.r)             # <<<<<<<<<<<<<<
 *                 lg = self.d - self.r
 *                 for k in range(1, 1001):
 */
    /*else*/ {
      __pyx_v_lr = log(__pyx_v_self->r);

      /* "oasis.pyx":119
 *             else:
 *                 lr = log(self.r)
 *                 lg = self.d - self.r             # <<<<<<<<<<<<<<
 *                 for k in range(1, 1001):
 *                     self.h[k - 1] = (exp(ld * k) - exp(lr * k)) / lg
 */
      __pyx_v_lg = (__pyx_v_self->d - __pyx_v_self->r);

      /* "oasis.pyx":120
 *                 lr = log(self.r)
 *                 lg = self.d - self.r
 *                 for k in range(1, 1001):             # <<<<<<<<<<<<<<
 *                     self.h[k - 1] = (exp(ld * k) - exp(lr * k)) / lg
 *             self.g12[0] = 0
 */
      for (__pyx_t_9 = 1; __pyx_t_9 < 0x3E9; __pyx_t_9+=1) {
        __pyx_v_k = __pyx_t_9;

        /* "oasis.pyx":121
 *                 lg = self.d - self.r
 *                 for k in range(1, 1001):
 *                     self.h[k - 1] = (exp(ld * k) - exp(lr * k)) / lg             # <<<<<<<<<<<<<<
 *             self.g12[0] = 0
 *             for k in range(1, 1000):
 */
        __pyx_t_5 = (exp((__pyx_v_ld * __pyx_v_k)) - exp((__pyx_v_lr * __pyx_v_k)));
        if (unlikely(__pyx_v_lg == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 121, __pyx_L1_error)
        }
        (__pyx_v_self->h[(__pyx_v_k - 1)]) = (__pyx_t_5 / __pyx_v_lg);
      }
    }
    __pyx_L7:;

    /* "oasis.pyx":122
 *                 for k in range(1, 1001):
 *                     self.h[k - 1] = (exp(ld * k) - exp(lr * k)) / lg
 *             self.g12[0] = 0             # <<<<<<<<<<<<<<
 *             for k in range(1, 1000):
 *                 self.g12[k] = g2 * self.h[k - 1]
 */
    (__pyx_v_self->g12[0]) = 0.0;

    /* "oasis.pyx":123
 *                     self.h[k - 1] = (exp(ld * k) - exp(lr * k)) / lg
 *             self.g12[0] = 0
 *             for k in range(1, 1000):             # <<<<<<<<<<<<<<
 *                 self.g12[k] = g2 * self.h[k - 1]
 *             self.g11g11[0] = 1  # h[0] * h[0]
 */
    for (__pyx_t_9 = 1; __pyx_t_9 < 0x3E8; __pyx_t_9+=1) {
      __pyx_v_k = __pyx_t_9;

      /* "oasis.pyx":124
 *             self.g12[0] = 0
 *             for k in range(1, 1000):
 *                 self.g12[k] = g2 * self.h[k - 1]             # <<<<<<<<<<<<<<
 *             self.g11g11[0] = 1  # h[0] * h[0]
 *             self.g11g12[0] = 0  # h[0] * g12[0]
 */
      __pyx_t_7 = PyFloat_FromDouble((__pyx_v_self->h[(__pyx_v_k - 1)])); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 124, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = PyNumber_Multiply(__pyx_v_g2, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 124, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_1 = __pyx_PyFloat_AsFloat(__pyx_t_8); if (unlikely((__pyx_t_1 == (npy_float32)-1) && PyErr_Occurred())) __PYX_ERR(0, 124, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      (__pyx_v_self->g12[__pyx_v_k]) = __pyx_t_1;
    }

    /* "oasis.pyx":125
 *             for k in range(1, 1000):
 *                 self.g12[k] = g2 * self.h[k - 1]
 *             self.g11g11[0] = 1  # h[0] * h[0]             # <<<<<<<<<<<<<<
 *             self.g11g12[0] = 0  # h[0] * g12[0]
 *             for k in range(1, 1000):
 */
    (__pyx_v_self->g11g11[0]) = 1.0;

    /* "oasis.pyx":126
 *                 self.g12[k] = g2 * self.h[k - 1]
 *             self.g11g11[0] = 1  # h[0] * h[0]
 *             self.g11g12[0] = 0  # h[0] * g12[0]             # <<<<<<<<<<<<<<
 *             for k in range(1, 1000):
 *                 self.g11g11[k] = self.g11g11[k - 1] + self.h[k] * self.h[k]
 */
    (__pyx_v_self->g11g12[0]) = 0.0;

    /* "oasis.pyx":127
 *             self.g11g11[0] = 1  # h[0] * h[0]
 *             self.g11g12[0] = 0  # h[0] * g12[0]
 *             for k in range(1, 1000):             # <<<<<<<<<<<<<<
 *                 self.g11g11[k] = self.g11g11[k - 1] + self.h[k] * self.h[k]
 *                 self.g11g12[k] = self.g11g12[k - 1] + self.h[k] * self.g12[k]
 */
    for (__pyx_t_9 = 1; __pyx_t_9 < 0x3E8; __pyx_t_9+=1) {
      __pyx_v_k = __pyx_t_9;

      /* "oasis.pyx":128
 *             self.g11g12[0] = 0  # h[0] * g12[0]
 *             for k in range(1, 1000):
 *                 self.g11g11[k] = self.g11g11[k - 1] + self.h[k] * self.h[k]             # <<<<<<<<<<<<<<
 *                 self.g11g12[k] = self.g11g12[k - 1] + self.h[k] * self.g12[k]
 *             if num_empty_samples > 0:
 */
      (__pyx_v_self->g11g11[__pyx_v_k]) = ((__pyx_v_self->g11g11[(__pyx_v_k - 1)]) + ((__pyx_v_self->h[__pyx_v_k]) * (__pyx_v_self->h[__pyx_v_k])));

      /* "oasis.pyx":129
 *             for k in range(1, 1000):
 *                 self.g11g11[k] = self.g11g11[k - 1] + self.h[k] * self.h[k]
 *                 self.g11g12[k] = self.g11g12[k - 1] + self.h[k] * self.g12[k]             # <<<<<<<<<<<<<<
 *             if num_empty_samples > 0:
 *                 newpool.v, newpool.w, newpool.t, newpool.l = 0, 0, 0, num_empty_samples
 */
      (__pyx_v_self->g11g12[__pyx_v_k]) = ((__pyx_v_self->g11g12[(__pyx_v_k - 1)]) + ((__pyx_v_self->h[__pyx_v_k]) * (__pyx_v_self->g12[__pyx_v_k])));
    }

    /* "oasis.pyx":130
 *                 self.g11g11[k] = self.g11g11[k - 1] + self.h[k] * self.h[k]
 *                 self.g11g12[k] = self.g11g12[k - 1] + self.h[k] * self.g12[k]
 *             if num_empty_samples > 0:             # <<<<<<<<<<<<<<
 *                 newpool.v, newpool.w, newpool.t, newpool.l = 0, 0, 0, num_empty_samples
 *                 self.P.push_back(newpool)
 */
    __pyx_t_8 = PyObject_RichCompare(__pyx_v_num_empty_samples, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 130, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 130, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (__pyx_t_4) {

      /* "oasis.pyx":131
 *                 self.g11g12[k] = self.g11g12[k - 1] + self.h[k] * self.g12[k]
 *             if num_empty_samples > 0:
 *                 newpool.v, newpool.w, newpool.t, newpool.l = 0, 0, 0, num_empty_samples             # <<<<<<<<<<<<<<
 *                 self.P.push_back(newpool)
 *                 self.t = num_empty_samples
 */
      __pyx_t_1 = 0.0;
      __pyx_t_11 = 0.0;
      __pyx_t_9 = 0;
      __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_num_empty_samples); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 131, __pyx_L1_error)
      __pyx_v_newpool.v = __pyx_t_1;
      __pyx_v_newpool.w = __pyx_t_11;
      __pyx_v_newpool.t = __pyx_t_9;
      __pyx_v_newpool.l = __pyx_t_6;

      /* "oasis.pyx":132
 *             if num_empty_samples > 0:
 *                 newpool.v, newpool.w, newpool.t, newpool.l = 0, 0, 0, num_empty_samples
 *                 self.P.push_back(newpool)             # <<<<<<<<<<<<<<
 *                 self.t = num_empty_samples
 *                 self.i = 0  # index of last pool
 */
      try {
        __pyx_v_self->P.push_back(__pyx_v_newpool);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 132, __pyx_L1_error)
      }

      /* "oasis.pyx":133
 *                 newpool.v, newpool.w, newpool.t, newpool.l = 0, 0, 0, num_empty_samples
 *                 self.P.push_back(newpool)
 *                 self.t = num_empty_samples             # <<<<<<<<<<<<<<
 *                 self.i = 0  # index of last pool
 *             else:
 */
      __pyx_t_10 = __Pyx_PyInt_As_unsigned_int(__pyx_v_num_empty_samples); if (unlikely((__pyx_t_10 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 133, __pyx_L1_error)
      __pyx_v_self->t = __pyx_t_10;

      /* "oasis.pyx":134
 *                 self.P.push_back(newpool)
 *                 self.t = num_empty_samples
 *                 self.i = 0  # index of last pool             # <<<<<<<<<<<<<<
 *             else:
 *                 self.t = 0
 */
      __pyx_v_self->i = 0;

      /* "oasis.pyx":130
 *                 self.g11g11[k] = self.g11g11[k - 1] + self.h[k] * self.h[k]
 *                 self.g11g12[k] = self.g11g12[k - 1] + self.h[k] * self.g12[k]
 *             if num_empty_samples > 0:             # <<<<<<<<<<<<<<
 *                 newpool.v, newpool.w, newpool.t, newpool.l = 0, 0, 0, num_empty_samples
 *                 self.P.push_back(newpool)
 */
      goto __pyx_L16;
    }

    /* "oasis.pyx":136
 *                 self.i = 0  # index of last pool
 *             else:
 *                 self.t = 0             # <<<<<<<<<<<<<<
 *                 self.i = -1
 *             self._y = [0] * num_empty_samples
 */
    /*else*/ {
      __pyx_v_self->t = 0;

      /* "oasis.pyx":137
 *             else:
 *                 self.t = 0
 *                 self.i = -1             # <<<<<<<<<<<<<<
 *             self._y = [0] * num_empty_samples
 * 
 */
      __pyx_v_self->i = -1L;
    }
    __pyx_L16:;

    /* "oasis.pyx":138
 *                 self.t = 0
 *                 self.i = -1
 *             self._y = [0] * num_empty_samples             # <<<<<<<<<<<<<<
 * 
 *     def fit_next(self, yt):
 */
    __pyx_t_8 = PyList_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 138, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_INCREF(__pyx_int_0);
    __Pyx_GIVEREF(__pyx_int_0);
    PyList_SET_ITEM(__pyx_t_8, 0, __pyx_int_0);
    { PyObject* __pyx_temp = PyNumber_InPlaceMultiply(__pyx_t_8, __pyx_v_num_empty_samples); if (unlikely(!__pyx_temp)) __PYX_ERR(0, 138, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_temp);
      __Pyx_DECREF(__pyx_t_8);
      __pyx_t_8 = __pyx_temp;
    }
    __pyx_t_12 = __pyx_convert_vector_from_py___pyx_t_5oasis_SINGLE(__pyx_t_8); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 138, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_v_self->_y = __pyx_t_12;
  }
  __pyx_L3:;

  /* "oasis.pyx":83
 *         vector[SINGLE] _y
 * 
 *     def __init__(self, g, lam=0, s_min=0, b=0, num_empty_samples=0, g2=0):             # <<<<<<<<<<<<<<
 *         # save the parameters as attributes
 *         # self.p = len(np.ravel(g))
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("oasis.OASIS.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "oasis.pyx":140
 *             self._y = [0] * num_empty_samples
 * 
 *     def fit_next(self, yt):             # <<<<<<<<<<<<<<
 *         """
 *         fit next time step t
 */

/* Python wrapper */
static PyObject *__pyx_pw_5oasis_5OASIS_3fit_next(PyObject *__pyx_v_self, PyObject *__pyx_v_yt); /*proto*/
static char __pyx_doc_5oasis_5OASIS_2fit_next[] = "\n        fit next time step t\n        ";
static PyObject *__pyx_pw_5oasis_5OASIS_3fit_next(PyObject *__pyx_v_self, PyObject *__pyx_v_yt) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fit_next (wrapper)", 0);
  __pyx_r = __pyx_pf_5oasis_5OASIS_2fit_next(((struct __pyx_obj_5oasis_OASIS *)__pyx_v_self), ((PyObject *)__pyx_v_yt));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5oasis_5OASIS_2fit_next(struct __pyx_obj_5oasis_OASIS *__pyx_v_self, PyObject *__pyx_v_yt) {
  struct __pyx_t_5oasis_Pool __pyx_v_newpool;
  Py_ssize_t __pyx_v_j;
  Py_ssize_t __pyx_v_k;
  __pyx_t_5oasis_SINGLE __pyx_v_tmp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __pyx_t_5oasis_SINGLE __pyx_t_5;
  unsigned int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  int __pyx_t_8;
  __pyx_t_5oasis_SINGLE __pyx_t_9;
  __pyx_t_5oasis_SINGLE __pyx_t_10;
  __pyx_t_5oasis_SINGLE __pyx_t_11;
  int __pyx_t_12;
  long __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  __Pyx_RefNannySetupContext("fit_next", 0);

  /* "oasis.pyx":148
 *         cdef np.ndarray[SINGLE, ndim = 1] h, g12, g11g11, g11g12
 *         cdef SINGLE tmp
 *         if self.g2 == 0:  # AR(1)             # <<<<<<<<<<<<<<
 *             newpool.v = yt - self.b - self.lam * (1 - self.g)
 *             newpool.w, newpool.t, newpool.l = 1, self.t, 1
 */
  __pyx_t_1 = ((__pyx_v_self->g2 == 0.0) != 0);
  if (__pyx_t_1) {

    /* "oasis.pyx":149
 *         cdef SINGLE tmp
 *         if self.g2 == 0:  # AR(1)
 *             newpool.v = yt - self.b - self.lam * (1 - self.g)             # <<<<<<<<<<<<<<
 *             newpool.w, newpool.t, newpool.l = 1, self.t, 1
 *             self.P.push_back(newpool)
 */
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->b); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 149, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_Subtract(__pyx_v_yt, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 149, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyFloat_FromDouble((__pyx_v_self->lam * (1.0 - __pyx_v_self->g))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 149, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PyNumber_Subtract(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 149, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_5 = __pyx_PyFloat_AsFloat(__pyx_t_4); if (unlikely((__pyx_t_5 == (npy_float32)-1) && PyErr_Occurred())) __PYX_ERR(0, 149, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_newpool.v = __pyx_t_5;

    /* "oasis.pyx":150
 *         if self.g2 == 0:  # AR(1)
 *             newpool.v = yt - self.b - self.lam * (1 - self.g)
 *             newpool.w, newpool.t, newpool.l = 1, self.t, 1             # <<<<<<<<<<<<<<
 *             self.P.push_back(newpool)
 *             self.t += 1
 */
    __pyx_t_5 = 1.0;
    __pyx_t_6 = __pyx_v_self->t;
    __pyx_t_7 = 1;
    __pyx_v_newpool.w = __pyx_t_5;
    __pyx_v_newpool.t = __pyx_t_6;
    __pyx_v_newpool.l = __pyx_t_7;

    /* "oasis.pyx":151
 *             newpool.v = yt - self.b - self.lam * (1 - self.g)
 *             newpool.w, newpool.t, newpool.l = 1, self.t, 1
 *             self.P.push_back(newpool)             # <<<<<<<<<<<<<<
 *             self.t += 1
 *             self.i += 1
 */
    try {
      __pyx_v_self->P.push_back(__pyx_v_newpool);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 151, __pyx_L1_error)
    }

    /* "oasis.pyx":152
 *             newpool.w, newpool.t, newpool.l = 1, self.t, 1
 *             self.P.push_back(newpool)
 *             self.t += 1             # <<<<<<<<<<<<<<
 *             self.i += 1
 *             while (self.i > 0 and  # backtrack until violations fixed
 */
    __pyx_v_self->t = (__pyx_v_self->t + 1);

    /* "oasis.pyx":153
 *             self.P.push_back(newpool)
 *             self.t += 1
 *             self.i += 1             # <<<<<<<<<<<<<<
 *             while (self.i > 0 and  # backtrack until violations fixed
 *                    (self.P[self.i - 1].v / self.P[self.i - 1].w * self.g**self.P[self.i - 1].l +
 */
    __pyx_v_self->i = (__pyx_v_self->i + 1);

    /* "oasis.pyx":154
 *             self.t += 1
 *             self.i += 1
 *             while (self.i > 0 and  # backtrack until violations fixed             # <<<<<<<<<<<<<<
 *                    (self.P[self.i - 1].v / self.P[self.i - 1].w * self.g**self.P[self.i - 1].l +
 *                     self.s_min > self.P[self.i].v / self.P[self.i].w)):
 */
    while (1) {
      __pyx_t_8 = ((__pyx_v_self->i > 0) != 0);
      if (__pyx_t_8) {
      } else {
        __pyx_t_1 = __pyx_t_8;
        goto __pyx_L6_bool_binop_done;
      }

      /* "oasis.pyx":155
 *             self.i += 1
 *             while (self.i > 0 and  # backtrack until violations fixed
 *                    (self.P[self.i - 1].v / self.P[self.i - 1].w * self.g**self.P[self.i - 1].l +             # <<<<<<<<<<<<<<
 *                     self.s_min > self.P[self.i].v / self.P[self.i].w)):
 *                 self.i -= 1
 */
      __pyx_t_5 = (__pyx_v_self->P[(__pyx_v_self->i - 1)]).v;
      __pyx_t_9 = (__pyx_v_self->P[(__pyx_v_self->i - 1)]).w;
      if (unlikely(__pyx_t_9 == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 155, __pyx_L1_error)
      }

      /* "oasis.pyx":156
 *             while (self.i > 0 and  # backtrack until violations fixed
 *                    (self.P[self.i - 1].v / self.P[self.i - 1].w * self.g**self.P[self.i - 1].l +
 *                     self.s_min > self.P[self.i].v / self.P[self.i].w)):             # <<<<<<<<<<<<<<
 *                 self.i -= 1
 *                 # merge two pools
 */
      __pyx_t_10 = (__pyx_v_self->P[__pyx_v_self->i]).v;
      __pyx_t_11 = (__pyx_v_self->P[__pyx_v_self->i]).w;
      if (unlikely(__pyx_t_11 == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 156, __pyx_L1_error)
      }
      __pyx_t_8 = (((((__pyx_t_5 / __pyx_t_9) * powf(__pyx_v_self->g, ((__pyx_t_5oasis_SINGLE)(__pyx_v_self->P[(__pyx_v_self->i - 1)]).l))) + __pyx_v_self->s_min) > (__pyx_t_10 / __pyx_t_11)) != 0);
      __pyx_t_1 = __pyx_t_8;
      __pyx_L6_bool_binop_done:;
      if (!__pyx_t_1) break;

      /* "oasis.pyx":157
 *                    (self.P[self.i - 1].v / self.P[self.i - 1].w * self.g**self.P[self.i - 1].l +
 *                     self.s_min > self.P[self.i].v / self.P[self.i].w)):
 *                 self.i -= 1             # <<<<<<<<<<<<<<
 *                 # merge two pools
 *                 self.P[self.i].v += self.P[self.i + 1].v * self.g**self.P[self.i].l
 */
      __pyx_v_self->i = (__pyx_v_self->i - 1);

      /* "oasis.pyx":159
 *                 self.i -= 1
 *                 # merge two pools
 *                 self.P[self.i].v += self.P[self.i + 1].v * self.g**self.P[self.i].l             # <<<<<<<<<<<<<<
 *                 self.P[self.i].w += self.P[self.i + 1].w * self.g**(2 * self.P[self.i].l)
 *                 self.P[self.i].l += self.P[self.i + 1].l
 */
      __pyx_t_7 = __pyx_v_self->i;
      (__pyx_v_self->P[__pyx_t_7]).v = ((__pyx_v_self->P[__pyx_t_7]).v + ((__pyx_v_self->P[(__pyx_v_self->i + 1)]).v * powf(__pyx_v_self->g, ((__pyx_t_5oasis_SINGLE)(__pyx_v_self->P[__pyx_v_self->i]).l))));

      /* "oasis.pyx":160
 *                 # merge two pools
 *                 self.P[self.i].v += self.P[self.i + 1].v * self.g**self.P[self.i].l
 *                 self.P[self.i].w += self.P[self.i + 1].w * self.g**(2 * self.P[self.i].l)             # <<<<<<<<<<<<<<
 *                 self.P[self.i].l += self.P[self.i + 1].l
 *                 self.P.pop_back()
 */
      __pyx_t_7 = __pyx_v_self->i;
      (__pyx_v_self->P[__pyx_t_7]).w = ((__pyx_v_self->P[__pyx_t_7]).w + ((__pyx_v_self->P[(__pyx_v_self->i + 1)]).w * powf(__pyx_v_self->g, ((__pyx_t_5oasis_SINGLE)(2 * (__pyx_v_self->P[__pyx_v_self->i]).l)))));

      /* "oasis.pyx":161
 *                 self.P[self.i].v += self.P[self.i + 1].v * self.g**self.P[self.i].l
 *                 self.P[self.i].w += self.P[self.i + 1].w * self.g**(2 * self.P[self.i].l)
 *                 self.P[self.i].l += self.P[self.i + 1].l             # <<<<<<<<<<<<<<
 *                 self.P.pop_back()
 *         else:  # AR(2)
 */
      __pyx_t_7 = __pyx_v_self->i;
      (__pyx_v_self->P[__pyx_t_7]).l = ((__pyx_v_self->P[__pyx_t_7]).l + (__pyx_v_self->P[(__pyx_v_self->i + 1)]).l);

      /* "oasis.pyx":162
 *                 self.P[self.i].w += self.P[self.i + 1].w * self.g**(2 * self.P[self.i].l)
 *                 self.P[self.i].l += self.P[self.i + 1].l
 *                 self.P.pop_back()             # <<<<<<<<<<<<<<
 *         else:  # AR(2)
 *             self._y.push_back(yt - self.b - self.lam * (1 - self.g - self.g2))
 */
      __pyx_v_self->P.pop_back();
    }

    /* "oasis.pyx":148
 *         cdef np.ndarray[SINGLE, ndim = 1] h, g12, g11g11, g11g12
 *         cdef SINGLE tmp
 *         if self.g2 == 0:  # AR(1)             # <<<<<<<<<<<<<<
 *             newpool.v = yt - self.b - self.lam * (1 - self.g)
 *             newpool.w, newpool.t, newpool.l = 1, self.t, 1
 */
    goto __pyx_L3;
  }

  /* "oasis.pyx":164
 *                 self.P.pop_back()
 *         else:  # AR(2)
 *             self._y.push_back(yt - self.b - self.lam * (1 - self.g - self.g2))             # <<<<<<<<<<<<<<
 *             newpool.v = fmax(0, self._y[self.t])
 *             newpool.w, newpool.t, newpool.l = newpool.v, self.t, 1
 */
  /*else*/ {
    __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->b); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 164, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = PyNumber_Subtract(__pyx_v_yt, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 164, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyFloat_FromDouble((__pyx_v_self->lam * ((1.0 - __pyx_v_self->g) - __pyx_v_self->g2))); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 164, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyNumber_Subtract(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 164, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_11 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_11 == (npy_float32)-1) && PyErr_Occurred())) __PYX_ERR(0, 164, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    try {
      __pyx_v_self->_y.push_back(__pyx_t_11);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 164, __pyx_L1_error)
    }

    /* "oasis.pyx":165
 *         else:  # AR(2)
 *             self._y.push_back(yt - self.b - self.lam * (1 - self.g - self.g2))
 *             newpool.v = fmax(0, self._y[self.t])             # <<<<<<<<<<<<<<
 *             newpool.w, newpool.t, newpool.l = newpool.v, self.t, 1
 *             self.P.push_back(newpool)
 */
    __pyx_v_newpool.v = fmax(0.0, (__pyx_v_self->_y[__pyx_v_self->t]));

    /* "oasis.pyx":166
 *             self._y.push_back(yt - self.b - self.lam * (1 - self.g - self.g2))
 *             newpool.v = fmax(0, self._y[self.t])
 *             newpool.w, newpool.t, newpool.l = newpool.v, self.t, 1             # <<<<<<<<<<<<<<
 *             self.P.push_back(newpool)
 *             self.t += 1
 */
    __pyx_t_11 = __pyx_v_newpool.v;
    __pyx_t_6 = __pyx_v_self->t;
    __pyx_t_7 = 1;
    __pyx_v_newpool.w = __pyx_t_11;
    __pyx_v_newpool.t = __pyx_t_6;
    __pyx_v_newpool.l = __pyx_t_7;

    /* "oasis.pyx":167
 *             newpool.v = fmax(0, self._y[self.t])
 *             newpool.w, newpool.t, newpool.l = newpool.v, self.t, 1
 *             self.P.push_back(newpool)             # <<<<<<<<<<<<<<
 *             self.t += 1
 *             self.i += 1
 */
    try {
      __pyx_v_self->P.push_back(__pyx_v_newpool);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 167, __pyx_L1_error)
    }

    /* "oasis.pyx":168
 *             newpool.w, newpool.t, newpool.l = newpool.v, self.t, 1
 *             self.P.push_back(newpool)
 *             self.t += 1             # <<<<<<<<<<<<<<
 *             self.i += 1
 *             while (self.i > 0 and  # backtrack until violations fixed
 */
    __pyx_v_self->t = (__pyx_v_self->t + 1);

    /* "oasis.pyx":169
 *             self.P.push_back(newpool)
 *             self.t += 1
 *             self.i += 1             # <<<<<<<<<<<<<<
 *             while (self.i > 0 and  # backtrack until violations fixed
 *                    ((((self.P[self.i - 1].v * self.d**(self.P[self.i - 1].l + 1) /
 */
    __pyx_v_self->i = (__pyx_v_self->i + 1);

    /* "oasis.pyx":170
 *             self.t += 1
 *             self.i += 1
 *             while (self.i > 0 and  # backtrack until violations fixed             # <<<<<<<<<<<<<<
 *                    ((((self.P[self.i - 1].v * self.d**(self.P[self.i - 1].l + 1) /
 *                        (self.d - self.r)) if self.P[self.i - 1].l >= 1000 else
 */
    while (1) {
      __pyx_t_8 = ((__pyx_v_self->i > 0) != 0);
      if (__pyx_t_8) {
      } else {
        __pyx_t_1 = __pyx_t_8;
        goto __pyx_L10_bool_binop_done;
      }

      /* "oasis.pyx":176
 *                         self.g12[self.P[self.i - 1].l] * self.P[self.i - 2].w)) >
 *                        self.P[self.i].v - self.s_min)
 *                     if self.i > 1 else             # <<<<<<<<<<<<<<
 *                     (self.P[self.i - 1].w * self.d > self.P[self.i].v - self.s_min))):
 *                 self.i -= 1
 */
      if (((__pyx_v_self->i > 1) != 0)) {

        /* "oasis.pyx":172
 *             while (self.i > 0 and  # backtrack until violations fixed
 *                    ((((self.P[self.i - 1].v * self.d**(self.P[self.i - 1].l + 1) /
 *                        (self.d - self.r)) if self.P[self.i - 1].l >= 1000 else             # <<<<<<<<<<<<<<
 *                        (self.h[self.P[self.i - 1].l] * self.P[self.i - 1].v +
 *                         self.g12[self.P[self.i - 1].l] * self.P[self.i - 2].w)) >
 */
        if ((((__pyx_v_self->P[(__pyx_v_self->i - 1)]).l >= 0x3E8) != 0)) {

          /* "oasis.pyx":171
 *             self.i += 1
 *             while (self.i > 0 and  # backtrack until violations fixed
 *                    ((((self.P[self.i - 1].v * self.d**(self.P[self.i - 1].l + 1) /             # <<<<<<<<<<<<<<
 *                        (self.d - self.r)) if self.P[self.i - 1].l >= 1000 else
 *                        (self.h[self.P[self.i - 1].l] * self.P[self.i - 1].v +
 */
          __pyx_t_10 = ((__pyx_v_self->P[(__pyx_v_self->i - 1)]).v * powf(__pyx_v_self->d, ((__pyx_t_5oasis_SINGLE)((__pyx_v_self->P[(__pyx_v_self->i - 1)]).l + 1))));

          /* "oasis.pyx":172
 *             while (self.i > 0 and  # backtrack until violations fixed
 *                    ((((self.P[self.i - 1].v * self.d**(self.P[self.i - 1].l + 1) /
 *                        (self.d - self.r)) if self.P[self.i - 1].l >= 1000 else             # <<<<<<<<<<<<<<
 *                        (self.h[self.P[self.i - 1].l] * self.P[self.i - 1].v +
 *                         self.g12[self.P[self.i - 1].l] * self.P[self.i - 2].w)) >
 */
          __pyx_t_9 = (__pyx_v_self->d - __pyx_v_self->r);

          /* "oasis.pyx":171
 *             self.i += 1
 *             while (self.i > 0 and  # backtrack until violations fixed
 *                    ((((self.P[self.i - 1].v * self.d**(self.P[self.i - 1].l + 1) /             # <<<<<<<<<<<<<<
 *                        (self.d - self.r)) if self.P[self.i - 1].l >= 1000 else
 *                        (self.h[self.P[self.i - 1].l] * self.P[self.i - 1].v +
 */
          if (unlikely(__pyx_t_9 == 0)) {
            PyErr_SetString(PyExc_ZeroDivisionError, "float division");
            __PYX_ERR(0, 171, __pyx_L1_error)
          }
          __pyx_t_11 = (__pyx_t_10 / __pyx_t_9);
        } else {

          /* "oasis.pyx":173
 *                    ((((self.P[self.i - 1].v * self.d**(self.P[self.i - 1].l + 1) /
 *                        (self.d - self.r)) if self.P[self.i - 1].l >= 1000 else
 *                        (self.h[self.P[self.i - 1].l] * self.P[self.i - 1].v +             # <<<<<<<<<<<<<<
 *                         self.g12[self.P[self.i - 1].l] * self.P[self.i - 2].w)) >
 *                        self.P[self.i].v - self.s_min)
 */
          __pyx_t_11 = (((__pyx_v_self->h[(__pyx_v_self->P[(__pyx_v_self->i - 1)]).l]) * (__pyx_v_self->P[(__pyx_v_self->i - 1)]).v) + ((__pyx_v_self->g12[(__pyx_v_self->P[(__pyx_v_self->i - 1)]).l]) * (__pyx_v_self->P[(__pyx_v_self->i - 2)]).w));
        }

        /* "oasis.pyx":175
 *                        (self.h[self.P[self.i - 1].l] * self.P[self.i - 1].v +
 *                         self.g12[self.P[self.i - 1].l] * self.P[self.i - 2].w)) >
 *                        self.P[self.i].v - self.s_min)             # <<<<<<<<<<<<<<
 *                     if self.i > 1 else
 *                     (self.P[self.i - 1].w * self.d > self.P[self.i].v - self.s_min))):
 */
        __pyx_t_8 = (__pyx_t_11 > ((__pyx_v_self->P[__pyx_v_self->i]).v - __pyx_v_self->s_min));
      } else {

        /* "oasis.pyx":177
 *                        self.P[self.i].v - self.s_min)
 *                     if self.i > 1 else
 *                     (self.P[self.i - 1].w * self.d > self.P[self.i].v - self.s_min))):             # <<<<<<<<<<<<<<
 *                 self.i -= 1
 *                 # merge two pools
 */
        __pyx_t_8 = (((__pyx_v_self->P[(__pyx_v_self->i - 1)]).w * __pyx_v_self->d) > ((__pyx_v_self->P[__pyx_v_self->i]).v - __pyx_v_self->s_min));
      }

      /* "oasis.pyx":171
 *             self.i += 1
 *             while (self.i > 0 and  # backtrack until violations fixed
 *                    ((((self.P[self.i - 1].v * self.d**(self.P[self.i - 1].l + 1) /             # <<<<<<<<<<<<<<
 *                        (self.d - self.r)) if self.P[self.i - 1].l >= 1000 else
 *                        (self.h[self.P[self.i - 1].l] * self.P[self.i - 1].v +
 */
      __pyx_t_12 = (__pyx_t_8 != 0);
      __pyx_t_1 = __pyx_t_12;
      __pyx_L10_bool_binop_done:;
      if (!__pyx_t_1) break;

      /* "oasis.pyx":178
 *                     if self.i > 1 else
 *                     (self.P[self.i - 1].w * self.d > self.P[self.i].v - self.s_min))):
 *                 self.i -= 1             # <<<<<<<<<<<<<<
 *                 # merge two pools
 *                 self.P[self.i].l += self.P[self.i + 1].l
 */
      __pyx_v_self->i = (__pyx_v_self->i - 1);

      /* "oasis.pyx":180
 *                 self.i -= 1
 *                 # merge two pools
 *                 self.P[self.i].l += self.P[self.i + 1].l             # <<<<<<<<<<<<<<
 *                 k = self.P[self.i].l - 1
 *                 if self.i > 0:
 */
      __pyx_t_7 = __pyx_v_self->i;
      (__pyx_v_self->P[__pyx_t_7]).l = ((__pyx_v_self->P[__pyx_t_7]).l + (__pyx_v_self->P[(__pyx_v_self->i + 1)]).l);

      /* "oasis.pyx":181
 *                 # merge two pools
 *                 self.P[self.i].l += self.P[self.i + 1].l
 *                 k = self.P[self.i].l - 1             # <<<<<<<<<<<<<<
 *                 if self.i > 0:
 *                     if k >= 1000:
 */
      __pyx_v_k = ((__pyx_v_self->P[__pyx_v_self->i]).l - 1);

      /* "oasis.pyx":182
 *                 self.P[self.i].l += self.P[self.i + 1].l
 *                 k = self.P[self.i].l - 1
 *                 if self.i > 0:             # <<<<<<<<<<<<<<
 *                     if k >= 1000:
 *                         k = 999  # precomputed kernel shorter than ISI -> simply truncate
 */
      __pyx_t_1 = ((__pyx_v_self->i > 0) != 0);
      if (__pyx_t_1) {

        /* "oasis.pyx":183
 *                 k = self.P[self.i].l - 1
 *                 if self.i > 0:
 *                     if k >= 1000:             # <<<<<<<<<<<<<<
 *                         k = 999  # precomputed kernel shorter than ISI -> simply truncate
 *                     tmp = 0
 */
        __pyx_t_1 = ((__pyx_v_k >= 0x3E8) != 0);
        if (__pyx_t_1) {

          /* "oasis.pyx":184
 *                 if self.i > 0:
 *                     if k >= 1000:
 *                         k = 999  # precomputed kernel shorter than ISI -> simply truncate             # <<<<<<<<<<<<<<
 *                     tmp = 0
 *                     for j in range(min1000(self.P[self.i].l)):
 */
          __pyx_v_k = 0x3E7;

          /* "oasis.pyx":183
 *                 k = self.P[self.i].l - 1
 *                 if self.i > 0:
 *                     if k >= 1000:             # <<<<<<<<<<<<<<
 *                         k = 999  # precomputed kernel shorter than ISI -> simply truncate
 *                     tmp = 0
 */
        }

        /* "oasis.pyx":185
 *                     if k >= 1000:
 *                         k = 999  # precomputed kernel shorter than ISI -> simply truncate
 *                     tmp = 0             # <<<<<<<<<<<<<<
 *                     for j in range(min1000(self.P[self.i].l)):
 *                         tmp += self.h[j] * self._y[self.P[self.i].t + j]
 */
        __pyx_v_tmp = 0.0;

        /* "oasis.pyx":186
 *                         k = 999  # precomputed kernel shorter than ISI -> simply truncate
 *                     tmp = 0
 *                     for j in range(min1000(self.P[self.i].l)):             # <<<<<<<<<<<<<<
 *                         tmp += self.h[j] * self._y[self.P[self.i].t + j]
 *                     self.P[self.i].v = ((tmp - self.g11g12[k] * self.P[self.i - 1].w) /
 */
        __pyx_t_3 = PyInt_FromSsize_t((__pyx_v_self->P[__pyx_v_self->i]).l); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 186, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = __pyx_f_5oasis_min1000(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 186, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_13 = __Pyx_PyInt_As_long(__pyx_t_4); if (unlikely((__pyx_t_13 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 186, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_13; __pyx_t_7+=1) {
          __pyx_v_j = __pyx_t_7;

          /* "oasis.pyx":187
 *                     tmp = 0
 *                     for j in range(min1000(self.P[self.i].l)):
 *                         tmp += self.h[j] * self._y[self.P[self.i].t + j]             # <<<<<<<<<<<<<<
 *                     self.P[self.i].v = ((tmp - self.g11g12[k] * self.P[self.i - 1].w) /
 *                                         self.g11g11[k])
 */
          __pyx_v_tmp = (__pyx_v_tmp + ((__pyx_v_self->h[__pyx_v_j]) * (__pyx_v_self->_y[((__pyx_v_self->P[__pyx_v_self->i]).t + __pyx_v_j)])));
        }

        /* "oasis.pyx":188
 *                     for j in range(min1000(self.P[self.i].l)):
 *                         tmp += self.h[j] * self._y[self.P[self.i].t + j]
 *                     self.P[self.i].v = ((tmp - self.g11g12[k] * self.P[self.i - 1].w) /             # <<<<<<<<<<<<<<
 *                                         self.g11g11[k])
 *                     self.P[self.i].w = (self.h[k] * self.P[self.i].v +
 */
        __pyx_t_11 = (__pyx_v_tmp - ((__pyx_v_self->g11g12[__pyx_v_k]) * (__pyx_v_self->P[(__pyx_v_self->i - 1)]).w));

        /* "oasis.pyx":189
 *                         tmp += self.h[j] * self._y[self.P[self.i].t + j]
 *                     self.P[self.i].v = ((tmp - self.g11g12[k] * self.P[self.i - 1].w) /
 *                                         self.g11g11[k])             # <<<<<<<<<<<<<<
 *                     self.P[self.i].w = (self.h[k] * self.P[self.i].v +
 *                                         self.g12[k] * self.P[self.i - 1].w)
 */
        if (unlikely((__pyx_v_self->g11g11[__pyx_v_k]) == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 188, __pyx_L1_error)
        }

        /* "oasis.pyx":188
 *                     for j in range(min1000(self.P[self.i].l)):
 *                         tmp += self.h[j] * self._y[self.P[self.i].t + j]
 *                     self.P[self.i].v = ((tmp - self.g11g12[k] * self.P[self.i - 1].w) /             # <<<<<<<<<<<<<<
 *                                         self.g11g11[k])
 *                     self.P[self.i].w = (self.h[k] * self.P[self.i].v +
 */
        (__pyx_v_self->P[__pyx_v_self->i]).v = (__pyx_t_11 / (__pyx_v_self->g11g11[__pyx_v_k]));

        /* "oasis.pyx":190
 *                     self.P[self.i].v = ((tmp - self.g11g12[k] * self.P[self.i - 1].w) /
 *                                         self.g11g11[k])
 *                     self.P[self.i].w = (self.h[k] * self.P[self.i].v +             # <<<<<<<<<<<<<<
 *                                         self.g12[k] * self.P[self.i - 1].w)
 *                 else:  # update first pool
 */
        (__pyx_v_self->P[__pyx_v_self->i]).w = (((__pyx_v_self->h[__pyx_v_k]) * (__pyx_v_self->P[__pyx_v_self->i]).v) + ((__pyx_v_self->g12[__pyx_v_k]) * (__pyx_v_self->P[(__pyx_v_self->i - 1)]).w));

        /* "oasis.pyx":182
 *                 self.P[self.i].l += self.P[self.i + 1].l
 *                 k = self.P[self.i].l - 1
 *                 if self.i > 0:             # <<<<<<<<<<<<<<
 *                     if k >= 1000:
 *                         k = 999  # precomputed kernel shorter than ISI -> simply truncate
 */
        goto __pyx_L12;
      }

      /* "oasis.pyx":193
 *                                         self.g12[k] * self.P[self.i - 1].w)
 *                 else:  # update first pool
 *                     tmp = 0             # <<<<<<<<<<<<<<
 *                     for j in range(self.P[self.i].l):
 *                         tmp += self.d**j * self._y[j]
 */
      /*else*/ {
        __pyx_v_tmp = 0.0;

        /* "oasis.pyx":194
 *                 else:  # update first pool
 *                     tmp = 0
 *                     for j in range(self.P[self.i].l):             # <<<<<<<<<<<<<<
 *                         tmp += self.d**j * self._y[j]
 *                     self.P[self.i].v = fmax(0, tmp * (1 - self.d * self.d) /
 */
        __pyx_t_7 = (__pyx_v_self->P[__pyx_v_self->i]).l;
        for (__pyx_t_14 = 0; __pyx_t_14 < __pyx_t_7; __pyx_t_14+=1) {
          __pyx_v_j = __pyx_t_14;

          /* "oasis.pyx":195
 *                     tmp = 0
 *                     for j in range(self.P[self.i].l):
 *                         tmp += self.d**j * self._y[j]             # <<<<<<<<<<<<<<
 *                     self.P[self.i].v = fmax(0, tmp * (1 - self.d * self.d) /
 *                                             (1 - self.d**(2 * self.P[self.i].l)))
 */
          __pyx_v_tmp = (__pyx_v_tmp + (powf(__pyx_v_self->d, ((__pyx_t_5oasis_SINGLE)__pyx_v_j)) * (__pyx_v_self->_y[__pyx_v_j])));
        }

        /* "oasis.pyx":196
 *                     for j in range(self.P[self.i].l):
 *                         tmp += self.d**j * self._y[j]
 *                     self.P[self.i].v = fmax(0, tmp * (1 - self.d * self.d) /             # <<<<<<<<<<<<<<
 *                                             (1 - self.d**(2 * self.P[self.i].l)))
 *                     self.P[self.i].w = self.d**k * self.P[self.i].v
 */
        __pyx_t_11 = (__pyx_v_tmp * (1.0 - (__pyx_v_self->d * __pyx_v_self->d)));

        /* "oasis.pyx":197
 *                         tmp += self.d**j * self._y[j]
 *                     self.P[self.i].v = fmax(0, tmp * (1 - self.d * self.d) /
 *                                             (1 - self.d**(2 * self.P[self.i].l)))             # <<<<<<<<<<<<<<
 *                     self.P[self.i].w = self.d**k * self.P[self.i].v
 *                 self.P.pop_back()
 */
        __pyx_t_9 = (1.0 - powf(__pyx_v_self->d, ((__pyx_t_5oasis_SINGLE)(2 * (__pyx_v_self->P[__pyx_v_self->i]).l))));

        /* "oasis.pyx":196
 *                     for j in range(self.P[self.i].l):
 *                         tmp += self.d**j * self._y[j]
 *                     self.P[self.i].v = fmax(0, tmp * (1 - self.d * self.d) /             # <<<<<<<<<<<<<<
 *                                             (1 - self.d**(2 * self.P[self.i].l)))
 *                     self.P[self.i].w = self.d**k * self.P[self.i].v
 */
        if (unlikely(__pyx_t_9 == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 196, __pyx_L1_error)
        }
        (__pyx_v_self->P[__pyx_v_self->i]).v = fmax(0.0, (__pyx_t_11 / __pyx_t_9));

        /* "oasis.pyx":198
 *                     self.P[self.i].v = fmax(0, tmp * (1 - self.d * self.d) /
 *                                             (1 - self.d**(2 * self.P[self.i].l)))
 *                     self.P[self.i].w = self.d**k * self.P[self.i].v             # <<<<<<<<<<<<<<
 *                 self.P.pop_back()
 * 
 */
        (__pyx_v_self->P[__pyx_v_self->i]).w = (powf(__pyx_v_self->d, ((__pyx_t_5oasis_SINGLE)__pyx_v_k)) * (__pyx_v_self->P[__pyx_v_self->i]).v);
      }
      __pyx_L12:;

      /* "oasis.pyx":199
 *                                             (1 - self.d**(2 * self.P[self.i].l)))
 *                     self.P[self.i].w = self.d**k * self.P[self.i].v
 *                 self.P.pop_back()             # <<<<<<<<<<<<<<
 * 
 *     def fit_next_tmp(self, yt, num):
 */
      __pyx_v_self->P.pop_back();
    }
  }
  __pyx_L3:;

  /* "oasis.pyx":140
 *             self._y = [0] * num_empty_samples
 * 
 *     def fit_next(self, yt):             # <<<<<<<<<<<<<<
 *         """
 *         fit next time step t
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("oasis.OASIS.fit_next", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "oasis.pyx":201
 *                 self.P.pop_back()
 * 
 *     def fit_next_tmp(self, yt, num):             # <<<<<<<<<<<<<<
 *         """
 *         fit next time step t temporarily and return denoised calcium for last num time steps
 */

/* Python wrapper */
static PyObject *__pyx_pw_5oasis_5OASIS_5fit_next_tmp(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5oasis_5OASIS_4fit_next_tmp[] = "\n        fit next time step t temporarily and return denoised calcium for last num time steps\n        ";
static PyObject *__pyx_pw_5oasis_5OASIS_5fit_next_tmp(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_yt = 0;
  PyObject *__pyx_v_num = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fit_next_tmp (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_yt,&__pyx_n_s_num,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_yt)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_num)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("fit_next_tmp", 1, 2, 2, 1); __PYX_ERR(0, 201, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "fit_next_tmp") < 0)) __PYX_ERR(0, 201, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_yt = values[0];
    __pyx_v_num = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("fit_next_tmp", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 201, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("oasis.OASIS.fit_next_tmp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5oasis_5OASIS_4fit_next_tmp(((struct __pyx_obj_5oasis_OASIS *)__pyx_v_self), __pyx_v_yt, __pyx_v_num);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5oasis_5OASIS_4fit_next_tmp(struct __pyx_obj_5oasis_OASIS *__pyx_v_self, PyObject *__pyx_v_yt, PyObject *__pyx_v_num) {
  struct __pyx_t_5oasis_Pool __pyx_v_newpool;
  PyArrayObject *__pyx_v_c = 0;
  Py_ssize_t __pyx_v_t;
  Py_ssize_t __pyx_v_j;
  Py_ssize_t __pyx_v_k;
  Py_ssize_t __pyx_v_tmp2;
  __pyx_t_5oasis_SINGLE __pyx_v_tmp;
  __pyx_t_5oasis_SINGLE __pyx_v__yt;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_c;
  __Pyx_Buffer __pyx_pybuffer_c;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __pyx_t_5oasis_SINGLE __pyx_t_5;
  unsigned int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  int __pyx_t_8;
  __pyx_t_5oasis_SINGLE __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyArrayObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  double __pyx_t_16;
  Py_ssize_t __pyx_t_17;
  Py_ssize_t __pyx_t_18;
  Py_ssize_t __pyx_t_19;
  Py_ssize_t __pyx_t_20;
  Py_ssize_t __pyx_t_21;
  __pyx_t_5oasis_SINGLE __pyx_t_22;
  int __pyx_t_23;
  Py_ssize_t __pyx_t_24;
  Py_ssize_t __pyx_t_25;
  Py_ssize_t __pyx_t_26;
  Py_ssize_t __pyx_t_27;
  Py_ssize_t __pyx_t_28;
  Py_ssize_t __pyx_t_29;
  Py_ssize_t __pyx_t_30;
  Py_ssize_t __pyx_t_31;
  Py_ssize_t __pyx_t_32;
  Py_ssize_t __pyx_t_33;
  __Pyx_RefNannySetupContext("fit_next_tmp", 0);
  __pyx_pybuffer_c.pybuffer.buf = NULL;
  __pyx_pybuffer_c.refcount = 0;
  __pyx_pybuffernd_c.data = NULL;
  __pyx_pybuffernd_c.rcbuffer = &__pyx_pybuffer_c;

  /* "oasis.pyx":209
 *         cdef Py_ssize_t t, j, k, tmp2
 *         cdef SINGLE tmp, _yt
 *         if self.g2 == 0:  # AR(1)             # <<<<<<<<<<<<<<
 *             newpool.v = yt - self.b - self.lam * (1 - self.g)
 *             newpool.w, newpool.t, newpool.l = 1, self.t, 1
 */
  __pyx_t_1 = ((__pyx_v_self->g2 == 0.0) != 0);
  if (__pyx_t_1) {

    /* "oasis.pyx":210
 *         cdef SINGLE tmp, _yt
 *         if self.g2 == 0:  # AR(1)
 *             newpool.v = yt - self.b - self.lam * (1 - self.g)             # <<<<<<<<<<<<<<
 *             newpool.w, newpool.t, newpool.l = 1, self.t, 1
 *             j = self.i
 */
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->b); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 210, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_Subtract(__pyx_v_yt, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 210, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyFloat_FromDouble((__pyx_v_self->lam * (1.0 - __pyx_v_self->g))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 210, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PyNumber_Subtract(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 210, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_5 = __pyx_PyFloat_AsFloat(__pyx_t_4); if (unlikely((__pyx_t_5 == (npy_float32)-1) && PyErr_Occurred())) __PYX_ERR(0, 210, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_newpool.v = __pyx_t_5;

    /* "oasis.pyx":211
 *         if self.g2 == 0:  # AR(1)
 *             newpool.v = yt - self.b - self.lam * (1 - self.g)
 *             newpool.w, newpool.t, newpool.l = 1, self.t, 1             # <<<<<<<<<<<<<<
 *             j = self.i
 *             while (j >= 0 and  # backtrack until violations fixed
 */
    __pyx_t_5 = 1.0;
    __pyx_t_6 = __pyx_v_self->t;
    __pyx_t_7 = 1;
    __pyx_v_newpool.w = __pyx_t_5;
    __pyx_v_newpool.t = __pyx_t_6;
    __pyx_v_newpool.l = __pyx_t_7;

    /* "oasis.pyx":212
 *             newpool.v = yt - self.b - self.lam * (1 - self.g)
 *             newpool.w, newpool.t, newpool.l = 1, self.t, 1
 *             j = self.i             # <<<<<<<<<<<<<<
 *             while (j >= 0 and  # backtrack until violations fixed
 *                    (self.P[j].v / self.P[j].w * self.g**self.P[j].l + self.s_min >
 */
    __pyx_t_7 = __pyx_v_self->i;
    __pyx_v_j = __pyx_t_7;

    /* "oasis.pyx":213
 *             newpool.w, newpool.t, newpool.l = 1, self.t, 1
 *             j = self.i
 *             while (j >= 0 and  # backtrack until violations fixed             # <<<<<<<<<<<<<<
 *                    (self.P[j].v / self.P[j].w * self.g**self.P[j].l + self.s_min >
 *                     newpool.v / newpool.w)):
 */
    while (1) {
      __pyx_t_8 = ((__pyx_v_j >= 0) != 0);
      if (__pyx_t_8) {
      } else {
        __pyx_t_1 = __pyx_t_8;
        goto __pyx_L6_bool_binop_done;
      }

      /* "oasis.pyx":214
 *             j = self.i
 *             while (j >= 0 and  # backtrack until violations fixed
 *                    (self.P[j].v / self.P[j].w * self.g**self.P[j].l + self.s_min >             # <<<<<<<<<<<<<<
 *                     newpool.v / newpool.w)):
 *                 # merge two pools
 */
      __pyx_t_5 = (__pyx_v_self->P[__pyx_v_j]).v;
      __pyx_t_9 = (__pyx_v_self->P[__pyx_v_j]).w;
      if (unlikely(__pyx_t_9 == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 214, __pyx_L1_error)
      }

      /* "oasis.pyx":215
 *             while (j >= 0 and  # backtrack until violations fixed
 *                    (self.P[j].v / self.P[j].w * self.g**self.P[j].l + self.s_min >
 *                     newpool.v / newpool.w)):             # <<<<<<<<<<<<<<
 *                 # merge two pools
 *                 newpool.v = self.P[j].v + newpool.v * self.g**self.P[j].l
 */
      if (unlikely(__pyx_v_newpool.w == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 215, __pyx_L1_error)
      }

      /* "oasis.pyx":214
 *             j = self.i
 *             while (j >= 0 and  # backtrack until violations fixed
 *                    (self.P[j].v / self.P[j].w * self.g**self.P[j].l + self.s_min >             # <<<<<<<<<<<<<<
 *                     newpool.v / newpool.w)):
 *                 # merge two pools
 */
      __pyx_t_8 = (((((__pyx_t_5 / __pyx_t_9) * powf(__pyx_v_self->g, ((__pyx_t_5oasis_SINGLE)(__pyx_v_self->P[__pyx_v_j]).l))) + __pyx_v_self->s_min) > (__pyx_v_newpool.v / __pyx_v_newpool.w)) != 0);
      __pyx_t_1 = __pyx_t_8;
      __pyx_L6_bool_binop_done:;
      if (!__pyx_t_1) break;

      /* "oasis.pyx":217
 *                     newpool.v / newpool.w)):
 *                 # merge two pools
 *                 newpool.v = self.P[j].v + newpool.v * self.g**self.P[j].l             # <<<<<<<<<<<<<<
 *                 newpool.w = self.P[j].w + newpool.w * self.g**(2 * self.P[j].l)
 *                 newpool.t = self.P[j].t
 */
      __pyx_v_newpool.v = ((__pyx_v_self->P[__pyx_v_j]).v + (__pyx_v_newpool.v * powf(__pyx_v_self->g, ((__pyx_t_5oasis_SINGLE)(__pyx_v_self->P[__pyx_v_j]).l))));

      /* "oasis.pyx":218
 *                 # merge two pools
 *                 newpool.v = self.P[j].v + newpool.v * self.g**self.P[j].l
 *                 newpool.w = self.P[j].w + newpool.w * self.g**(2 * self.P[j].l)             # <<<<<<<<<<<<<<
 *                 newpool.t = self.P[j].t
 *                 newpool.l = self.P[j].l + newpool.l
 */
      __pyx_v_newpool.w = ((__pyx_v_self->P[__pyx_v_j]).w + (__pyx_v_newpool.w * powf(__pyx_v_self->g, ((__pyx_t_5oasis_SINGLE)(2 * (__pyx_v_self->P[__pyx_v_j]).l)))));

      /* "oasis.pyx":219
 *                 newpool.v = self.P[j].v + newpool.v * self.g**self.P[j].l
 *                 newpool.w = self.P[j].w + newpool.w * self.g**(2 * self.P[j].l)
 *                 newpool.t = self.P[j].t             # <<<<<<<<<<<<<<
 *                 newpool.l = self.P[j].l + newpool.l
 *                 j -= 1
 */
      __pyx_t_7 = (__pyx_v_self->P[__pyx_v_j]).t;
      __pyx_v_newpool.t = __pyx_t_7;

      /* "oasis.pyx":220
 *                 newpool.w = self.P[j].w + newpool.w * self.g**(2 * self.P[j].l)
 *                 newpool.t = self.P[j].t
 *                 newpool.l = self.P[j].l + newpool.l             # <<<<<<<<<<<<<<
 *                 j -= 1
 *             # return deconvolved activity for last num time steps
 */
      __pyx_v_newpool.l = ((__pyx_v_self->P[__pyx_v_j]).l + __pyx_v_newpool.l);

      /* "oasis.pyx":221
 *                 newpool.t = self.P[j].t
 *                 newpool.l = self.P[j].l + newpool.l
 *                 j -= 1             # <<<<<<<<<<<<<<
 *             # return deconvolved activity for last num time steps
 *             c = np.zeros(num, dtype='float32')
 */
      __pyx_v_j = (__pyx_v_j - 1);
    }

    /* "oasis.pyx":223
 *                 j -= 1
 *             # return deconvolved activity for last num time steps
 *             c = np.zeros(num, dtype='float32')             # <<<<<<<<<<<<<<
 *             t = num
 *             tmp = fmax(newpool.v, 0) / newpool.w
 */
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 223, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 223, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 223, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v_num);
    __Pyx_GIVEREF(__pyx_v_num);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_num);
    __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 223, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_n_s_float32) < 0) __PYX_ERR(0, 223, __pyx_L1_error)
    __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 223, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (!(likely(((__pyx_t_10) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_10, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 223, __pyx_L1_error)
    __pyx_t_11 = ((PyArrayObject *)__pyx_t_10);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_c.rcbuffer->pybuffer);
      __pyx_t_12 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_t_11, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack);
      if (unlikely(__pyx_t_12 < 0)) {
        PyErr_Fetch(&__pyx_t_13, &__pyx_t_14, &__pyx_t_15);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_v_c, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_13); Py_XDECREF(__pyx_t_14); Py_XDECREF(__pyx_t_15);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_13, __pyx_t_14, __pyx_t_15);
        }
      }
      __pyx_pybuffernd_c.diminfo[0].strides = __pyx_pybuffernd_c.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_c.diminfo[0].shape = __pyx_pybuffernd_c.rcbuffer->pybuffer.shape[0];
      if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(0, 223, __pyx_L1_error)
    }
    __pyx_t_11 = 0;
    __pyx_v_c = ((PyArrayObject *)__pyx_t_10);
    __pyx_t_10 = 0;

    /* "oasis.pyx":224
 *             # return deconvolved activity for last num time steps
 *             c = np.zeros(num, dtype='float32')
 *             t = num             # <<<<<<<<<<<<<<
 *             tmp = fmax(newpool.v, 0) / newpool.w
 *             if newpool.l <= t:  # safely assume t<=num=buffer<1000
 */
    __pyx_t_7 = __Pyx_PyIndex_AsSsize_t(__pyx_v_num); if (unlikely((__pyx_t_7 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 224, __pyx_L1_error)
    __pyx_v_t = __pyx_t_7;

    /* "oasis.pyx":225
 *             c = np.zeros(num, dtype='float32')
 *             t = num
 *             tmp = fmax(newpool.v, 0) / newpool.w             # <<<<<<<<<<<<<<
 *             if newpool.l <= t:  # safely assume t<=num=buffer<1000
 *                 for k in range(newpool.l):
 */
    __pyx_t_16 = fmax(__pyx_v_newpool.v, 0.0);
    if (unlikely(__pyx_v_newpool.w == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 225, __pyx_L1_error)
    }
    __pyx_v_tmp = (__pyx_t_16 / __pyx_v_newpool.w);

    /* "oasis.pyx":226
 *             t = num
 *             tmp = fmax(newpool.v, 0) / newpool.w
 *             if newpool.l <= t:  # safely assume t<=num=buffer<1000             # <<<<<<<<<<<<<<
 *                 for k in range(newpool.l):
 *                     c[k + t - newpool.l] = tmp * self.h[k]
 */
    __pyx_t_1 = ((__pyx_v_newpool.l <= __pyx_v_t) != 0);
    if (__pyx_t_1) {

      /* "oasis.pyx":227
 *             tmp = fmax(newpool.v, 0) / newpool.w
 *             if newpool.l <= t:  # safely assume t<=num=buffer<1000
 *                 for k in range(newpool.l):             # <<<<<<<<<<<<<<
 *                     c[k + t - newpool.l] = tmp * self.h[k]
 *             else:
 */
      __pyx_t_7 = __pyx_v_newpool.l;
      for (__pyx_t_17 = 0; __pyx_t_17 < __pyx_t_7; __pyx_t_17+=1) {
        __pyx_v_k = __pyx_t_17;

        /* "oasis.pyx":228
 *             if newpool.l <= t:  # safely assume t<=num=buffer<1000
 *                 for k in range(newpool.l):
 *                     c[k + t - newpool.l] = tmp * self.h[k]             # <<<<<<<<<<<<<<
 *             else:
 *                 tmp2 = 1000 - newpool.l + t
 */
        __pyx_t_18 = ((__pyx_v_k + __pyx_v_t) - __pyx_v_newpool.l);
        __pyx_t_12 = -1;
        if (__pyx_t_18 < 0) {
          __pyx_t_18 += __pyx_pybuffernd_c.diminfo[0].shape;
          if (unlikely(__pyx_t_18 < 0)) __pyx_t_12 = 0;
        } else if (unlikely(__pyx_t_18 >= __pyx_pybuffernd_c.diminfo[0].shape)) __pyx_t_12 = 0;
        if (unlikely(__pyx_t_12 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_12);
          __PYX_ERR(0, 228, __pyx_L1_error)
        }
        *__Pyx_BufPtrStrided1d(__pyx_t_5oasis_SINGLE *, __pyx_pybuffernd_c.rcbuffer->pybuffer.buf, __pyx_t_18, __pyx_pybuffernd_c.diminfo[0].strides) = (__pyx_v_tmp * (__pyx_v_self->h[__pyx_v_k]));
      }

      /* "oasis.pyx":226
 *             t = num
 *             tmp = fmax(newpool.v, 0) / newpool.w
 *             if newpool.l <= t:  # safely assume t<=num=buffer<1000             # <<<<<<<<<<<<<<
 *                 for k in range(newpool.l):
 *                     c[k + t - newpool.l] = tmp * self.h[k]
 */
      goto __pyx_L8;
    }

    /* "oasis.pyx":230
 *                     c[k + t - newpool.l] = tmp * self.h[k]
 *             else:
 *                 tmp2 = 1000 - newpool.l + t             # <<<<<<<<<<<<<<
 *                 for k in range(t if t < tmp2 else tmp2):
 *                     c[k] = tmp * self.h[k + newpool.l - t]
 */
    /*else*/ {
      __pyx_v_tmp2 = ((0x3E8 - __pyx_v_newpool.l) + __pyx_v_t);

      /* "oasis.pyx":231
 *             else:
 *                 tmp2 = 1000 - newpool.l + t
 *                 for k in range(t if t < tmp2 else tmp2):             # <<<<<<<<<<<<<<
 *                     c[k] = tmp * self.h[k + newpool.l - t]
 *                 # # more accurate exponential decay, but maybe simple truncation c[k]=0 suffices
 */
      if (((__pyx_v_t < __pyx_v_tmp2) != 0)) {
        __pyx_t_7 = __pyx_v_t;
      } else {
        __pyx_t_7 = __pyx_v_tmp2;
      }
      for (__pyx_t_17 = 0; __pyx_t_17 < __pyx_t_7; __pyx_t_17+=1) {
        __pyx_v_k = __pyx_t_17;

        /* "oasis.pyx":232
 *                 tmp2 = 1000 - newpool.l + t
 *                 for k in range(t if t < tmp2 else tmp2):
 *                     c[k] = tmp * self.h[k + newpool.l - t]             # <<<<<<<<<<<<<<
 *                 # # more accurate exponential decay, but maybe simple truncation c[k]=0 suffices
 *                 # if tmp2 <= 0:
 */
        __pyx_t_19 = __pyx_v_k;
        __pyx_t_12 = -1;
        if (__pyx_t_19 < 0) {
          __pyx_t_19 += __pyx_pybuffernd_c.diminfo[0].shape;
          if (unlikely(__pyx_t_19 < 0)) __pyx_t_12 = 0;
        } else if (unlikely(__pyx_t_19 >= __pyx_pybuffernd_c.diminfo[0].shape)) __pyx_t_12 = 0;
        if (unlikely(__pyx_t_12 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_12);
          __PYX_ERR(0, 232, __pyx_L1_error)
        }
        *__Pyx_BufPtrStrided1d(__pyx_t_5oasis_SINGLE *, __pyx_pybuffernd_c.rcbuffer->pybuffer.buf, __pyx_t_19, __pyx_pybuffernd_c.diminfo[0].strides) = (__pyx_v_tmp * (__pyx_v_self->h[((__pyx_v_k + __pyx_v_newpool.l) - __pyx_v_t)]));
      }
    }
    __pyx_L8:;

    /* "oasis.pyx":241
 *                 #     for k in range(tmp2, t):
 *                 #         c[k] = c[k - 1] * self.g
 *             t -= newpool.l             # <<<<<<<<<<<<<<
 *             while t > 0:
 *                 tmp = fmax(self.P[j].v, 0) / self.P[j].w
 */
    __pyx_v_t = (__pyx_v_t - __pyx_v_newpool.l);

    /* "oasis.pyx":242
 *                 #         c[k] = c[k - 1] * self.g
 *             t -= newpool.l
 *             while t > 0:             # <<<<<<<<<<<<<<
 *                 tmp = fmax(self.P[j].v, 0) / self.P[j].w
 *                 if self.P[j].l <= t:  # safely assume t<=num=buffer<1000
 */
    while (1) {
      __pyx_t_1 = ((__pyx_v_t > 0) != 0);
      if (!__pyx_t_1) break;

      /* "oasis.pyx":243
 *             t -= newpool.l
 *             while t > 0:
 *                 tmp = fmax(self.P[j].v, 0) / self.P[j].w             # <<<<<<<<<<<<<<
 *                 if self.P[j].l <= t:  # safely assume t<=num=buffer<1000
 *                     for k in range(self.P[j].l):
 */
      __pyx_t_16 = fmax((__pyx_v_self->P[__pyx_v_j]).v, 0.0);
      __pyx_t_9 = (__pyx_v_self->P[__pyx_v_j]).w;
      if (unlikely(__pyx_t_9 == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 243, __pyx_L1_error)
      }
      __pyx_v_tmp = (__pyx_t_16 / __pyx_t_9);

      /* "oasis.pyx":244
 *             while t > 0:
 *                 tmp = fmax(self.P[j].v, 0) / self.P[j].w
 *                 if self.P[j].l <= t:  # safely assume t<=num=buffer<1000             # <<<<<<<<<<<<<<
 *                     for k in range(self.P[j].l):
 *                         c[k + t - self.P[j].l] = tmp * self.h[k]
 */
      __pyx_t_1 = (((__pyx_v_self->P[__pyx_v_j]).l <= __pyx_v_t) != 0);
      if (__pyx_t_1) {

        /* "oasis.pyx":245
 *                 tmp = fmax(self.P[j].v, 0) / self.P[j].w
 *                 if self.P[j].l <= t:  # safely assume t<=num=buffer<1000
 *                     for k in range(self.P[j].l):             # <<<<<<<<<<<<<<
 *                         c[k + t - self.P[j].l] = tmp * self.h[k]
 *                 else:
 */
        __pyx_t_7 = (__pyx_v_self->P[__pyx_v_j]).l;
        for (__pyx_t_17 = 0; __pyx_t_17 < __pyx_t_7; __pyx_t_17+=1) {
          __pyx_v_k = __pyx_t_17;

          /* "oasis.pyx":246
 *                 if self.P[j].l <= t:  # safely assume t<=num=buffer<1000
 *                     for k in range(self.P[j].l):
 *                         c[k + t - self.P[j].l] = tmp * self.h[k]             # <<<<<<<<<<<<<<
 *                 else:
 *                     tmp2 = 1000 - self.P[j].l + t
 */
          __pyx_t_20 = ((__pyx_v_k + __pyx_v_t) - (__pyx_v_self->P[__pyx_v_j]).l);
          __pyx_t_12 = -1;
          if (__pyx_t_20 < 0) {
            __pyx_t_20 += __pyx_pybuffernd_c.diminfo[0].shape;
            if (unlikely(__pyx_t_20 < 0)) __pyx_t_12 = 0;
          } else if (unlikely(__pyx_t_20 >= __pyx_pybuffernd_c.diminfo[0].shape)) __pyx_t_12 = 0;
          if (unlikely(__pyx_t_12 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_12);
            __PYX_ERR(0, 246, __pyx_L1_error)
          }
          *__Pyx_BufPtrStrided1d(__pyx_t_5oasis_SINGLE *, __pyx_pybuffernd_c.rcbuffer->pybuffer.buf, __pyx_t_20, __pyx_pybuffernd_c.diminfo[0].strides) = (__pyx_v_tmp * (__pyx_v_self->h[__pyx_v_k]));
        }

        /* "oasis.pyx":244
 *             while t > 0:
 *                 tmp = fmax(self.P[j].v, 0) / self.P[j].w
 *                 if self.P[j].l <= t:  # safely assume t<=num=buffer<1000             # <<<<<<<<<<<<<<
 *                     for k in range(self.P[j].l):
 *                         c[k + t - self.P[j].l] = tmp * self.h[k]
 */
        goto __pyx_L15;
      }

      /* "oasis.pyx":248
 *                         c[k + t - self.P[j].l] = tmp * self.h[k]
 *                 else:
 *                     tmp2 = 1000 - self.P[j].l + t             # <<<<<<<<<<<<<<
 *                     for k in range(t if t < tmp2 else tmp2):
 *                         c[k] = tmp * self.h[k + self.P[j].l - t]
 */
      /*else*/ {
        __pyx_v_tmp2 = ((0x3E8 - (__pyx_v_self->P[__pyx_v_j]).l) + __pyx_v_t);

        /* "oasis.pyx":249
 *                 else:
 *                     tmp2 = 1000 - self.P[j].l + t
 *                     for k in range(t if t < tmp2 else tmp2):             # <<<<<<<<<<<<<<
 *                         c[k] = tmp * self.h[k + self.P[j].l - t]
 *                     # # more accurate exponential decay, but maybe simple truncation c[k]=0 suffices
 */
        if (((__pyx_v_t < __pyx_v_tmp2) != 0)) {
          __pyx_t_7 = __pyx_v_t;
        } else {
          __pyx_t_7 = __pyx_v_tmp2;
        }
        for (__pyx_t_17 = 0; __pyx_t_17 < __pyx_t_7; __pyx_t_17+=1) {
          __pyx_v_k = __pyx_t_17;

          /* "oasis.pyx":250
 *                     tmp2 = 1000 - self.P[j].l + t
 *                     for k in range(t if t < tmp2 else tmp2):
 *                         c[k] = tmp * self.h[k + self.P[j].l - t]             # <<<<<<<<<<<<<<
 *                     # # more accurate exponential decay, but maybe simple truncation c[k]=0 suffices
 *                     # if tmp2 <= 0:
 */
          __pyx_t_21 = __pyx_v_k;
          __pyx_t_12 = -1;
          if (__pyx_t_21 < 0) {
            __pyx_t_21 += __pyx_pybuffernd_c.diminfo[0].shape;
            if (unlikely(__pyx_t_21 < 0)) __pyx_t_12 = 0;
          } else if (unlikely(__pyx_t_21 >= __pyx_pybuffernd_c.diminfo[0].shape)) __pyx_t_12 = 0;
          if (unlikely(__pyx_t_12 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_12);
            __PYX_ERR(0, 250, __pyx_L1_error)
          }
          *__Pyx_BufPtrStrided1d(__pyx_t_5oasis_SINGLE *, __pyx_pybuffernd_c.rcbuffer->pybuffer.buf, __pyx_t_21, __pyx_pybuffernd_c.diminfo[0].strides) = (__pyx_v_tmp * (__pyx_v_self->h[((__pyx_v_k + (__pyx_v_self->P[__pyx_v_j]).l) - __pyx_v_t)]));
        }
      }
      __pyx_L15:;

      /* "oasis.pyx":259
 *                     #     for k in range(tmp2, t):
 *                     #         c[k] = c[k - 1] * self.g
 *                 t -= self.P[j].l             # <<<<<<<<<<<<<<
 *                 j -= 1
 *         else:
 */
      __pyx_v_t = (__pyx_v_t - (__pyx_v_self->P[__pyx_v_j]).l);

      /* "oasis.pyx":260
 *                     #         c[k] = c[k - 1] * self.g
 *                 t -= self.P[j].l
 *                 j -= 1             # <<<<<<<<<<<<<<
 *         else:
 *             _yt = yt - self.b - self.lam * (1 - self.g - self.g2)
 */
      __pyx_v_j = (__pyx_v_j - 1);
    }

    /* "oasis.pyx":209
 *         cdef Py_ssize_t t, j, k, tmp2
 *         cdef SINGLE tmp, _yt
 *         if self.g2 == 0:  # AR(1)             # <<<<<<<<<<<<<<
 *             newpool.v = yt - self.b - self.lam * (1 - self.g)
 *             newpool.w, newpool.t, newpool.l = 1, self.t, 1
 */
    goto __pyx_L3;
  }

  /* "oasis.pyx":262
 *                 j -= 1
 *         else:
 *             _yt = yt - self.b - self.lam * (1 - self.g - self.g2)             # <<<<<<<<<<<<<<
 *             newpool.v = fmax(0, _yt)
 *             newpool.w, newpool.t, newpool.l = newpool.v, self.t, 1
 */
  /*else*/ {
    __pyx_t_10 = PyFloat_FromDouble(__pyx_v_self->b); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 262, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_3 = PyNumber_Subtract(__pyx_v_yt, __pyx_t_10); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 262, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_10 = PyFloat_FromDouble((__pyx_v_self->lam * ((1.0 - __pyx_v_self->g) - __pyx_v_self->g2))); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 262, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_4 = PyNumber_Subtract(__pyx_t_3, __pyx_t_10); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 262, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_9 = __pyx_PyFloat_AsFloat(__pyx_t_4); if (unlikely((__pyx_t_9 == (npy_float32)-1) && PyErr_Occurred())) __PYX_ERR(0, 262, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v__yt = __pyx_t_9;

    /* "oasis.pyx":263
 *         else:
 *             _yt = yt - self.b - self.lam * (1 - self.g - self.g2)
 *             newpool.v = fmax(0, _yt)             # <<<<<<<<<<<<<<
 *             newpool.w, newpool.t, newpool.l = newpool.v, self.t, 1
 *             j = self.i
 */
    __pyx_v_newpool.v = fmax(0.0, __pyx_v__yt);

    /* "oasis.pyx":264
 *             _yt = yt - self.b - self.lam * (1 - self.g - self.g2)
 *             newpool.v = fmax(0, _yt)
 *             newpool.w, newpool.t, newpool.l = newpool.v, self.t, 1             # <<<<<<<<<<<<<<
 *             j = self.i
 *             while (j >= 0 and  # backtrack until violations fixed
 */
    __pyx_t_9 = __pyx_v_newpool.v;
    __pyx_t_6 = __pyx_v_self->t;
    __pyx_t_7 = 1;
    __pyx_v_newpool.w = __pyx_t_9;
    __pyx_v_newpool.t = __pyx_t_6;
    __pyx_v_newpool.l = __pyx_t_7;

    /* "oasis.pyx":265
 *             newpool.v = fmax(0, _yt)
 *             newpool.w, newpool.t, newpool.l = newpool.v, self.t, 1
 *             j = self.i             # <<<<<<<<<<<<<<
 *             while (j >= 0 and  # backtrack until violations fixed
 *                    ((((self.P[j].v * self.d**(self.P[j].l + 1) /
 */
    __pyx_t_7 = __pyx_v_self->i;
    __pyx_v_j = __pyx_t_7;

    /* "oasis.pyx":266
 *             newpool.w, newpool.t, newpool.l = newpool.v, self.t, 1
 *             j = self.i
 *             while (j >= 0 and  # backtrack until violations fixed             # <<<<<<<<<<<<<<
 *                    ((((self.P[j].v * self.d**(self.P[j].l + 1) /
 *                        (self.d - self.r)) if self.P[j].l >= 1000 else
 */
    while (1) {
      __pyx_t_8 = ((__pyx_v_j >= 0) != 0);
      if (__pyx_t_8) {
      } else {
        __pyx_t_1 = __pyx_t_8;
        goto __pyx_L22_bool_binop_done;
      }

      /* "oasis.pyx":272
 *                         self.g12[self.P[j].l] * self.P[j - 1].w)) >
 *                        newpool.v - self.s_min)
 *                     if j > 0 else             # <<<<<<<<<<<<<<
 *                     (self.P[j].w * self.d > newpool.v - self.s_min))):
 *                 # merge two pools
 */
      if (((__pyx_v_j > 0) != 0)) {

        /* "oasis.pyx":268
 *             while (j >= 0 and  # backtrack until violations fixed
 *                    ((((self.P[j].v * self.d**(self.P[j].l + 1) /
 *                        (self.d - self.r)) if self.P[j].l >= 1000 else             # <<<<<<<<<<<<<<
 *                        (self.h[self.P[j].l] * self.P[j].v +
 *                         self.g12[self.P[j].l] * self.P[j - 1].w)) >
 */
        if ((((__pyx_v_self->P[__pyx_v_j]).l >= 0x3E8) != 0)) {

          /* "oasis.pyx":267
 *             j = self.i
 *             while (j >= 0 and  # backtrack until violations fixed
 *                    ((((self.P[j].v * self.d**(self.P[j].l + 1) /             # <<<<<<<<<<<<<<
 *                        (self.d - self.r)) if self.P[j].l >= 1000 else
 *                        (self.h[self.P[j].l] * self.P[j].v +
 */
          __pyx_t_5 = ((__pyx_v_self->P[__pyx_v_j]).v * powf(__pyx_v_self->d, ((__pyx_t_5oasis_SINGLE)((__pyx_v_self->P[__pyx_v_j]).l + 1))));

          /* "oasis.pyx":268
 *             while (j >= 0 and  # backtrack until violations fixed
 *                    ((((self.P[j].v * self.d**(self.P[j].l + 1) /
 *                        (self.d - self.r)) if self.P[j].l >= 1000 else             # <<<<<<<<<<<<<<
 *                        (self.h[self.P[j].l] * self.P[j].v +
 *                         self.g12[self.P[j].l] * self.P[j - 1].w)) >
 */
          __pyx_t_22 = (__pyx_v_self->d - __pyx_v_self->r);

          /* "oasis.pyx":267
 *             j = self.i
 *             while (j >= 0 and  # backtrack until violations fixed
 *                    ((((self.P[j].v * self.d**(self.P[j].l + 1) /             # <<<<<<<<<<<<<<
 *                        (self.d - self.r)) if self.P[j].l >= 1000 else
 *                        (self.h[self.P[j].l] * self.P[j].v +
 */
          if (unlikely(__pyx_t_22 == 0)) {
            PyErr_SetString(PyExc_ZeroDivisionError, "float division");
            __PYX_ERR(0, 267, __pyx_L1_error)
          }
          __pyx_t_9 = (__pyx_t_5 / __pyx_t_22);
        } else {

          /* "oasis.pyx":269
 *                    ((((self.P[j].v * self.d**(self.P[j].l + 1) /
 *                        (self.d - self.r)) if self.P[j].l >= 1000 else
 *                        (self.h[self.P[j].l] * self.P[j].v +             # <<<<<<<<<<<<<<
 *                         self.g12[self.P[j].l] * self.P[j - 1].w)) >
 *                        newpool.v - self.s_min)
 */
          __pyx_t_9 = (((__pyx_v_self->h[(__pyx_v_self->P[__pyx_v_j]).l]) * (__pyx_v_self->P[__pyx_v_j]).v) + ((__pyx_v_self->g12[(__pyx_v_self->P[__pyx_v_j]).l]) * (__pyx_v_self->P[(__pyx_v_j - 1)]).w));
        }

        /* "oasis.pyx":271
 *                        (self.h[self.P[j].l] * self.P[j].v +
 *                         self.g12[self.P[j].l] * self.P[j - 1].w)) >
 *                        newpool.v - self.s_min)             # <<<<<<<<<<<<<<
 *                     if j > 0 else
 *                     (self.P[j].w * self.d > newpool.v - self.s_min))):
 */
        __pyx_t_8 = (__pyx_t_9 > (__pyx_v_newpool.v - __pyx_v_self->s_min));
      } else {

        /* "oasis.pyx":273
 *                        newpool.v - self.s_min)
 *                     if j > 0 else
 *                     (self.P[j].w * self.d > newpool.v - self.s_min))):             # <<<<<<<<<<<<<<
 *                 # merge two pools
 *                 newpool.l += self.P[j].l
 */
        __pyx_t_8 = (((__pyx_v_self->P[__pyx_v_j]).w * __pyx_v_self->d) > (__pyx_v_newpool.v - __pyx_v_self->s_min));
      }

      /* "oasis.pyx":267
 *             j = self.i
 *             while (j >= 0 and  # backtrack until violations fixed
 *                    ((((self.P[j].v * self.d**(self.P[j].l + 1) /             # <<<<<<<<<<<<<<
 *                        (self.d - self.r)) if self.P[j].l >= 1000 else
 *                        (self.h[self.P[j].l] * self.P[j].v +
 */
      __pyx_t_23 = (__pyx_t_8 != 0);
      __pyx_t_1 = __pyx_t_23;
      __pyx_L22_bool_binop_done:;
      if (!__pyx_t_1) break;

      /* "oasis.pyx":275
 *                     (self.P[j].w * self.d > newpool.v - self.s_min))):
 *                 # merge two pools
 *                 newpool.l += self.P[j].l             # <<<<<<<<<<<<<<
 *                 newpool.t = self.P[j].t
 *                 k = newpool.l - 1
 */
      __pyx_v_newpool.l = (__pyx_v_newpool.l + (__pyx_v_self->P[__pyx_v_j]).l);

      /* "oasis.pyx":276
 *                 # merge two pools
 *                 newpool.l += self.P[j].l
 *                 newpool.t = self.P[j].t             # <<<<<<<<<<<<<<
 *                 k = newpool.l - 1
 *                 if j > 0:
 */
      __pyx_t_7 = (__pyx_v_self->P[__pyx_v_j]).t;
      __pyx_v_newpool.t = __pyx_t_7;

      /* "oasis.pyx":277
 *                 newpool.l += self.P[j].l
 *                 newpool.t = self.P[j].t
 *                 k = newpool.l - 1             # <<<<<<<<<<<<<<
 *                 if j > 0:
 *                     if k >= 1000:
 */
      __pyx_v_k = (__pyx_v_newpool.l - 1);

      /* "oasis.pyx":278
 *                 newpool.t = self.P[j].t
 *                 k = newpool.l - 1
 *                 if j > 0:             # <<<<<<<<<<<<<<
 *                     if k >= 1000:
 *                         k = 999  # precomputed kernel shorter than ISI -> simply truncate
 */
      __pyx_t_1 = ((__pyx_v_j > 0) != 0);
      if (__pyx_t_1) {

        /* "oasis.pyx":279
 *                 k = newpool.l - 1
 *                 if j > 0:
 *                     if k >= 1000:             # <<<<<<<<<<<<<<
 *                         k = 999  # precomputed kernel shorter than ISI -> simply truncate
 *                     tmp = 0
 */
        __pyx_t_1 = ((__pyx_v_k >= 0x3E8) != 0);
        if (__pyx_t_1) {

          /* "oasis.pyx":280
 *                 if j > 0:
 *                     if k >= 1000:
 *                         k = 999  # precomputed kernel shorter than ISI -> simply truncate             # <<<<<<<<<<<<<<
 *                     tmp = 0
 *                     for tmp2 in range(k):
 */
          __pyx_v_k = 0x3E7;

          /* "oasis.pyx":279
 *                 k = newpool.l - 1
 *                 if j > 0:
 *                     if k >= 1000:             # <<<<<<<<<<<<<<
 *                         k = 999  # precomputed kernel shorter than ISI -> simply truncate
 *                     tmp = 0
 */
        }

        /* "oasis.pyx":281
 *                     if k >= 1000:
 *                         k = 999  # precomputed kernel shorter than ISI -> simply truncate
 *                     tmp = 0             # <<<<<<<<<<<<<<
 *                     for tmp2 in range(k):
 *                         tmp += self.h[tmp2] * self._y[newpool.t + tmp2]
 */
        __pyx_v_tmp = 0.0;

        /* "oasis.pyx":282
 *                         k = 999  # precomputed kernel shorter than ISI -> simply truncate
 *                     tmp = 0
 *                     for tmp2 in range(k):             # <<<<<<<<<<<<<<
 *                         tmp += self.h[tmp2] * self._y[newpool.t + tmp2]
 *                     # tmp += self.h[k] * (self._y[newpool.t + k] if newpool.l > 1000 else _yt)
 */
        __pyx_t_7 = __pyx_v_k;
        for (__pyx_t_17 = 0; __pyx_t_17 < __pyx_t_7; __pyx_t_17+=1) {
          __pyx_v_tmp2 = __pyx_t_17;

          /* "oasis.pyx":283
 *                     tmp = 0
 *                     for tmp2 in range(k):
 *                         tmp += self.h[tmp2] * self._y[newpool.t + tmp2]             # <<<<<<<<<<<<<<
 *                     # tmp += self.h[k] * (self._y[newpool.t + k] if newpool.l > 1000 else _yt)
 *                     tmp += self.h[k] * (self._y[newpool.t + k] if newpool.t + k < self._y.size() else _yt)
 */
          __pyx_v_tmp = (__pyx_v_tmp + ((__pyx_v_self->h[__pyx_v_tmp2]) * (__pyx_v_self->_y[(__pyx_v_newpool.t + __pyx_v_tmp2)])));
        }

        /* "oasis.pyx":285
 *                         tmp += self.h[tmp2] * self._y[newpool.t + tmp2]
 *                     # tmp += self.h[k] * (self._y[newpool.t + k] if newpool.l > 1000 else _yt)
 *                     tmp += self.h[k] * (self._y[newpool.t + k] if newpool.t + k < self._y.size() else _yt)             # <<<<<<<<<<<<<<
 *                     newpool.v = (tmp - self.g11g12[k] * self.P[j-1].w) / self.g11g11[k]
 *                     newpool.w = self.h[k] * newpool.v + self.g12[k] * self.P[j-1].w
 */
        if ((((__pyx_v_newpool.t + __pyx_v_k) < __pyx_v_self->_y.size()) != 0)) {
          __pyx_t_9 = (__pyx_v_self->_y[(__pyx_v_newpool.t + __pyx_v_k)]);
        } else {
          __pyx_t_9 = __pyx_v__yt;
        }
        __pyx_v_tmp = (__pyx_v_tmp + ((__pyx_v_self->h[__pyx_v_k]) * __pyx_t_9));

        /* "oasis.pyx":286
 *                     # tmp += self.h[k] * (self._y[newpool.t + k] if newpool.l > 1000 else _yt)
 *                     tmp += self.h[k] * (self._y[newpool.t + k] if newpool.t + k < self._y.size() else _yt)
 *                     newpool.v = (tmp - self.g11g12[k] * self.P[j-1].w) / self.g11g11[k]             # <<<<<<<<<<<<<<
 *                     newpool.w = self.h[k] * newpool.v + self.g12[k] * self.P[j-1].w
 *                 else:  # update first pool
 */
        __pyx_t_9 = (__pyx_v_tmp - ((__pyx_v_self->g11g12[__pyx_v_k]) * (__pyx_v_self->P[(__pyx_v_j - 1)]).w));
        if (unlikely((__pyx_v_self->g11g11[__pyx_v_k]) == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 286, __pyx_L1_error)
        }
        __pyx_v_newpool.v = (__pyx_t_9 / (__pyx_v_self->g11g11[__pyx_v_k]));

        /* "oasis.pyx":287
 *                     tmp += self.h[k] * (self._y[newpool.t + k] if newpool.t + k < self._y.size() else _yt)
 *                     newpool.v = (tmp - self.g11g12[k] * self.P[j-1].w) / self.g11g11[k]
 *                     newpool.w = self.h[k] * newpool.v + self.g12[k] * self.P[j-1].w             # <<<<<<<<<<<<<<
 *                 else:  # update first pool
 *                     tmp = 0
 */
        __pyx_v_newpool.w = (((__pyx_v_self->h[__pyx_v_k]) * __pyx_v_newpool.v) + ((__pyx_v_self->g12[__pyx_v_k]) * (__pyx_v_self->P[(__pyx_v_j - 1)]).w));

        /* "oasis.pyx":278
 *                 newpool.t = self.P[j].t
 *                 k = newpool.l - 1
 *                 if j > 0:             # <<<<<<<<<<<<<<
 *                     if k >= 1000:
 *                         k = 999  # precomputed kernel shorter than ISI -> simply truncate
 */
        goto __pyx_L24;
      }

      /* "oasis.pyx":289
 *                     newpool.w = self.h[k] * newpool.v + self.g12[k] * self.P[j-1].w
 *                 else:  # update first pool
 *                     tmp = 0             # <<<<<<<<<<<<<<
 *                     for tmp2 in range(k):
 *                         tmp += self.d**tmp2 * self._y[tmp2]
 */
      /*else*/ {
        __pyx_v_tmp = 0.0;

        /* "oasis.pyx":290
 *                 else:  # update first pool
 *                     tmp = 0
 *                     for tmp2 in range(k):             # <<<<<<<<<<<<<<
 *                         tmp += self.d**tmp2 * self._y[tmp2]
 *                     tmp += self.d**k * self._yt
 */
        __pyx_t_7 = __pyx_v_k;
        for (__pyx_t_17 = 0; __pyx_t_17 < __pyx_t_7; __pyx_t_17+=1) {
          __pyx_v_tmp2 = __pyx_t_17;

          /* "oasis.pyx":291
 *                     tmp = 0
 *                     for tmp2 in range(k):
 *                         tmp += self.d**tmp2 * self._y[tmp2]             # <<<<<<<<<<<<<<
 *                     tmp += self.d**k * self._yt
 *                     newpool.v = fmax(0, tmp * (1 - self.d * self.d) /
 */
          __pyx_v_tmp = (__pyx_v_tmp + (powf(__pyx_v_self->d, ((__pyx_t_5oasis_SINGLE)__pyx_v_tmp2)) * (__pyx_v_self->_y[__pyx_v_tmp2])));
        }

        /* "oasis.pyx":292
 *                     for tmp2 in range(k):
 *                         tmp += self.d**tmp2 * self._y[tmp2]
 *                     tmp += self.d**k * self._yt             # <<<<<<<<<<<<<<
 *                     newpool.v = fmax(0, tmp * (1 - self.d * self.d) /
 *                                      (1 - self.d**(2 * newpool.l)))
 */
        __pyx_t_4 = PyFloat_FromDouble(__pyx_v_tmp); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 292, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_10 = PyFloat_FromDouble(powf(__pyx_v_self->d, ((__pyx_t_5oasis_SINGLE)__pyx_v_k))); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 292, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_yt_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 292, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_2 = PyNumber_Multiply(__pyx_t_10, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 292, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 292, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_9 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_9 == (npy_float32)-1) && PyErr_Occurred())) __PYX_ERR(0, 292, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_v_tmp = __pyx_t_9;

        /* "oasis.pyx":293
 *                         tmp += self.d**tmp2 * self._y[tmp2]
 *                     tmp += self.d**k * self._yt
 *                     newpool.v = fmax(0, tmp * (1 - self.d * self.d) /             # <<<<<<<<<<<<<<
 *                                      (1 - self.d**(2 * newpool.l)))
 *                     newpool.w = self.d**k * newpool.v
 */
        __pyx_t_9 = (__pyx_v_tmp * (1.0 - (__pyx_v_self->d * __pyx_v_self->d)));

        /* "oasis.pyx":294
 *                     tmp += self.d**k * self._yt
 *                     newpool.v = fmax(0, tmp * (1 - self.d * self.d) /
 *                                      (1 - self.d**(2 * newpool.l)))             # <<<<<<<<<<<<<<
 *                     newpool.w = self.d**k * newpool.v
 *                 j -= 1
 */
        __pyx_t_22 = (1.0 - powf(__pyx_v_self->d, ((__pyx_t_5oasis_SINGLE)(2 * __pyx_v_newpool.l))));

        /* "oasis.pyx":293
 *                         tmp += self.d**tmp2 * self._y[tmp2]
 *                     tmp += self.d**k * self._yt
 *                     newpool.v = fmax(0, tmp * (1 - self.d * self.d) /             # <<<<<<<<<<<<<<
 *                                      (1 - self.d**(2 * newpool.l)))
 *                     newpool.w = self.d**k * newpool.v
 */
        if (unlikely(__pyx_t_22 == 0)) {
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          __PYX_ERR(0, 293, __pyx_L1_error)
        }
        __pyx_v_newpool.v = fmax(0.0, (__pyx_t_9 / __pyx_t_22));

        /* "oasis.pyx":295
 *                     newpool.v = fmax(0, tmp * (1 - self.d * self.d) /
 *                                      (1 - self.d**(2 * newpool.l)))
 *                     newpool.w = self.d**k * newpool.v             # <<<<<<<<<<<<<<
 *                 j -= 1
 *             # return deconvolved activity for last num time steps
 */
        __pyx_v_newpool.w = (powf(__pyx_v_self->d, ((__pyx_t_5oasis_SINGLE)__pyx_v_k)) * __pyx_v_newpool.v);
      }
      __pyx_L24:;

      /* "oasis.pyx":296
 *                                      (1 - self.d**(2 * newpool.l)))
 *                     newpool.w = self.d**k * newpool.v
 *                 j -= 1             # <<<<<<<<<<<<<<
 *             # return deconvolved activity for last num time steps
 *             c = np.zeros(num, dtype='float32')
 */
      __pyx_v_j = (__pyx_v_j - 1);
    }

    /* "oasis.pyx":298
 *                 j -= 1
 *             # return deconvolved activity for last num time steps
 *             c = np.zeros(num, dtype='float32')             # <<<<<<<<<<<<<<
 *             t = num
 * 
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 298, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 298, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 298, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_num);
    __Pyx_GIVEREF(__pyx_v_num);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_num);
    __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 298, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_n_s_float32) < 0) __PYX_ERR(0, 298, __pyx_L1_error)
    __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 298, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (!(likely(((__pyx_t_10) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_10, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 298, __pyx_L1_error)
    __pyx_t_11 = ((PyArrayObject *)__pyx_t_10);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_c.rcbuffer->pybuffer);
      __pyx_t_12 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_t_11, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack);
      if (unlikely(__pyx_t_12 < 0)) {
        PyErr_Fetch(&__pyx_t_15, &__pyx_t_14, &__pyx_t_13);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_v_c, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_15); Py_XDECREF(__pyx_t_14); Py_XDECREF(__pyx_t_13);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_15, __pyx_t_14, __pyx_t_13);
        }
      }
      __pyx_pybuffernd_c.diminfo[0].strides = __pyx_pybuffernd_c.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_c.diminfo[0].shape = __pyx_pybuffernd_c.rcbuffer->pybuffer.shape[0];
      if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(0, 298, __pyx_L1_error)
    }
    __pyx_t_11 = 0;
    __pyx_v_c = ((PyArrayObject *)__pyx_t_10);
    __pyx_t_10 = 0;

    /* "oasis.pyx":299
 *             # return deconvolved activity for last num time steps
 *             c = np.zeros(num, dtype='float32')
 *             t = num             # <<<<<<<<<<<<<<
 * 
 *             if j == -1:  # newpool is first and only pool
 */
    __pyx_t_7 = __Pyx_PyIndex_AsSsize_t(__pyx_v_num); if (unlikely((__pyx_t_7 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 299, __pyx_L1_error)
    __pyx_v_t = __pyx_t_7;

    /* "oasis.pyx":301
 *             t = num
 * 
 *             if j == -1:  # newpool is first and only pool             # <<<<<<<<<<<<<<
 *                 c[0] = newpool.v * self.d**(newpool.l - t)
 *                 for k in range(1, t):
 */
    __pyx_t_1 = ((__pyx_v_j == -1L) != 0);
    if (__pyx_t_1) {

      /* "oasis.pyx":302
 * 
 *             if j == -1:  # newpool is first and only pool
 *                 c[0] = newpool.v * self.d**(newpool.l - t)             # <<<<<<<<<<<<<<
 *                 for k in range(1, t):
 *                     c[k] = c[k - 1] * self.d
 */
      __pyx_t_24 = 0;
      __pyx_t_12 = -1;
      if (__pyx_t_24 < 0) {
        __pyx_t_24 += __pyx_pybuffernd_c.diminfo[0].shape;
        if (unlikely(__pyx_t_24 < 0)) __pyx_t_12 = 0;
      } else if (unlikely(__pyx_t_24 >= __pyx_pybuffernd_c.diminfo[0].shape)) __pyx_t_12 = 0;
      if (unlikely(__pyx_t_12 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_12);
        __PYX_ERR(0, 302, __pyx_L1_error)
      }
      *__Pyx_BufPtrStrided1d(__pyx_t_5oasis_SINGLE *, __pyx_pybuffernd_c.rcbuffer->pybuffer.buf, __pyx_t_24, __pyx_pybuffernd_c.diminfo[0].strides) = (__pyx_v_newpool.v * powf(__pyx_v_self->d, ((__pyx_t_5oasis_SINGLE)(__pyx_v_newpool.l - __pyx_v_t))));

      /* "oasis.pyx":303
 *             if j == -1:  # newpool is first and only pool
 *                 c[0] = newpool.v * self.d**(newpool.l - t)
 *                 for k in range(1, t):             # <<<<<<<<<<<<<<
 *                     c[k] = c[k - 1] * self.d
 *             elif newpool.l <= t:  # safely assume t<=num=buffer<1000
 */
      __pyx_t_7 = __pyx_v_t;
      for (__pyx_t_17 = 1; __pyx_t_17 < __pyx_t_7; __pyx_t_17+=1) {
        __pyx_v_k = __pyx_t_17;

        /* "oasis.pyx":304
 *                 c[0] = newpool.v * self.d**(newpool.l - t)
 *                 for k in range(1, t):
 *                     c[k] = c[k - 1] * self.d             # <<<<<<<<<<<<<<
 *             elif newpool.l <= t:  # safely assume t<=num=buffer<1000
 *                 for k in range(newpool.l):
 */
        __pyx_t_25 = (__pyx_v_k - 1);
        __pyx_t_12 = -1;
        if (__pyx_t_25 < 0) {
          __pyx_t_25 += __pyx_pybuffernd_c.diminfo[0].shape;
          if (unlikely(__pyx_t_25 < 0)) __pyx_t_12 = 0;
        } else if (unlikely(__pyx_t_25 >= __pyx_pybuffernd_c.diminfo[0].shape)) __pyx_t_12 = 0;
        if (unlikely(__pyx_t_12 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_12);
          __PYX_ERR(0, 304, __pyx_L1_error)
        }
        __pyx_t_26 = __pyx_v_k;
        __pyx_t_12 = -1;
        if (__pyx_t_26 < 0) {
          __pyx_t_26 += __pyx_pybuffernd_c.diminfo[0].shape;
          if (unlikely(__pyx_t_26 < 0)) __pyx_t_12 = 0;
        } else if (unlikely(__pyx_t_26 >= __pyx_pybuffernd_c.diminfo[0].shape)) __pyx_t_12 = 0;
        if (unlikely(__pyx_t_12 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_12);
          __PYX_ERR(0, 304, __pyx_L1_error)
        }
        *__Pyx_BufPtrStrided1d(__pyx_t_5oasis_SINGLE *, __pyx_pybuffernd_c.rcbuffer->pybuffer.buf, __pyx_t_26, __pyx_pybuffernd_c.diminfo[0].strides) = ((*__Pyx_BufPtrStrided1d(__pyx_t_5oasis_SINGLE *, __pyx_pybuffernd_c.rcbuffer->pybuffer.buf, __pyx_t_25, __pyx_pybuffernd_c.diminfo[0].strides)) * __pyx_v_self->d);
      }

      /* "oasis.pyx":301
 *             t = num
 * 
 *             if j == -1:  # newpool is first and only pool             # <<<<<<<<<<<<<<
 *                 c[0] = newpool.v * self.d**(newpool.l - t)
 *                 for k in range(1, t):
 */
      goto __pyx_L30;
    }

    /* "oasis.pyx":305
 *                 for k in range(1, t):
 *                     c[k] = c[k - 1] * self.d
 *             elif newpool.l <= t:  # safely assume t<=num=buffer<1000             # <<<<<<<<<<<<<<
 *                 for k in range(newpool.l):
 *                     c[k + t - newpool.l] = self.h[k] * newpool.v + \
 */
    __pyx_t_1 = ((__pyx_v_newpool.l <= __pyx_v_t) != 0);
    if (__pyx_t_1) {

      /* "oasis.pyx":306
 *                     c[k] = c[k - 1] * self.d
 *             elif newpool.l <= t:  # safely assume t<=num=buffer<1000
 *                 for k in range(newpool.l):             # <<<<<<<<<<<<<<
 *                     c[k + t - newpool.l] = self.h[k] * newpool.v + \
 *                         self.g12[k] * self.P[j].w
 */
      __pyx_t_7 = __pyx_v_newpool.l;
      for (__pyx_t_17 = 0; __pyx_t_17 < __pyx_t_7; __pyx_t_17+=1) {
        __pyx_v_k = __pyx_t_17;

        /* "oasis.pyx":307
 *             elif newpool.l <= t:  # safely assume t<=num=buffer<1000
 *                 for k in range(newpool.l):
 *                     c[k + t - newpool.l] = self.h[k] * newpool.v + \             # <<<<<<<<<<<<<<
 *                         self.g12[k] * self.P[j].w
 *             else:
 */
        __pyx_t_27 = ((__pyx_v_k + __pyx_v_t) - __pyx_v_newpool.l);
        __pyx_t_12 = -1;
        if (__pyx_t_27 < 0) {
          __pyx_t_27 += __pyx_pybuffernd_c.diminfo[0].shape;
          if (unlikely(__pyx_t_27 < 0)) __pyx_t_12 = 0;
        } else if (unlikely(__pyx_t_27 >= __pyx_pybuffernd_c.diminfo[0].shape)) __pyx_t_12 = 0;
        if (unlikely(__pyx_t_12 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_12);
          __PYX_ERR(0, 307, __pyx_L1_error)
        }
        *__Pyx_BufPtrStrided1d(__pyx_t_5oasis_SINGLE *, __pyx_pybuffernd_c.rcbuffer->pybuffer.buf, __pyx_t_27, __pyx_pybuffernd_c.diminfo[0].strides) = (((__pyx_v_self->h[__pyx_v_k]) * __pyx_v_newpool.v) + ((__pyx_v_self->g12[__pyx_v_k]) * (__pyx_v_self->P[__pyx_v_j]).w));
      }

      /* "oasis.pyx":305
 *                 for k in range(1, t):
 *                     c[k] = c[k - 1] * self.d
 *             elif newpool.l <= t:  # safely assume t<=num=buffer<1000             # <<<<<<<<<<<<<<
 *                 for k in range(newpool.l):
 *                     c[k + t - newpool.l] = self.h[k] * newpool.v + \
 */
      goto __pyx_L30;
    }

    /* "oasis.pyx":310
 *                         self.g12[k] * self.P[j].w
 *             else:
 *                 tmp2 = 1000 - newpool.l + t             # <<<<<<<<<<<<<<
 *                 for k in range(t if t < tmp2 else tmp2):
 *                     c[k] = self.h[k + newpool.l - t] * newpool.v + \
 */
    /*else*/ {
      __pyx_v_tmp2 = ((0x3E8 - __pyx_v_newpool.l) + __pyx_v_t);

      /* "oasis.pyx":311
 *             else:
 *                 tmp2 = 1000 - newpool.l + t
 *                 for k in range(t if t < tmp2 else tmp2):             # <<<<<<<<<<<<<<
 *                     c[k] = self.h[k + newpool.l - t] * newpool.v + \
 *                         self.g12[k + newpool.l - t] * self.P[j].w
 */
      if (((__pyx_v_t < __pyx_v_tmp2) != 0)) {
        __pyx_t_7 = __pyx_v_t;
      } else {
        __pyx_t_7 = __pyx_v_tmp2;
      }
      for (__pyx_t_17 = 0; __pyx_t_17 < __pyx_t_7; __pyx_t_17+=1) {
        __pyx_v_k = __pyx_t_17;

        /* "oasis.pyx":312
 *                 tmp2 = 1000 - newpool.l + t
 *                 for k in range(t if t < tmp2 else tmp2):
 *                     c[k] = self.h[k + newpool.l - t] * newpool.v + \             # <<<<<<<<<<<<<<
 *                         self.g12[k + newpool.l - t] * self.P[j].w
 *                 # # more accurate exponential decay, but maybe simple truncation c[k]=0 suffices
 */
        __pyx_t_28 = __pyx_v_k;
        __pyx_t_12 = -1;
        if (__pyx_t_28 < 0) {
          __pyx_t_28 += __pyx_pybuffernd_c.diminfo[0].shape;
          if (unlikely(__pyx_t_28 < 0)) __pyx_t_12 = 0;
        } else if (unlikely(__pyx_t_28 >= __pyx_pybuffernd_c.diminfo[0].shape)) __pyx_t_12 = 0;
        if (unlikely(__pyx_t_12 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_12);
          __PYX_ERR(0, 312, __pyx_L1_error)
        }
        *__Pyx_BufPtrStrided1d(__pyx_t_5oasis_SINGLE *, __pyx_pybuffernd_c.rcbuffer->pybuffer.buf, __pyx_t_28, __pyx_pybuffernd_c.diminfo[0].strides) = (((__pyx_v_self->h[((__pyx_v_k + __pyx_v_newpool.l) - __pyx_v_t)]) * __pyx_v_newpool.v) + ((__pyx_v_self->g12[((__pyx_v_k + __pyx_v_newpool.l) - __pyx_v_t)]) * (__pyx_v_self->P[__pyx_v_j]).w));
      }
    }
    __pyx_L30:;

    /* "oasis.pyx":322
 *                 #     for k in range(tmp2, t):
 *                 #         c[k] = c[k - 1] * self.d
 *             t -= newpool.l             # <<<<<<<<<<<<<<
 *             while t > 0:
 *                 if j == 0:  # first pool
 */
    __pyx_v_t = (__pyx_v_t - __pyx_v_newpool.l);

    /* "oasis.pyx":323
 *                 #         c[k] = c[k - 1] * self.d
 *             t -= newpool.l
 *             while t > 0:             # <<<<<<<<<<<<<<
 *                 if j == 0:  # first pool
 *                     c[0] = self.P[0].v * self.d**(self.P[0].l - t)
 */
    while (1) {
      __pyx_t_1 = ((__pyx_v_t > 0) != 0);
      if (!__pyx_t_1) break;

      /* "oasis.pyx":324
 *             t -= newpool.l
 *             while t > 0:
 *                 if j == 0:  # first pool             # <<<<<<<<<<<<<<
 *                     c[0] = self.P[0].v * self.d**(self.P[0].l - t)
 *                     for k in range(1, t):
 */
      __pyx_t_1 = ((__pyx_v_j == 0) != 0);
      if (__pyx_t_1) {

        /* "oasis.pyx":325
 *             while t > 0:
 *                 if j == 0:  # first pool
 *                     c[0] = self.P[0].v * self.d**(self.P[0].l - t)             # <<<<<<<<<<<<<<
 *                     for k in range(1, t):
 *                         c[k] = c[k - 1] * self.d
 */
        __pyx_t_29 = 0;
        __pyx_t_12 = -1;
        if (__pyx_t_29 < 0) {
          __pyx_t_29 += __pyx_pybuffernd_c.diminfo[0].shape;
          if (unlikely(__pyx_t_29 < 0)) __pyx_t_12 = 0;
        } else if (unlikely(__pyx_t_29 >= __pyx_pybuffernd_c.diminfo[0].shape)) __pyx_t_12 = 0;
        if (unlikely(__pyx_t_12 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_12);
          __PYX_ERR(0, 325, __pyx_L1_error)
        }
        *__Pyx_BufPtrStrided1d(__pyx_t_5oasis_SINGLE *, __pyx_pybuffernd_c.rcbuffer->pybuffer.buf, __pyx_t_29, __pyx_pybuffernd_c.diminfo[0].strides) = ((__pyx_v_self->P[0]).v * powf(__pyx_v_self->d, ((__pyx_t_5oasis_SINGLE)((__pyx_v_self->P[0]).l - __pyx_v_t))));

        /* "oasis.pyx":326
 *                 if j == 0:  # first pool
 *                     c[0] = self.P[0].v * self.d**(self.P[0].l - t)
 *                     for k in range(1, t):             # <<<<<<<<<<<<<<
 *                         c[k] = c[k - 1] * self.d
 *                 elif self.P[j].l <= t:  # safely assume t<=num=buffer<1000
 */
        __pyx_t_7 = __pyx_v_t;
        for (__pyx_t_17 = 1; __pyx_t_17 < __pyx_t_7; __pyx_t_17+=1) {
          __pyx_v_k = __pyx_t_17;

          /* "oasis.pyx":327
 *                     c[0] = self.P[0].v * self.d**(self.P[0].l - t)
 *                     for k in range(1, t):
 *                         c[k] = c[k - 1] * self.d             # <<<<<<<<<<<<<<
 *                 elif self.P[j].l <= t:  # safely assume t<=num=buffer<1000
 *                     for k in range(self.P[j].l):
 */
          __pyx_t_30 = (__pyx_v_k - 1);
          __pyx_t_12 = -1;
          if (__pyx_t_30 < 0) {
            __pyx_t_30 += __pyx_pybuffernd_c.diminfo[0].shape;
            if (unlikely(__pyx_t_30 < 0)) __pyx_t_12 = 0;
          } else if (unlikely(__pyx_t_30 >= __pyx_pybuffernd_c.diminfo[0].shape)) __pyx_t_12 = 0;
          if (unlikely(__pyx_t_12 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_12);
            __PYX_ERR(0, 327, __pyx_L1_error)
          }
          __pyx_t_31 = __pyx_v_k;
          __pyx_t_12 = -1;
          if (__pyx_t_31 < 0) {
            __pyx_t_31 += __pyx_pybuffernd_c.diminfo[0].shape;
            if (unlikely(__pyx_t_31 < 0)) __pyx_t_12 = 0;
          } else if (unlikely(__pyx_t_31 >= __pyx_pybuffernd_c.diminfo[0].shape)) __pyx_t_12 = 0;
          if (unlikely(__pyx_t_12 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_12);
            __PYX_ERR(0, 327, __pyx_L1_error)
          }
          *__Pyx_BufPtrStrided1d(__pyx_t_5oasis_SINGLE *, __pyx_pybuffernd_c.rcbuffer->pybuffer.buf, __pyx_t_31, __pyx_pybuffernd_c.diminfo[0].strides) = ((*__Pyx_BufPtrStrided1d(__pyx_t_5oasis_SINGLE *, __pyx_pybuffernd_c.rcbuffer->pybuffer.buf, __pyx_t_30, __pyx_pybuffernd_c.diminfo[0].strides)) * __pyx_v_self->d);
        }

        /* "oasis.pyx":324
 *             t -= newpool.l
 *             while t > 0:
 *                 if j == 0:  # first pool             # <<<<<<<<<<<<<<
 *                     c[0] = self.P[0].v * self.d**(self.P[0].l - t)
 *                     for k in range(1, t):
 */
        goto __pyx_L39;
      }

      /* "oasis.pyx":328
 *                     for k in range(1, t):
 *                         c[k] = c[k - 1] * self.d
 *                 elif self.P[j].l <= t:  # safely assume t<=num=buffer<1000             # <<<<<<<<<<<<<<
 *                     for k in range(self.P[j].l):
 *                         c[k + t - self.P[j].l] = self.h[k] * self.P[j].v + \
 */
      __pyx_t_1 = (((__pyx_v_self->P[__pyx_v_j]).l <= __pyx_v_t) != 0);
      if (__pyx_t_1) {

        /* "oasis.pyx":329
 *                         c[k] = c[k - 1] * self.d
 *                 elif self.P[j].l <= t:  # safely assume t<=num=buffer<1000
 *                     for k in range(self.P[j].l):             # <<<<<<<<<<<<<<
 *                         c[k + t - self.P[j].l] = self.h[k] * self.P[j].v + \
 *                             self.g12[k] * self.P[j - 1].w
 */
        __pyx_t_7 = (__pyx_v_self->P[__pyx_v_j]).l;
        for (__pyx_t_17 = 0; __pyx_t_17 < __pyx_t_7; __pyx_t_17+=1) {
          __pyx_v_k = __pyx_t_17;

          /* "oasis.pyx":330
 *                 elif self.P[j].l <= t:  # safely assume t<=num=buffer<1000
 *                     for k in range(self.P[j].l):
 *                         c[k + t - self.P[j].l] = self.h[k] * self.P[j].v + \             # <<<<<<<<<<<<<<
 *                             self.g12[k] * self.P[j - 1].w
 *                 else:
 */
          __pyx_t_32 = ((__pyx_v_k + __pyx_v_t) - (__pyx_v_self->P[__pyx_v_j]).l);
          __pyx_t_12 = -1;
          if (__pyx_t_32 < 0) {
            __pyx_t_32 += __pyx_pybuffernd_c.diminfo[0].shape;
            if (unlikely(__pyx_t_32 < 0)) __pyx_t_12 = 0;
          } else if (unlikely(__pyx_t_32 >= __pyx_pybuffernd_c.diminfo[0].shape)) __pyx_t_12 = 0;
          if (unlikely(__pyx_t_12 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_12);
            __PYX_ERR(0, 330, __pyx_L1_error)
          }
          *__Pyx_BufPtrStrided1d(__pyx_t_5oasis_SINGLE *, __pyx_pybuffernd_c.rcbuffer->pybuffer.buf, __pyx_t_32, __pyx_pybuffernd_c.diminfo[0].strides) = (((__pyx_v_self->h[__pyx_v_k]) * (__pyx_v_self->P[__pyx_v_j]).v) + ((__pyx_v_self->g12[__pyx_v_k]) * (__pyx_v_self->P[(__pyx_v_j - 1)]).w));
        }

        /* "oasis.pyx":328
 *                     for k in range(1, t):
 *                         c[k] = c[k - 1] * self.d
 *                 elif self.P[j].l <= t:  # safely assume t<=num=buffer<1000             # <<<<<<<<<<<<<<
 *                     for k in range(self.P[j].l):
 *                         c[k + t - self.P[j].l] = self.h[k] * self.P[j].v + \
 */
        goto __pyx_L39;
      }

      /* "oasis.pyx":333
 *                             self.g12[k] * self.P[j - 1].w
 *                 else:
 *                     tmp2 = 1000 - self.P[j].l + t             # <<<<<<<<<<<<<<
 *                     for k in range(t if t < tmp2 else tmp2):
 *                         c[k] = self.h[k + self.P[j].l - t] * self.P[j].v + \
 */
      /*else*/ {
        __pyx_v_tmp2 = ((0x3E8 - (__pyx_v_self->P[__pyx_v_j]).l) + __pyx_v_t);

        /* "oasis.pyx":334
 *                 else:
 *                     tmp2 = 1000 - self.P[j].l + t
 *                     for k in range(t if t < tmp2 else tmp2):             # <<<<<<<<<<<<<<
 *                         c[k] = self.h[k + self.P[j].l - t] * self.P[j].v + \
 *                             self.g12[k + self.P[j].l - t] * self.P[j - 1].w
 */
        if (((__pyx_v_t < __pyx_v_tmp2) != 0)) {
          __pyx_t_7 = __pyx_v_t;
        } else {
          __pyx_t_7 = __pyx_v_tmp2;
        }
        for (__pyx_t_17 = 0; __pyx_t_17 < __pyx_t_7; __pyx_t_17+=1) {
          __pyx_v_k = __pyx_t_17;

          /* "oasis.pyx":335
 *                     tmp2 = 1000 - self.P[j].l + t
 *                     for k in range(t if t < tmp2 else tmp2):
 *                         c[k] = self.h[k + self.P[j].l - t] * self.P[j].v + \             # <<<<<<<<<<<<<<
 *                             self.g12[k + self.P[j].l - t] * self.P[j - 1].w
 *                     # # more accurate exponential decay, but maybe simple truncation c[k]=0 suffices
 */
          __pyx_t_33 = __pyx_v_k;
          __pyx_t_12 = -1;
          if (__pyx_t_33 < 0) {
            __pyx_t_33 += __pyx_pybuffernd_c.diminfo[0].shape;
            if (unlikely(__pyx_t_33 < 0)) __pyx_t_12 = 0;
          } else if (unlikely(__pyx_t_33 >= __pyx_pybuffernd_c.diminfo[0].shape)) __pyx_t_12 = 0;
          if (unlikely(__pyx_t_12 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_12);
            __PYX_ERR(0, 335, __pyx_L1_error)
          }
          *__Pyx_BufPtrStrided1d(__pyx_t_5oasis_SINGLE *, __pyx_pybuffernd_c.rcbuffer->pybuffer.buf, __pyx_t_33, __pyx_pybuffernd_c.diminfo[0].strides) = (((__pyx_v_self->h[((__pyx_v_k + (__pyx_v_self->P[__pyx_v_j]).l) - __pyx_v_t)]) * (__pyx_v_self->P[__pyx_v_j]).v) + ((__pyx_v_self->g12[((__pyx_v_k + (__pyx_v_self->P[__pyx_v_j]).l) - __pyx_v_t)]) * (__pyx_v_self->P[(__pyx_v_j - 1)]).w));
        }
      }
      __pyx_L39:;

      /* "oasis.pyx":345
 *                     #     for k in range(tmp2, t):
 *                     #         c[k] = c[k - 1] * self.d
 *                 t -= self.P[j].l             # <<<<<<<<<<<<<<
 *                 j -= 1
 * 
 */
      __pyx_v_t = (__pyx_v_t - (__pyx_v_self->P[__pyx_v_j]).l);

      /* "oasis.pyx":346
 *                     #         c[k] = c[k - 1] * self.d
 *                 t -= self.P[j].l
 *                 j -= 1             # <<<<<<<<<<<<<<
 * 
 *         return c
 */
      __pyx_v_j = (__pyx_v_j - 1);
    }
  }
  __pyx_L3:;

  /* "oasis.pyx":348
 *                 j -= 1
 * 
 *         return c             # <<<<<<<<<<<<<<
 * 
 *     def fit(self, y):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_c));
  __pyx_r = ((PyObject *)__pyx_v_c);
  goto __pyx_L0;

  /* "oasis.pyx":201
 *                 self.P.pop_back()
 * 
 *     def fit_next_tmp(self, yt, num):             # <<<<<<<<<<<<<<
 *         """
 *         fit next time step t temporarily and return denoised calcium for last num time steps
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_10);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_c.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("oasis.OASIS.fit_next_tmp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_c.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_c);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "oasis.pyx":350
 *         return c
 * 
 *     def fit(self, y):             # <<<<<<<<<<<<<<
 *         """
 *         fit all time steps
 */

/* Python wrapper */
static PyObject *__pyx_pw_5oasis_5OASIS_7fit(PyObject *__pyx_v_self, PyObject *__pyx_v_y); /*proto*/
static char __pyx_doc_5oasis_5OASIS_6fit[] = "\n        fit all time steps\n        ";
static PyObject *__pyx_pw_5oasis_5OASIS_7fit(PyObject *__pyx_v_self, PyObject *__pyx_v_y) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fit (wrapper)", 0);
  __pyx_r = __pyx_pf_5oasis_5OASIS_6fit(((struct __pyx_obj_5oasis_OASIS *)__pyx_v_self), ((PyObject *)__pyx_v_y));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5oasis_5OASIS_6fit(struct __pyx_obj_5oasis_OASIS *__pyx_v_self, PyObject *__pyx_v_y) {
  PyObject *__pyx_v_yt = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("fit", 0);

  /* "oasis.pyx":354
 *         fit all time steps
 *         """
 *         for yt in y:             # <<<<<<<<<<<<<<
 *             self.fit_next(yt)
 *         return self
 */
  if (likely(PyList_CheckExact(__pyx_v_y)) || PyTuple_CheckExact(__pyx_v_y)) {
    __pyx_t_1 = __pyx_v_y; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_y); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 354, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 354, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 354, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 354, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 354, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 354, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 354, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_yt, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "oasis.pyx":355
 *         """
 *         for yt in y:
 *             self.fit_next(yt)             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_fit_next); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 355, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_yt); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 355, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
    } else {
      __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 355, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_INCREF(__pyx_v_yt);
      __Pyx_GIVEREF(__pyx_v_yt);
      PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_v_yt);
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 355, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "oasis.pyx":354
 *         fit all time steps
 *         """
 *         for yt in y:             # <<<<<<<<<<<<<<
 *             self.fit_next(yt)
 *         return self
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "oasis.pyx":356
 *         for yt in y:
 *             self.fit_next(yt)
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def get_c(self, num):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "oasis.pyx":350
 *         return c
 * 
 *     def fit(self, y):             # <<<<<<<<<<<<<<
 *         """
 *         fit all time steps
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("oasis.OASIS.fit", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_yt);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "oasis.pyx":358
 *         return self
 * 
 *     def get_c(self, num):             # <<<<<<<<<<<<<<
 *         """
 *         return denoised calcium for last num time steps
 */

/* Python wrapper */
static PyObject *__pyx_pw_5oasis_5OASIS_9get_c(PyObject *__pyx_v_self, PyObject *__pyx_v_num); /*proto*/
static char __pyx_doc_5oasis_5OASIS_8get_c[] = "\n        return denoised calcium for last num time steps\n        ";
static PyObject *__pyx_pw_5oasis_5OASIS_9get_c(PyObject *__pyx_v_self, PyObject *__pyx_v_num) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_c (wrapper)", 0);
  __pyx_r = __pyx_pf_5oasis_5OASIS_8get_c(((struct __pyx_obj_5oasis_OASIS *)__pyx_v_self), ((PyObject *)__pyx_v_num));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5oasis_5OASIS_8get_c(struct __pyx_obj_5oasis_OASIS *__pyx_v_self, PyObject *__pyx_v_num) {
  PyArrayObject *__pyx_v_c = 0;
  Py_ssize_t __pyx_v_t;
  Py_ssize_t __pyx_v_j;
  Py_ssize_t __pyx_v_k;
  Py_ssize_t __pyx_v_tmp2;
  __pyx_t_5oasis_SINGLE __pyx_v_tmp;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_c;
  __Pyx_Buffer __pyx_pybuffer_c;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyArrayObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  __pyx_t_5oasis_SINGLE __pyx_t_12;
  __pyx_t_5oasis_SINGLE __pyx_t_13;
  long __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  Py_ssize_t __pyx_t_17;
  Py_ssize_t __pyx_t_18;
  Py_ssize_t __pyx_t_19;
  Py_ssize_t __pyx_t_20;
  __Pyx_RefNannySetupContext("get_c", 0);
  __pyx_pybuffer_c.pybuffer.buf = NULL;
  __pyx_pybuffer_c.refcount = 0;
  __pyx_pybuffernd_c.data = NULL;
  __pyx_pybuffernd_c.rcbuffer = &__pyx_pybuffer_c;

  /* "oasis.pyx":365
 *         cdef Py_ssize_t t, j, k, tmp2
 *         cdef SINGLE tmp
 *         t = num             # <<<<<<<<<<<<<<
 *         c = np.zeros(t, dtype='float32')
 *         j = self.i
 */
  __pyx_t_1 = __Pyx_PyIndex_AsSsize_t(__pyx_v_num); if (unlikely((__pyx_t_1 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 365, __pyx_L1_error)
  __pyx_v_t = __pyx_t_1;

  /* "oasis.pyx":366
 *         cdef SINGLE tmp
 *         t = num
 *         c = np.zeros(t, dtype='float32')             # <<<<<<<<<<<<<<
 *         j = self.i
 *         if self.g2 == 0:  # AR(1)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_t); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_n_s_float32) < 0) __PYX_ERR(0, 366, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 366, __pyx_L1_error)
  __pyx_t_6 = ((PyArrayObject *)__pyx_t_5);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_c.rcbuffer->pybuffer);
    __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_7 < 0)) {
      PyErr_Fetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_v_c, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
      }
    }
    __pyx_pybuffernd_c.diminfo[0].strides = __pyx_pybuffernd_c.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_c.diminfo[0].shape = __pyx_pybuffernd_c.rcbuffer->pybuffer.shape[0];
    if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 366, __pyx_L1_error)
  }
  __pyx_t_6 = 0;
  __pyx_v_c = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "oasis.pyx":367
 *         t = num
 *         c = np.zeros(t, dtype='float32')
 *         j = self.i             # <<<<<<<<<<<<<<
 *         if self.g2 == 0:  # AR(1)
 *             while t > 0:
 */
  __pyx_t_1 = __pyx_v_self->i;
  __pyx_v_j = __pyx_t_1;

  /* "oasis.pyx":368
 *         c = np.zeros(t, dtype='float32')
 *         j = self.i
 *         if self.g2 == 0:  # AR(1)             # <<<<<<<<<<<<<<
 *             while t > 0:
 *                 tmp = fmax(self.P[j].v / self.P[j].w, 0)
 */
  __pyx_t_11 = ((__pyx_v_self->g2 == 0.0) != 0);
  if (__pyx_t_11) {

    /* "oasis.pyx":369
 *         j = self.i
 *         if self.g2 == 0:  # AR(1)
 *             while t > 0:             # <<<<<<<<<<<<<<
 *                 tmp = fmax(self.P[j].v / self.P[j].w, 0)
 *                 if self.P[j].l <= t:
 */
    while (1) {
      __pyx_t_11 = ((__pyx_v_t > 0) != 0);
      if (!__pyx_t_11) break;

      /* "oasis.pyx":370
 *         if self.g2 == 0:  # AR(1)
 *             while t > 0:
 *                 tmp = fmax(self.P[j].v / self.P[j].w, 0)             # <<<<<<<<<<<<<<
 *                 if self.P[j].l <= t:
 *                     for k in range(min1000(self.P[j].l)):
 */
      __pyx_t_12 = (__pyx_v_self->P[__pyx_v_j]).v;
      __pyx_t_13 = (__pyx_v_self->P[__pyx_v_j]).w;
      if (unlikely(__pyx_t_13 == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 370, __pyx_L1_error)
      }
      __pyx_v_tmp = fmax((__pyx_t_12 / __pyx_t_13), 0.0);

      /* "oasis.pyx":371
 *             while t > 0:
 *                 tmp = fmax(self.P[j].v / self.P[j].w, 0)
 *                 if self.P[j].l <= t:             # <<<<<<<<<<<<<<
 *                     for k in range(min1000(self.P[j].l)):
 *                         c[k + t - self.P[j].l] = tmp * self.h[k]
 */
      __pyx_t_11 = (((__pyx_v_self->P[__pyx_v_j]).l <= __pyx_v_t) != 0);
      if (__pyx_t_11) {

        /* "oasis.pyx":372
 *                 tmp = fmax(self.P[j].v / self.P[j].w, 0)
 *                 if self.P[j].l <= t:
 *                     for k in range(min1000(self.P[j].l)):             # <<<<<<<<<<<<<<
 *                         c[k + t - self.P[j].l] = tmp * self.h[k]
 *                     # # more accurate exponential decay, but maybe simple truncation suffices
 */
        __pyx_t_5 = PyInt_FromSsize_t((__pyx_v_self->P[__pyx_v_j]).l); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 372, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_2 = __pyx_f_5oasis_min1000(__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 372, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_14 = __Pyx_PyInt_As_long(__pyx_t_2); if (unlikely((__pyx_t_14 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 372, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        for (__pyx_t_1 = 0; __pyx_t_1 < __pyx_t_14; __pyx_t_1+=1) {
          __pyx_v_k = __pyx_t_1;

          /* "oasis.pyx":373
 *                 if self.P[j].l <= t:
 *                     for k in range(min1000(self.P[j].l)):
 *                         c[k + t - self.P[j].l] = tmp * self.h[k]             # <<<<<<<<<<<<<<
 *                     # # more accurate exponential decay, but maybe simple truncation suffices
 *                     # for k in range(1000 + t - self.P[j].l, t):
 */
          __pyx_t_15 = ((__pyx_v_k + __pyx_v_t) - (__pyx_v_self->P[__pyx_v_j]).l);
          __pyx_t_7 = -1;
          if (__pyx_t_15 < 0) {
            __pyx_t_15 += __pyx_pybuffernd_c.diminfo[0].shape;
            if (unlikely(__pyx_t_15 < 0)) __pyx_t_7 = 0;
          } else if (unlikely(__pyx_t_15 >= __pyx_pybuffernd_c.diminfo[0].shape)) __pyx_t_7 = 0;
          if (unlikely(__pyx_t_7 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_7);
            __PYX_ERR(0, 373, __pyx_L1_error)
          }
          *__Pyx_BufPtrStrided1d(__pyx_t_5oasis_SINGLE *, __pyx_pybuffernd_c.rcbuffer->pybuffer.buf, __pyx_t_15, __pyx_pybuffernd_c.diminfo[0].strides) = (__pyx_v_tmp * (__pyx_v_self->h[__pyx_v_k]));
        }

        /* "oasis.pyx":371
 *             while t > 0:
 *                 tmp = fmax(self.P[j].v / self.P[j].w, 0)
 *                 if self.P[j].l <= t:             # <<<<<<<<<<<<<<
 *                     for k in range(min1000(self.P[j].l)):
 *                         c[k + t - self.P[j].l] = tmp * self.h[k]
 */
        goto __pyx_L6;
      }

      /* "oasis.pyx":378
 *                     #     c[k] = c[k - 1] * self.g
 *                 else:
 *                     tmp2 = 1000 - self.P[j].l + t             # <<<<<<<<<<<<<<
 *                     for k in range(t if t < tmp2 else tmp2):
 *                         c[k] = tmp * self.h[k + self.P[j].l - t]
 */
      /*else*/ {
        __pyx_v_tmp2 = ((0x3E8 - (__pyx_v_self->P[__pyx_v_j]).l) + __pyx_v_t);

        /* "oasis.pyx":379
 *                 else:
 *                     tmp2 = 1000 - self.P[j].l + t
 *                     for k in range(t if t < tmp2 else tmp2):             # <<<<<<<<<<<<<<
 *                         c[k] = tmp * self.h[k + self.P[j].l - t]
 *                     # # more accurate exponential decay, but maybe simple truncation c[k]=0 suffices
 */
        if (((__pyx_v_t < __pyx_v_tmp2) != 0)) {
          __pyx_t_1 = __pyx_v_t;
        } else {
          __pyx_t_1 = __pyx_v_tmp2;
        }
        for (__pyx_t_16 = 0; __pyx_t_16 < __pyx_t_1; __pyx_t_16+=1) {
          __pyx_v_k = __pyx_t_16;

          /* "oasis.pyx":380
 *                     tmp2 = 1000 - self.P[j].l + t
 *                     for k in range(t if t < tmp2 else tmp2):
 *                         c[k] = tmp * self.h[k + self.P[j].l - t]             # <<<<<<<<<<<<<<
 *                     # # more accurate exponential decay, but maybe simple truncation c[k]=0 suffices
 *                     # if tmp2 <= 0:
 */
          __pyx_t_17 = __pyx_v_k;
          __pyx_t_7 = -1;
          if (__pyx_t_17 < 0) {
            __pyx_t_17 += __pyx_pybuffernd_c.diminfo[0].shape;
            if (unlikely(__pyx_t_17 < 0)) __pyx_t_7 = 0;
          } else if (unlikely(__pyx_t_17 >= __pyx_pybuffernd_c.diminfo[0].shape)) __pyx_t_7 = 0;
          if (unlikely(__pyx_t_7 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_7);
            __PYX_ERR(0, 380, __pyx_L1_error)
          }
          *__Pyx_BufPtrStrided1d(__pyx_t_5oasis_SINGLE *, __pyx_pybuffernd_c.rcbuffer->pybuffer.buf, __pyx_t_17, __pyx_pybuffernd_c.diminfo[0].strides) = (__pyx_v_tmp * (__pyx_v_self->h[((__pyx_v_k + (__pyx_v_self->P[__pyx_v_j]).l) - __pyx_v_t)]));
        }
      }
      __pyx_L6:;

      /* "oasis.pyx":389
 *                     #     for k in range(tmp2, t):
 *                     #         c[k] = c[k - 1] * self.g
 *                 t -= self.P[j].l             # <<<<<<<<<<<<<<
 *                 j -= 1
 *         else:  # AR(2)
 */
      __pyx_v_t = (__pyx_v_t - (__pyx_v_self->P[__pyx_v_j]).l);

      /* "oasis.pyx":390
 *                     #         c[k] = c[k - 1] * self.g
 *                 t -= self.P[j].l
 *                 j -= 1             # <<<<<<<<<<<<<<
 *         else:  # AR(2)
 *             while t > 0:
 */
      __pyx_v_j = (__pyx_v_j - 1);
    }

    /* "oasis.pyx":368
 *         c = np.zeros(t, dtype='float32')
 *         j = self.i
 *         if self.g2 == 0:  # AR(1)             # <<<<<<<<<<<<<<
 *             while t > 0:
 *                 tmp = fmax(self.P[j].v / self.P[j].w, 0)
 */
    goto __pyx_L3;
  }

  /* "oasis.pyx":392
 *                 j -= 1
 *         else:  # AR(2)
 *             while t > 0:             # <<<<<<<<<<<<<<
 *                 if j == 0:  # first pool
 *                     for k in range(t):
 */
  /*else*/ {
    while (1) {
      __pyx_t_11 = ((__pyx_v_t > 0) != 0);
      if (!__pyx_t_11) break;

      /* "oasis.pyx":393
 *         else:  # AR(2)
 *             while t > 0:
 *                 if j == 0:  # first pool             # <<<<<<<<<<<<<<
 *                     for k in range(t):
 *                         c[k] = self.P[0].v * self.d**(k + self.P[0].l - t)
 */
      __pyx_t_11 = ((__pyx_v_j == 0) != 0);
      if (__pyx_t_11) {

        /* "oasis.pyx":394
 *             while t > 0:
 *                 if j == 0:  # first pool
 *                     for k in range(t):             # <<<<<<<<<<<<<<
 *                         c[k] = self.P[0].v * self.d**(k + self.P[0].l - t)
 *                 elif self.P[j].l <= t:
 */
        __pyx_t_1 = __pyx_v_t;
        for (__pyx_t_16 = 0; __pyx_t_16 < __pyx_t_1; __pyx_t_16+=1) {
          __pyx_v_k = __pyx_t_16;

          /* "oasis.pyx":395
 *                 if j == 0:  # first pool
 *                     for k in range(t):
 *                         c[k] = self.P[0].v * self.d**(k + self.P[0].l - t)             # <<<<<<<<<<<<<<
 *                 elif self.P[j].l <= t:
 *                     for k in range(min1000(self.P[j].l)):
 */
          __pyx_t_18 = __pyx_v_k;
          __pyx_t_7 = -1;
          if (__pyx_t_18 < 0) {
            __pyx_t_18 += __pyx_pybuffernd_c.diminfo[0].shape;
            if (unlikely(__pyx_t_18 < 0)) __pyx_t_7 = 0;
          } else if (unlikely(__pyx_t_18 >= __pyx_pybuffernd_c.diminfo[0].shape)) __pyx_t_7 = 0;
          if (unlikely(__pyx_t_7 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_7);
            __PYX_ERR(0, 395, __pyx_L1_error)
          }
          *__Pyx_BufPtrStrided1d(__pyx_t_5oasis_SINGLE *, __pyx_pybuffernd_c.rcbuffer->pybuffer.buf, __pyx_t_18, __pyx_pybuffernd_c.diminfo[0].strides) = ((__pyx_v_self->P[0]).v * powf(__pyx_v_self->d, ((__pyx_t_5oasis_SINGLE)((__pyx_v_k + (__pyx_v_self->P[0]).l) - __pyx_v_t))));
        }

        /* "oasis.pyx":393
 *         else:  # AR(2)
 *             while t > 0:
 *                 if j == 0:  # first pool             # <<<<<<<<<<<<<<
 *                     for k in range(t):
 *                         c[k] = self.P[0].v * self.d**(k + self.P[0].l - t)
 */
        goto __pyx_L13;
      }

      /* "oasis.pyx":396
 *                     for k in range(t):
 *                         c[k] = self.P[0].v * self.d**(k + self.P[0].l - t)
 *                 elif self.P[j].l <= t:             # <<<<<<<<<<<<<<
 *                     for k in range(min1000(self.P[j].l)):
 *                         c[k + t - self.P[j].l] = self.h[k] * self.P[j].v + \
 */
      __pyx_t_11 = (((__pyx_v_self->P[__pyx_v_j]).l <= __pyx_v_t) != 0);
      if (__pyx_t_11) {

        /* "oasis.pyx":397
 *                         c[k] = self.P[0].v * self.d**(k + self.P[0].l - t)
 *                 elif self.P[j].l <= t:
 *                     for k in range(min1000(self.P[j].l)):             # <<<<<<<<<<<<<<
 *                         c[k + t - self.P[j].l] = self.h[k] * self.P[j].v + \
 *                             self.g12[k] * self.P[j - 1].w
 */
        __pyx_t_2 = PyInt_FromSsize_t((__pyx_v_self->P[__pyx_v_j]).l); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 397, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_5 = __pyx_f_5oasis_min1000(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 397, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_14 = __Pyx_PyInt_As_long(__pyx_t_5); if (unlikely((__pyx_t_14 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 397, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        for (__pyx_t_1 = 0; __pyx_t_1 < __pyx_t_14; __pyx_t_1+=1) {
          __pyx_v_k = __pyx_t_1;

          /* "oasis.pyx":398
 *                 elif self.P[j].l <= t:
 *                     for k in range(min1000(self.P[j].l)):
 *                         c[k + t - self.P[j].l] = self.h[k] * self.P[j].v + \             # <<<<<<<<<<<<<<
 *                             self.g12[k] * self.P[j - 1].w
 *                     # # more accurate exponential decay, but maybe simple truncation suffices
 */
          __pyx_t_19 = ((__pyx_v_k + __pyx_v_t) - (__pyx_v_self->P[__pyx_v_j]).l);
          __pyx_t_7 = -1;
          if (__pyx_t_19 < 0) {
            __pyx_t_19 += __pyx_pybuffernd_c.diminfo[0].shape;
            if (unlikely(__pyx_t_19 < 0)) __pyx_t_7 = 0;
          } else if (unlikely(__pyx_t_19 >= __pyx_pybuffernd_c.diminfo[0].shape)) __pyx_t_7 = 0;
          if (unlikely(__pyx_t_7 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_7);
            __PYX_ERR(0, 398, __pyx_L1_error)
          }
          *__Pyx_BufPtrStrided1d(__pyx_t_5oasis_SINGLE *, __pyx_pybuffernd_c.rcbuffer->pybuffer.buf, __pyx_t_19, __pyx_pybuffernd_c.diminfo[0].strides) = (((__pyx_v_self->h[__pyx_v_k]) * (__pyx_v_self->P[__pyx_v_j]).v) + ((__pyx_v_self->g12[__pyx_v_k]) * (__pyx_v_self->P[(__pyx_v_j - 1)]).w));
        }

        /* "oasis.pyx":396
 *                     for k in range(t):
 *                         c[k] = self.P[0].v * self.d**(k + self.P[0].l - t)
 *                 elif self.P[j].l <= t:             # <<<<<<<<<<<<<<
 *                     for k in range(min1000(self.P[j].l)):
 *                         c[k + t - self.P[j].l] = self.h[k] * self.P[j].v + \
 */
        goto __pyx_L13;
      }

      /* "oasis.pyx":404
 *                     #     c[k] = c[k - 1] * self.d
 *                 else:
 *                     tmp2 = 1000 - self.P[j].l + t             # <<<<<<<<<<<<<<
 *                     for k in range(t if t < tmp2 else tmp2):
 *                         c[k] = self.h[k + self.P[j].l - t] * self.P[j].v + \
 */
      /*else*/ {
        __pyx_v_tmp2 = ((0x3E8 - (__pyx_v_self->P[__pyx_v_j]).l) + __pyx_v_t);

        /* "oasis.pyx":405
 *                 else:
 *                     tmp2 = 1000 - self.P[j].l + t
 *                     for k in range(t if t < tmp2 else tmp2):             # <<<<<<<<<<<<<<
 *                         c[k] = self.h[k + self.P[j].l - t] * self.P[j].v + \
 *                             self.g12[k + self.P[j].l - t] * self.P[j - 1].w
 */
        if (((__pyx_v_t < __pyx_v_tmp2) != 0)) {
          __pyx_t_1 = __pyx_v_t;
        } else {
          __pyx_t_1 = __pyx_v_tmp2;
        }
        for (__pyx_t_16 = 0; __pyx_t_16 < __pyx_t_1; __pyx_t_16+=1) {
          __pyx_v_k = __pyx_t_16;

          /* "oasis.pyx":406
 *                     tmp2 = 1000 - self.P[j].l + t
 *                     for k in range(t if t < tmp2 else tmp2):
 *                         c[k] = self.h[k + self.P[j].l - t] * self.P[j].v + \             # <<<<<<<<<<<<<<
 *                             self.g12[k + self.P[j].l - t] * self.P[j - 1].w
 *                     # # more accurate exponential decay, but maybe simple truncation c[k]=0 suffices
 */
          __pyx_t_20 = __pyx_v_k;
          __pyx_t_7 = -1;
          if (__pyx_t_20 < 0) {
            __pyx_t_20 += __pyx_pybuffernd_c.diminfo[0].shape;
            if (unlikely(__pyx_t_20 < 0)) __pyx_t_7 = 0;
          } else if (unlikely(__pyx_t_20 >= __pyx_pybuffernd_c.diminfo[0].shape)) __pyx_t_7 = 0;
          if (unlikely(__pyx_t_7 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_7);
            __PYX_ERR(0, 406, __pyx_L1_error)
          }
          *__Pyx_BufPtrStrided1d(__pyx_t_5oasis_SINGLE *, __pyx_pybuffernd_c.rcbuffer->pybuffer.buf, __pyx_t_20, __pyx_pybuffernd_c.diminfo[0].strides) = (((__pyx_v_self->h[((__pyx_v_k + (__pyx_v_self->P[__pyx_v_j]).l) - __pyx_v_t)]) * (__pyx_v_self->P[__pyx_v_j]).v) + ((__pyx_v_self->g12[((__pyx_v_k + (__pyx_v_self->P[__pyx_v_j]).l) - __pyx_v_t)]) * (__pyx_v_self->P[(__pyx_v_j - 1)]).w));
        }
      }
      __pyx_L13:;

      /* "oasis.pyx":416
 *                     #     for k in range(tmp2, t):
 *                     #         c[k] = c[k - 1] * self.d
 *                 t -= self.P[j].l             # <<<<<<<<<<<<<<
 *                 j -= 1
 *         return c
 */
      __pyx_v_t = (__pyx_v_t - (__pyx_v_self->P[__pyx_v_j]).l);

      /* "oasis.pyx":417
 *                     #         c[k] = c[k - 1] * self.d
 *                 t -= self.P[j].l
 *                 j -= 1             # <<<<<<<<<<<<<<
 *         return c
 * 
 */
      __pyx_v_j = (__pyx_v_j - 1);
    }
  }
  __pyx_L3:;

  /* "oasis.pyx":418
 *                 t -= self.P[j].l
 *                 j -= 1
 *         return c             # <<<<<<<<<<<<<<
 * 
 *     def get_s(self, num):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_c));
  __pyx_r = ((PyObject *)__pyx_v_c);
  goto __pyx_L0;

  /* "oasis.pyx":358
 *         return self
 * 
 *     def get_c(self, num):             # <<<<<<<<<<<<<<
 *         """
 *         return denoised calcium for last num time steps
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_c.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("oasis.OASIS.get_c", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_c.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_c);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "oasis.pyx":420
 *         return c
 * 
 *     def get_s(self, num):             # <<<<<<<<<<<<<<
 *         """
 *         return deconvolved activity for last num time steps
 */

/* Python wrapper */
static PyObject *__pyx_pw_5oasis_5OASIS_11get_s(PyObject *__pyx_v_self, PyObject *__pyx_v_num); /*proto*/
static char __pyx_doc_5oasis_5OASIS_10get_s[] = "\n        return deconvolved activity for last num time steps\n        ";
static PyObject *__pyx_pw_5oasis_5OASIS_11get_s(PyObject *__pyx_v_self, PyObject *__pyx_v_num) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_s (wrapper)", 0);
  __pyx_r = __pyx_pf_5oasis_5OASIS_10get_s(((struct __pyx_obj_5oasis_OASIS *)__pyx_v_self), ((PyObject *)__pyx_v_num));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5oasis_5OASIS_10get_s(struct __pyx_obj_5oasis_OASIS *__pyx_v_self, PyObject *__pyx_v_num) {
  PyArrayObject *__pyx_v_s = 0;
  Py_ssize_t __pyx_v_t;
  Py_ssize_t __pyx_v_j;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_s;
  __Pyx_Buffer __pyx_pybuffer_s;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyArrayObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  __pyx_t_5oasis_SINGLE __pyx_t_12;
  __pyx_t_5oasis_SINGLE __pyx_t_13;
  __pyx_t_5oasis_SINGLE __pyx_t_14;
  __pyx_t_5oasis_SINGLE __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  Py_ssize_t __pyx_t_17;
  Py_ssize_t __pyx_t_18;
  Py_ssize_t __pyx_t_19;
  __Pyx_RefNannySetupContext("get_s", 0);
  __pyx_pybuffer_s.pybuffer.buf = NULL;
  __pyx_pybuffer_s.refcount = 0;
  __pyx_pybuffernd_s.data = NULL;
  __pyx_pybuffernd_s.rcbuffer = &__pyx_pybuffer_s;

  /* "oasis.pyx":426
 *         cdef np.ndarray[SINGLE, ndim = 1] s
 *         cdef Py_ssize_t t, j
 *         j = self.i             # <<<<<<<<<<<<<<
 *         t = num - self.P[j].l
 *         s = np.zeros(num, dtype='float32')
 */
  __pyx_t_1 = __pyx_v_self->i;
  __pyx_v_j = __pyx_t_1;

  /* "oasis.pyx":427
 *         cdef Py_ssize_t t, j
 *         j = self.i
 *         t = num - self.P[j].l             # <<<<<<<<<<<<<<
 *         s = np.zeros(num, dtype='float32')
 *         if self.g2 == 0:  # AR(1)
 */
  __pyx_t_2 = PyInt_FromSsize_t((__pyx_v_self->P[__pyx_v_j]).l); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 427, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Subtract(__pyx_v_num, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 427, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_1 = __Pyx_PyIndex_AsSsize_t(__pyx_t_3); if (unlikely((__pyx_t_1 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 427, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_t = __pyx_t_1;

  /* "oasis.pyx":428
 *         j = self.i
 *         t = num - self.P[j].l
 *         s = np.zeros(num, dtype='float32')             # <<<<<<<<<<<<<<
 *         if self.g2 == 0:  # AR(1)
 *             while t >= (1 if num == self.t else 0):
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 428, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 428, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 428, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_num);
  __Pyx_GIVEREF(__pyx_v_num);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_num);
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 428, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_n_s_float32) < 0) __PYX_ERR(0, 428, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 428, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 428, __pyx_L1_error)
  __pyx_t_6 = ((PyArrayObject *)__pyx_t_5);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_s.rcbuffer->pybuffer);
    __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_s.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_7 < 0)) {
      PyErr_Fetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_s.rcbuffer->pybuffer, (PyObject*)__pyx_v_s, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
      }
    }
    __pyx_pybuffernd_s.diminfo[0].strides = __pyx_pybuffernd_s.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_s.diminfo[0].shape = __pyx_pybuffernd_s.rcbuffer->pybuffer.shape[0];
    if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 428, __pyx_L1_error)
  }
  __pyx_t_6 = 0;
  __pyx_v_s = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "oasis.pyx":429
 *         t = num - self.P[j].l
 *         s = np.zeros(num, dtype='float32')
 *         if self.g2 == 0:  # AR(1)             # <<<<<<<<<<<<<<
 *             while t >= (1 if num == self.t else 0):
 *                 s[t] = self.P[j].v / self.P[j].w - \
 */
  __pyx_t_11 = ((__pyx_v_self->g2 == 0.0) != 0);
  if (__pyx_t_11) {

    /* "oasis.pyx":430
 *         s = np.zeros(num, dtype='float32')
 *         if self.g2 == 0:  # AR(1)
 *             while t >= (1 if num == self.t else 0):             # <<<<<<<<<<<<<<
 *                 s[t] = self.P[j].v / self.P[j].w - \
 *                     self.P[j - 1].v / self.P[j - 1].w * self.g**self.P[j - 1].l
 */
    while (1) {
      __pyx_t_5 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->t); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 430, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_num, __pyx_t_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 430, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_11 < 0)) __PYX_ERR(0, 430, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_11) {
        __pyx_t_1 = 1;
      } else {
        __pyx_t_1 = 0;
      }
      __pyx_t_11 = ((__pyx_v_t >= __pyx_t_1) != 0);
      if (!__pyx_t_11) break;

      /* "oasis.pyx":431
 *         if self.g2 == 0:  # AR(1)
 *             while t >= (1 if num == self.t else 0):
 *                 s[t] = self.P[j].v / self.P[j].w - \             # <<<<<<<<<<<<<<
 *                     self.P[j - 1].v / self.P[j - 1].w * self.g**self.P[j - 1].l
 *                 j -= 1
 */
      __pyx_t_12 = (__pyx_v_self->P[__pyx_v_j]).v;
      __pyx_t_13 = (__pyx_v_self->P[__pyx_v_j]).w;
      if (unlikely(__pyx_t_13 == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 431, __pyx_L1_error)
      }

      /* "oasis.pyx":432
 *             while t >= (1 if num == self.t else 0):
 *                 s[t] = self.P[j].v / self.P[j].w - \
 *                     self.P[j - 1].v / self.P[j - 1].w * self.g**self.P[j - 1].l             # <<<<<<<<<<<<<<
 *                 j -= 1
 *                 t -= self.P[j].l
 */
      __pyx_t_14 = (__pyx_v_self->P[(__pyx_v_j - 1)]).v;
      __pyx_t_15 = (__pyx_v_self->P[(__pyx_v_j - 1)]).w;
      if (unlikely(__pyx_t_15 == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 432, __pyx_L1_error)
      }

      /* "oasis.pyx":431
 *         if self.g2 == 0:  # AR(1)
 *             while t >= (1 if num == self.t else 0):
 *                 s[t] = self.P[j].v / self.P[j].w - \             # <<<<<<<<<<<<<<
 *                     self.P[j - 1].v / self.P[j - 1].w * self.g**self.P[j - 1].l
 *                 j -= 1
 */
      __pyx_t_16 = __pyx_v_t;
      __pyx_t_7 = -1;
      if (__pyx_t_16 < 0) {
        __pyx_t_16 += __pyx_pybuffernd_s.diminfo[0].shape;
        if (unlikely(__pyx_t_16 < 0)) __pyx_t_7 = 0;
      } else if (unlikely(__pyx_t_16 >= __pyx_pybuffernd_s.diminfo[0].shape)) __pyx_t_7 = 0;
      if (unlikely(__pyx_t_7 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_7);
        __PYX_ERR(0, 431, __pyx_L1_error)
      }
      *__Pyx_BufPtrStrided1d(__pyx_t_5oasis_SINGLE *, __pyx_pybuffernd_s.rcbuffer->pybuffer.buf, __pyx_t_16, __pyx_pybuffernd_s.diminfo[0].strides) = ((__pyx_t_12 / __pyx_t_13) - ((__pyx_t_14 / __pyx_t_15) * powf(__pyx_v_self->g, ((__pyx_t_5oasis_SINGLE)(__pyx_v_self->P[(__pyx_v_j - 1)]).l))));

      /* "oasis.pyx":433
 *                 s[t] = self.P[j].v / self.P[j].w - \
 *                     self.P[j - 1].v / self.P[j - 1].w * self.g**self.P[j - 1].l
 *                 j -= 1             # <<<<<<<<<<<<<<
 *                 t -= self.P[j].l
 *         else:  # AR(2)
 */
      __pyx_v_j = (__pyx_v_j - 1);

      /* "oasis.pyx":434
 *                     self.P[j - 1].v / self.P[j - 1].w * self.g**self.P[j - 1].l
 *                 j -= 1
 *                 t -= self.P[j].l             # <<<<<<<<<<<<<<
 *         else:  # AR(2)
 *             while t > 0:
 */
      __pyx_v_t = (__pyx_v_t - (__pyx_v_self->P[__pyx_v_j]).l);
    }

    /* "oasis.pyx":429
 *         t = num - self.P[j].l
 *         s = np.zeros(num, dtype='float32')
 *         if self.g2 == 0:  # AR(1)             # <<<<<<<<<<<<<<
 *             while t >= (1 if num == self.t else 0):
 *                 s[t] = self.P[j].v / self.P[j].w - \
 */
    goto __pyx_L3;
  }

  /* "oasis.pyx":436
 *                 t -= self.P[j].l
 *         else:  # AR(2)
 *             while t > 0:             # <<<<<<<<<<<<<<
 *                 if j > 1:
 *                     if self.P[j - 1].l >= 1000:
 */
  /*else*/ {
    while (1) {
      __pyx_t_11 = ((__pyx_v_t > 0) != 0);
      if (!__pyx_t_11) break;

      /* "oasis.pyx":437
 *         else:  # AR(2)
 *             while t > 0:
 *                 if j > 1:             # <<<<<<<<<<<<<<
 *                     if self.P[j - 1].l >= 1000:
 *                         s[t] = self.P[j].v
 */
      __pyx_t_11 = ((__pyx_v_j > 1) != 0);
      if (__pyx_t_11) {

        /* "oasis.pyx":438
 *             while t > 0:
 *                 if j > 1:
 *                     if self.P[j - 1].l >= 1000:             # <<<<<<<<<<<<<<
 *                         s[t] = self.P[j].v
 *                         # # more accurate exponential decay
 */
        __pyx_t_11 = (((__pyx_v_self->P[(__pyx_v_j - 1)]).l >= 0x3E8) != 0);
        if (__pyx_t_11) {

          /* "oasis.pyx":439
 *                 if j > 1:
 *                     if self.P[j - 1].l >= 1000:
 *                         s[t] = self.P[j].v             # <<<<<<<<<<<<<<
 *                         # # more accurate exponential decay
 *                         # s[t] = self.P[j].v - (self.d**(self.P[j - 1].l+1) /
 */
          __pyx_t_15 = (__pyx_v_self->P[__pyx_v_j]).v;
          __pyx_t_17 = __pyx_v_t;
          __pyx_t_7 = -1;
          if (__pyx_t_17 < 0) {
            __pyx_t_17 += __pyx_pybuffernd_s.diminfo[0].shape;
            if (unlikely(__pyx_t_17 < 0)) __pyx_t_7 = 0;
          } else if (unlikely(__pyx_t_17 >= __pyx_pybuffernd_s.diminfo[0].shape)) __pyx_t_7 = 0;
          if (unlikely(__pyx_t_7 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_7);
            __PYX_ERR(0, 439, __pyx_L1_error)
          }
          *__Pyx_BufPtrStrided1d(__pyx_t_5oasis_SINGLE *, __pyx_pybuffernd_s.rcbuffer->pybuffer.buf, __pyx_t_17, __pyx_pybuffernd_s.diminfo[0].strides) = __pyx_t_15;

          /* "oasis.pyx":438
 *             while t > 0:
 *                 if j > 1:
 *                     if self.P[j - 1].l >= 1000:             # <<<<<<<<<<<<<<
 *                         s[t] = self.P[j].v
 *                         # # more accurate exponential decay
 */
          goto __pyx_L9;
        }

        /* "oasis.pyx":444
 *                         #                       (self.d - self.r) * self.P[j - 1].v)
 *                     else:
 *                         s[t] = self.P[j].v - (self.h[self.P[j - 1].l] * self.P[j - 1].v +             # <<<<<<<<<<<<<<
 *                                               self.g12[self.P[j - 1].l] * self.P[j - 2].w)
 *                 else:  # j==1; spike at the beginning of 2nd pool
 */
        /*else*/ {

          /* "oasis.pyx":445
 *                     else:
 *                         s[t] = self.P[j].v - (self.h[self.P[j - 1].l] * self.P[j - 1].v +
 *                                               self.g12[self.P[j - 1].l] * self.P[j - 2].w)             # <<<<<<<<<<<<<<
 *                 else:  # j==1; spike at the beginning of 2nd pool
 *                     s[t] = (self.P[1].v - self.P[0].w * self.d)
 */
          __pyx_t_18 = __pyx_v_t;
          __pyx_t_7 = -1;
          if (__pyx_t_18 < 0) {
            __pyx_t_18 += __pyx_pybuffernd_s.diminfo[0].shape;
            if (unlikely(__pyx_t_18 < 0)) __pyx_t_7 = 0;
          } else if (unlikely(__pyx_t_18 >= __pyx_pybuffernd_s.diminfo[0].shape)) __pyx_t_7 = 0;
          if (unlikely(__pyx_t_7 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_7);
            __PYX_ERR(0, 444, __pyx_L1_error)
          }
          *__Pyx_BufPtrStrided1d(__pyx_t_5oasis_SINGLE *, __pyx_pybuffernd_s.rcbuffer->pybuffer.buf, __pyx_t_18, __pyx_pybuffernd_s.diminfo[0].strides) = ((__pyx_v_self->P[__pyx_v_j]).v - (((__pyx_v_self->h[(__pyx_v_self->P[(__pyx_v_j - 1)]).l]) * (__pyx_v_self->P[(__pyx_v_j - 1)]).v) + ((__pyx_v_self->g12[(__pyx_v_self->P[(__pyx_v_j - 1)]).l]) * (__pyx_v_self->P[(__pyx_v_j - 2)]).w)));
        }
        __pyx_L9:;

        /* "oasis.pyx":437
 *         else:  # AR(2)
 *             while t > 0:
 *                 if j > 1:             # <<<<<<<<<<<<<<
 *                     if self.P[j - 1].l >= 1000:
 *                         s[t] = self.P[j].v
 */
        goto __pyx_L8;
      }

      /* "oasis.pyx":447
 *                                               self.g12[self.P[j - 1].l] * self.P[j - 2].w)
 *                 else:  # j==1; spike at the beginning of 2nd pool
 *                     s[t] = (self.P[1].v - self.P[0].w * self.d)             # <<<<<<<<<<<<<<
 *                     return s
 *                 j -= 1
 */
      /*else*/ {
        __pyx_t_19 = __pyx_v_t;
        __pyx_t_7 = -1;
        if (__pyx_t_19 < 0) {
          __pyx_t_19 += __pyx_pybuffernd_s.diminfo[0].shape;
          if (unlikely(__pyx_t_19 < 0)) __pyx_t_7 = 0;
        } else if (unlikely(__pyx_t_19 >= __pyx_pybuffernd_s.diminfo[0].shape)) __pyx_t_7 = 0;
        if (unlikely(__pyx_t_7 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_7);
          __PYX_ERR(0, 447, __pyx_L1_error)
        }
        *__Pyx_BufPtrStrided1d(__pyx_t_5oasis_SINGLE *, __pyx_pybuffernd_s.rcbuffer->pybuffer.buf, __pyx_t_19, __pyx_pybuffernd_s.diminfo[0].strides) = ((__pyx_v_self->P[1]).v - ((__pyx_v_self->P[0]).w * __pyx_v_self->d));

        /* "oasis.pyx":448
 *                 else:  # j==1; spike at the beginning of 2nd pool
 *                     s[t] = (self.P[1].v - self.P[0].w * self.d)
 *                     return s             # <<<<<<<<<<<<<<
 *                 j -= 1
 *                 t -= self.P[j].l
 */
        __Pyx_XDECREF(__pyx_r);
        __Pyx_INCREF(((PyObject *)__pyx_v_s));
        __pyx_r = ((PyObject *)__pyx_v_s);
        goto __pyx_L0;
      }
      __pyx_L8:;

      /* "oasis.pyx":449
 *                     s[t] = (self.P[1].v - self.P[0].w * self.d)
 *                     return s
 *                 j -= 1             # <<<<<<<<<<<<<<
 *                 t -= self.P[j].l
 *         return s
 */
      __pyx_v_j = (__pyx_v_j - 1);

      /* "oasis.pyx":450
 *                     return s
 *                 j -= 1
 *                 t -= self.P[j].l             # <<<<<<<<<<<<<<
 *         return s
 * 
 */
      __pyx_v_t = (__pyx_v_t - (__pyx_v_self->P[__pyx_v_j]).l);
    }
  }
  __pyx_L3:;

  /* "oasis.pyx":451
 *                 j -= 1
 *                 t -= self.P[j].l
 *         return s             # <<<<<<<<<<<<<<
 * 
 *     def get_l_of_last_pool(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_s));
  __pyx_r = ((PyObject *)__pyx_v_s);
  goto __pyx_L0;

  /* "oasis.pyx":420
 *         return c
 * 
 *     def get_s(self, num):             # <<<<<<<<<<<<<<
 *         """
 *         return deconvolved activity for last num time steps
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_s.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("oasis.OASIS.get_s", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_s.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "oasis.pyx":453
 *         return s
 * 
 *     def get_l_of_last_pool(self):             # <<<<<<<<<<<<<<
 *         """
 *         return length of last pool
 */

/* Python wrapper */
static PyObject *__pyx_pw_5oasis_5OASIS_13get_l_of_last_pool(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5oasis_5OASIS_12get_l_of_last_pool[] = "\n        return length of last pool\n        ";
static PyObject *__pyx_pw_5oasis_5OASIS_13get_l_of_last_pool(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_l_of_last_pool (wrapper)", 0);
  __pyx_r = __pyx_pf_5oasis_5OASIS_12get_l_of_last_pool(((struct __pyx_obj_5oasis_OASIS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5oasis_5OASIS_12get_l_of_last_pool(struct __pyx_obj_5oasis_OASIS *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_l_of_last_pool", 0);

  /* "oasis.pyx":457
 *         return length of last pool
 *         """
 *         return self.P[self.i].l             # <<<<<<<<<<<<<<
 * 
 *     def get_c_of_last_pool(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromSsize_t((__pyx_v_self->P[__pyx_v_self->i]).l); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 457, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "oasis.pyx":453
 *         return s
 * 
 *     def get_l_of_last_pool(self):             # <<<<<<<<<<<<<<
 *         """
 *         return length of last pool
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("oasis.OASIS.get_l_of_last_pool", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "oasis.pyx":459
 *         return self.P[self.i].l
 * 
 *     def get_c_of_last_pool(self):             # <<<<<<<<<<<<<<
 *         """
 *         return denoised calcium of last pool, i.e. the part of c that actually changed
 */

/* Python wrapper */
static PyObject *__pyx_pw_5oasis_5OASIS_15get_c_of_last_pool(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_5oasis_5OASIS_14get_c_of_last_pool[] = "\n        return denoised calcium of last pool, i.e. the part of c that actually changed\n        ";
static PyObject *__pyx_pw_5oasis_5OASIS_15get_c_of_last_pool(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_c_of_last_pool (wrapper)", 0);
  __pyx_r = __pyx_pf_5oasis_5OASIS_14get_c_of_last_pool(((struct __pyx_obj_5oasis_OASIS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5oasis_5OASIS_14get_c_of_last_pool(struct __pyx_obj_5oasis_OASIS *__pyx_v_self) {
  PyArrayObject *__pyx_v_c = 0;
  Py_ssize_t __pyx_v_k;
  __pyx_t_5oasis_SINGLE __pyx_v_tmp;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_c;
  __Pyx_Buffer __pyx_pybuffer_c;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyArrayObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  __pyx_t_5oasis_SINGLE __pyx_t_11;
  __pyx_t_5oasis_SINGLE __pyx_t_12;
  long __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  Py_ssize_t __pyx_t_17;
  Py_ssize_t __pyx_t_18;
  Py_ssize_t __pyx_t_19;
  Py_ssize_t __pyx_t_20;
  __Pyx_RefNannySetupContext("get_c_of_last_pool", 0);
  __pyx_pybuffer_c.pybuffer.buf = NULL;
  __pyx_pybuffer_c.refcount = 0;
  __pyx_pybuffernd_c.data = NULL;
  __pyx_pybuffernd_c.rcbuffer = &__pyx_pybuffer_c;

  /* "oasis.pyx":466
 *         cdef Py_ssize_t k
 *         cdef SINGLE tmp
 *         c = np.zeros(self.P[self.i].l, dtype='float32')             # <<<<<<<<<<<<<<
 *         if self.g2 == 0:  # AR(1)
 *             tmp = self.P[self.i].v / self.P[self.i].w
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 466, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 466, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyInt_FromSsize_t((__pyx_v_self->P[__pyx_v_self->i]).l); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 466, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 466, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 466, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_n_s_float32) < 0) __PYX_ERR(0, 466, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 466, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 466, __pyx_L1_error)
  __pyx_t_5 = ((PyArrayObject *)__pyx_t_4);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_c.rcbuffer->pybuffer);
    __pyx_t_6 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_t_5, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_6 < 0)) {
      PyErr_Fetch(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_v_c, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_7); Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_7, __pyx_t_8, __pyx_t_9);
      }
    }
    __pyx_pybuffernd_c.diminfo[0].strides = __pyx_pybuffernd_c.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_c.diminfo[0].shape = __pyx_pybuffernd_c.rcbuffer->pybuffer.shape[0];
    if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 466, __pyx_L1_error)
  }
  __pyx_t_5 = 0;
  __pyx_v_c = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "oasis.pyx":467
 *         cdef SINGLE tmp
 *         c = np.zeros(self.P[self.i].l, dtype='float32')
 *         if self.g2 == 0:  # AR(1)             # <<<<<<<<<<<<<<
 *             tmp = self.P[self.i].v / self.P[self.i].w
 *             for k in range(min1000(self.P[self.i].l)):
 */
  __pyx_t_10 = ((__pyx_v_self->g2 == 0.0) != 0);
  if (__pyx_t_10) {

    /* "oasis.pyx":468
 *         c = np.zeros(self.P[self.i].l, dtype='float32')
 *         if self.g2 == 0:  # AR(1)
 *             tmp = self.P[self.i].v / self.P[self.i].w             # <<<<<<<<<<<<<<
 *             for k in range(min1000(self.P[self.i].l)):
 *                 c[k] = tmp * self.h[k]
 */
    __pyx_t_11 = (__pyx_v_self->P[__pyx_v_self->i]).v;
    __pyx_t_12 = (__pyx_v_self->P[__pyx_v_self->i]).w;
    if (unlikely(__pyx_t_12 == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 468, __pyx_L1_error)
    }
    __pyx_v_tmp = (__pyx_t_11 / __pyx_t_12);

    /* "oasis.pyx":469
 *         if self.g2 == 0:  # AR(1)
 *             tmp = self.P[self.i].v / self.P[self.i].w
 *             for k in range(min1000(self.P[self.i].l)):             # <<<<<<<<<<<<<<
 *                 c[k] = tmp * self.h[k]
 *             # # more accurate exponential decay instead truncation
 */
    __pyx_t_4 = PyInt_FromSsize_t((__pyx_v_self->P[__pyx_v_self->i]).l); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 469, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = __pyx_f_5oasis_min1000(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 469, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_13 = __Pyx_PyInt_As_long(__pyx_t_1); if (unlikely((__pyx_t_13 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 469, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    for (__pyx_t_14 = 0; __pyx_t_14 < __pyx_t_13; __pyx_t_14+=1) {
      __pyx_v_k = __pyx_t_14;

      /* "oasis.pyx":470
 *             tmp = self.P[self.i].v / self.P[self.i].w
 *             for k in range(min1000(self.P[self.i].l)):
 *                 c[k] = tmp * self.h[k]             # <<<<<<<<<<<<<<
 *             # # more accurate exponential decay instead truncation
 *             # for k in range(1000, self.P[self.i].l):
 */
      __pyx_t_15 = __pyx_v_k;
      __pyx_t_6 = -1;
      if (__pyx_t_15 < 0) {
        __pyx_t_15 += __pyx_pybuffernd_c.diminfo[0].shape;
        if (unlikely(__pyx_t_15 < 0)) __pyx_t_6 = 0;
      } else if (unlikely(__pyx_t_15 >= __pyx_pybuffernd_c.diminfo[0].shape)) __pyx_t_6 = 0;
      if (unlikely(__pyx_t_6 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_6);
        __PYX_ERR(0, 470, __pyx_L1_error)
      }
      *__Pyx_BufPtrStrided1d(__pyx_t_5oasis_SINGLE *, __pyx_pybuffernd_c.rcbuffer->pybuffer.buf, __pyx_t_15, __pyx_pybuffernd_c.diminfo[0].strides) = (__pyx_v_tmp * (__pyx_v_self->h[__pyx_v_k]));
    }

    /* "oasis.pyx":467
 *         cdef SINGLE tmp
 *         c = np.zeros(self.P[self.i].l, dtype='float32')
 *         if self.g2 == 0:  # AR(1)             # <<<<<<<<<<<<<<
 *             tmp = self.P[self.i].v / self.P[self.i].w
 *             for k in range(min1000(self.P[self.i].l)):
 */
    goto __pyx_L3;
  }

  /* "oasis.pyx":475
 *             #     c[k] = c[k - 1] * self.g
 *         else:  # AR(2)
 *             if self.i == 0:  # first pool             # <<<<<<<<<<<<<<
 *                 c[0] = self.P[0].v
 *                 for k in range(1, self.P[0].l):
 */
  /*else*/ {
    __pyx_t_10 = ((__pyx_v_self->i == 0) != 0);
    if (__pyx_t_10) {

      /* "oasis.pyx":476
 *         else:  # AR(2)
 *             if self.i == 0:  # first pool
 *                 c[0] = self.P[0].v             # <<<<<<<<<<<<<<
 *                 for k in range(1, self.P[0].l):
 *                     c[k] = c[k - 1] * self.d
 */
      __pyx_t_12 = (__pyx_v_self->P[0]).v;
      __pyx_t_16 = 0;
      __pyx_t_6 = -1;
      if (__pyx_t_16 < 0) {
        __pyx_t_16 += __pyx_pybuffernd_c.diminfo[0].shape;
        if (unlikely(__pyx_t_16 < 0)) __pyx_t_6 = 0;
      } else if (unlikely(__pyx_t_16 >= __pyx_pybuffernd_c.diminfo[0].shape)) __pyx_t_6 = 0;
      if (unlikely(__pyx_t_6 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_6);
        __PYX_ERR(0, 476, __pyx_L1_error)
      }
      *__Pyx_BufPtrStrided1d(__pyx_t_5oasis_SINGLE *, __pyx_pybuffernd_c.rcbuffer->pybuffer.buf, __pyx_t_16, __pyx_pybuffernd_c.diminfo[0].strides) = __pyx_t_12;

      /* "oasis.pyx":477
 *             if self.i == 0:  # first pool
 *                 c[0] = self.P[0].v
 *                 for k in range(1, self.P[0].l):             # <<<<<<<<<<<<<<
 *                     c[k] = c[k - 1] * self.d
 *             else:
 */
      __pyx_t_14 = (__pyx_v_self->P[0]).l;
      for (__pyx_t_17 = 1; __pyx_t_17 < __pyx_t_14; __pyx_t_17+=1) {
        __pyx_v_k = __pyx_t_17;

        /* "oasis.pyx":478
 *                 c[0] = self.P[0].v
 *                 for k in range(1, self.P[0].l):
 *                     c[k] = c[k - 1] * self.d             # <<<<<<<<<<<<<<
 *             else:
 *                 for k in range(min1000(self.P[self.i].l)):
 */
        __pyx_t_18 = (__pyx_v_k - 1);
        __pyx_t_6 = -1;
        if (__pyx_t_18 < 0) {
          __pyx_t_18 += __pyx_pybuffernd_c.diminfo[0].shape;
          if (unlikely(__pyx_t_18 < 0)) __pyx_t_6 = 0;
        } else if (unlikely(__pyx_t_18 >= __pyx_pybuffernd_c.diminfo[0].shape)) __pyx_t_6 = 0;
        if (unlikely(__pyx_t_6 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_6);
          __PYX_ERR(0, 478, __pyx_L1_error)
        }
        __pyx_t_19 = __pyx_v_k;
        __pyx_t_6 = -1;
        if (__pyx_t_19 < 0) {
          __pyx_t_19 += __pyx_pybuffernd_c.diminfo[0].shape;
          if (unlikely(__pyx_t_19 < 0)) __pyx_t_6 = 0;
        } else if (unlikely(__pyx_t_19 >= __pyx_pybuffernd_c.diminfo[0].shape)) __pyx_t_6 = 0;
        if (unlikely(__pyx_t_6 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_6);
          __PYX_ERR(0, 478, __pyx_L1_error)
        }
        *__Pyx_BufPtrStrided1d(__pyx_t_5oasis_SINGLE *, __pyx_pybuffernd_c.rcbuffer->pybuffer.buf, __pyx_t_19, __pyx_pybuffernd_c.diminfo[0].strides) = ((*__Pyx_BufPtrStrided1d(__pyx_t_5oasis_SINGLE *, __pyx_pybuffernd_c.rcbuffer->pybuffer.buf, __pyx_t_18, __pyx_pybuffernd_c.diminfo[0].strides)) * __pyx_v_self->d);
      }

      /* "oasis.pyx":475
 *             #     c[k] = c[k - 1] * self.g
 *         else:  # AR(2)
 *             if self.i == 0:  # first pool             # <<<<<<<<<<<<<<
 *                 c[0] = self.P[0].v
 *                 for k in range(1, self.P[0].l):
 */
      goto __pyx_L6;
    }

    /* "oasis.pyx":480
 *                     c[k] = c[k - 1] * self.d
 *             else:
 *                 for k in range(min1000(self.P[self.i].l)):             # <<<<<<<<<<<<<<
 *                     c[k] = self.h[k] * self.P[self.i].v + self.g12[k] * self.P[self.i - 1].w
 *                 # # more accurate exponential decay instead truncation
 */
    /*else*/ {
      __pyx_t_1 = PyInt_FromSsize_t((__pyx_v_self->P[__pyx_v_self->i]).l); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 480, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_4 = __pyx_f_5oasis_min1000(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 480, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_13 = __Pyx_PyInt_As_long(__pyx_t_4); if (unlikely((__pyx_t_13 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 480, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      for (__pyx_t_14 = 0; __pyx_t_14 < __pyx_t_13; __pyx_t_14+=1) {
        __pyx_v_k = __pyx_t_14;

        /* "oasis.pyx":481
 *             else:
 *                 for k in range(min1000(self.P[self.i].l)):
 *                     c[k] = self.h[k] * self.P[self.i].v + self.g12[k] * self.P[self.i - 1].w             # <<<<<<<<<<<<<<
 *                 # # more accurate exponential decay instead truncation
 *                 # for k in range(1000, self.P[self.i].l):
 */
        __pyx_t_20 = __pyx_v_k;
        __pyx_t_6 = -1;
        if (__pyx_t_20 < 0) {
          __pyx_t_20 += __pyx_pybuffernd_c.diminfo[0].shape;
          if (unlikely(__pyx_t_20 < 0)) __pyx_t_6 = 0;
        } else if (unlikely(__pyx_t_20 >= __pyx_pybuffernd_c.diminfo[0].shape)) __pyx_t_6 = 0;
        if (unlikely(__pyx_t_6 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_6);
          __PYX_ERR(0, 481, __pyx_L1_error)
        }
        *__Pyx_BufPtrStrided1d(__pyx_t_5oasis_SINGLE *, __pyx_pybuffernd_c.rcbuffer->pybuffer.buf, __pyx_t_20, __pyx_pybuffernd_c.diminfo[0].strides) = (((__pyx_v_self->h[__pyx_v_k]) * (__pyx_v_self->P[__pyx_v_self->i]).v) + ((__pyx_v_self->g12[__pyx_v_k]) * (__pyx_v_self->P[(__pyx_v_self->i - 1)]).w));
      }
    }
    __pyx_L6:;
  }
  __pyx_L3:;

  /* "oasis.pyx":485
 *                 # for k in range(1000, self.P[self.i].l):
 *                 #     c[k] = c[k - 1] * self.d
 *         return c             # <<<<<<<<<<<<<<
 * 
 *     def remove_last_pool(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_c));
  __pyx_r = ((PyObject *)__pyx_v_c);
  goto __pyx_L0;

  /* "oasis.pyx":459
 *         return self.P[self.i].l
 * 
 *     def get_c_of_last_pool(self):             # <<<<<<<<<<<<<<
 *         """
 *         return denoised calcium of last pool, i.e. the part of c that actually changed
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_c.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("oasis.OASIS.get_c_of_last_pool", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_c.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_c);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "oasis.pyx":487
 *         return c
 * 
 *     def remove_last_pool(self):             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t k
 *         self.t -= self.P[self.i].l
 */

/* Python wrapper */
static PyObject *__pyx_pw_5oasis_5OASIS_17remove_last_pool(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_5oasis_5OASIS_17remove_last_pool(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("remove_last_pool (wrapper)", 0);
  __pyx_r = __pyx_pf_5oasis_5OASIS_16remove_last_pool(((struct __pyx_obj_5oasis_OASIS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5oasis_5OASIS_16remove_last_pool(struct __pyx_obj_5oasis_OASIS *__pyx_v_self) {
  CYTHON_UNUSED Py_ssize_t __pyx_v_k;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  __Pyx_RefNannySetupContext("remove_last_pool", 0);

  /* "oasis.pyx":489
 *     def remove_last_pool(self):
 *         cdef Py_ssize_t k
 *         self.t -= self.P[self.i].l             # <<<<<<<<<<<<<<
 *         if self.g2 != 0:
 *             for k in range(self.P[self.i].l):
 */
  __pyx_v_self->t = (__pyx_v_self->t - (__pyx_v_self->P[__pyx_v_self->i]).l);

  /* "oasis.pyx":490
 *         cdef Py_ssize_t k
 *         self.t -= self.P[self.i].l
 *         if self.g2 != 0:             # <<<<<<<<<<<<<<
 *             for k in range(self.P[self.i].l):
 *                 self._y.pop_back()
 */
  __pyx_t_1 = ((__pyx_v_self->g2 != 0.0) != 0);
  if (__pyx_t_1) {

    /* "oasis.pyx":491
 *         self.t -= self.P[self.i].l
 *         if self.g2 != 0:
 *             for k in range(self.P[self.i].l):             # <<<<<<<<<<<<<<
 *                 self._y.pop_back()
 *         self.i -= 1
 */
    __pyx_t_2 = (__pyx_v_self->P[__pyx_v_self->i]).l;
    for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
      __pyx_v_k = __pyx_t_3;

      /* "oasis.pyx":492
 *         if self.g2 != 0:
 *             for k in range(self.P[self.i].l):
 *                 self._y.pop_back()             # <<<<<<<<<<<<<<
 *         self.i -= 1
 *         self.P.pop_back()
 */
      __pyx_v_self->_y.pop_back();
    }

    /* "oasis.pyx":490
 *         cdef Py_ssize_t k
 *         self.t -= self.P[self.i].l
 *         if self.g2 != 0:             # <<<<<<<<<<<<<<
 *             for k in range(self.P[self.i].l):
 *                 self._y.pop_back()
 */
  }

  /* "oasis.pyx":493
 *             for k in range(self.P[self.i].l):
 *                 self._y.pop_back()
 *         self.i -= 1             # <<<<<<<<<<<<<<
 *         self.P.pop_back()
 * 
 */
  __pyx_v_self->i = (__pyx_v_self->i - 1);

  /* "oasis.pyx":494
 *                 self._y.pop_back()
 *         self.i -= 1
 *         self.P.pop_back()             # <<<<<<<<<<<<<<
 * 
 *     def get_l_of_pool(self, idx_from_end=0):
 */
  __pyx_v_self->P.pop_back();

  /* "oasis.pyx":487
 *         return c
 * 
 *     def remove_last_pool(self):             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t k
 *         self.t -= self.P[self.i].l
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "oasis.pyx":496
 *         self.P.pop_back()
 * 
 *     def get_l_of_pool(self, idx_from_end=0):             # <<<<<<<<<<<<<<
 *         return self.P[self.i - idx_from_end].l
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5oasis_5OASIS_19get_l_of_pool(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5oasis_5OASIS_19get_l_of_pool(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_idx_from_end = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_l_of_pool (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_idx_from_end,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_idx_from_end);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "get_l_of_pool") < 0)) __PYX_ERR(0, 496, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_idx_from_end = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_l_of_pool", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 496, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("oasis.OASIS.get_l_of_pool", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5oasis_5OASIS_18get_l_of_pool(((struct __pyx_obj_5oasis_OASIS *)__pyx_v_self), __pyx_v_idx_from_end);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5oasis_5OASIS_18get_l_of_pool(struct __pyx_obj_5oasis_OASIS *__pyx_v_self, PyObject *__pyx_v_idx_from_end) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  size_t __pyx_t_3;
  __Pyx_RefNannySetupContext("get_l_of_pool", 0);

  /* "oasis.pyx":497
 * 
 *     def get_l_of_pool(self, idx_from_end=0):
 *         return self.P[self.i - idx_from_end].l             # <<<<<<<<<<<<<<
 * 
 *     def set_poolvalue(self, val, idx_from_end=0):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_self->i); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 497, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Subtract(__pyx_t_1, __pyx_v_idx_from_end); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 497, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyInt_As_size_t(__pyx_t_2); if (unlikely((__pyx_t_3 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 497, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyInt_FromSsize_t((__pyx_v_self->P[__pyx_t_3]).l); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 497, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "oasis.pyx":496
 *         self.P.pop_back()
 * 
 *     def get_l_of_pool(self, idx_from_end=0):             # <<<<<<<<<<<<<<
 *         return self.P[self.i - idx_from_end].l
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("oasis.OASIS.get_l_of_pool", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "oasis.pyx":499
 *         return self.P[self.i - idx_from_end].l
 * 
 *     def set_poolvalue(self, val, idx_from_end=0):             # <<<<<<<<<<<<<<
 *         self.P[self.i - idx_from_end].v = val
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5oasis_5OASIS_21set_poolvalue(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_5oasis_5OASIS_21set_poolvalue(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_val = 0;
  PyObject *__pyx_v_idx_from_end = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_poolvalue (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_val,&__pyx_n_s_idx_from_end,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_val)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_idx_from_end);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "set_poolvalue") < 0)) __PYX_ERR(0, 499, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_val = values[0];
    __pyx_v_idx_from_end = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_poolvalue", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 499, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("oasis.OASIS.set_poolvalue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5oasis_5OASIS_20set_poolvalue(((struct __pyx_obj_5oasis_OASIS *)__pyx_v_self), __pyx_v_val, __pyx_v_idx_from_end);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5oasis_5OASIS_20set_poolvalue(struct __pyx_obj_5oasis_OASIS *__pyx_v_self, PyObject *__pyx_v_val, PyObject *__pyx_v_idx_from_end) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __pyx_t_5oasis_SINGLE __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  size_t __pyx_t_4;
  __Pyx_RefNannySetupContext("set_poolvalue", 0);

  /* "oasis.pyx":500
 * 
 *     def set_poolvalue(self, val, idx_from_end=0):
 *         self.P[self.i - idx_from_end].v = val             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_1 = __pyx_PyFloat_AsFloat(__pyx_v_val); if (unlikely((__pyx_t_1 == (npy_float32)-1) && PyErr_Occurred())) __PYX_ERR(0, 500, __pyx_L1_error)
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_self->i); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 500, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Subtract(__pyx_t_2, __pyx_v_idx_from_end); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 500, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_size_t(__pyx_t_3); if (unlikely((__pyx_t_4 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 500, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  (__pyx_v_self->P[__pyx_t_4]).v = __pyx_t_1;

  /* "oasis.pyx":499
 *         return self.P[self.i - idx_from_end].l
 * 
 *     def set_poolvalue(self, val, idx_from_end=0):             # <<<<<<<<<<<<<<
 *         self.P[self.i - idx_from_end].v = val
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("oasis.OASIS.set_poolvalue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "oasis.pyx":503
 * 
 *     @property
 *     def P(self):             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t j
 *         tmp = []
 */

/* Python wrapper */
static PyObject *__pyx_pw_5oasis_5OASIS_1P_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5oasis_5OASIS_1P_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5oasis_5OASIS_1P___get__(((struct __pyx_obj_5oasis_OASIS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5oasis_5OASIS_1P___get__(struct __pyx_obj_5oasis_OASIS *__pyx_v_self) {
  Py_ssize_t __pyx_v_j;
  PyObject *__pyx_v_tmp = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "oasis.pyx":505
 *     def P(self):
 *         cdef Py_ssize_t j
 *         tmp = []             # <<<<<<<<<<<<<<
 *         for j in range(self.i+1):
 *             tmp.append([self.P[j].v, self.P[j].w, self.P[j].t, self.P[j].l])
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 505, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_tmp = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "oasis.pyx":506
 *         cdef Py_ssize_t j
 *         tmp = []
 *         for j in range(self.i+1):             # <<<<<<<<<<<<<<
 *             tmp.append([self.P[j].v, self.P[j].w, self.P[j].t, self.P[j].l])
 *         return tmp
 */
  __pyx_t_2 = (__pyx_v_self->i + 1);
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_j = __pyx_t_3;

    /* "oasis.pyx":507
 *         tmp = []
 *         for j in range(self.i+1):
 *             tmp.append([self.P[j].v, self.P[j].w, self.P[j].t, self.P[j].l])             # <<<<<<<<<<<<<<
 *         return tmp
 * 
 */
    __pyx_t_1 = PyFloat_FromDouble((__pyx_v_self->P[__pyx_v_j]).v); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 507, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PyFloat_FromDouble((__pyx_v_self->P[__pyx_v_j]).w); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 507, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyInt_FromSsize_t((__pyx_v_self->P[__pyx_v_j]).t); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 507, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyInt_FromSsize_t((__pyx_v_self->P[__pyx_v_j]).l); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 507, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyList_New(4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 507, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_1);
    PyList_SET_ITEM(__pyx_t_7, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_4);
    PyList_SET_ITEM(__pyx_t_7, 1, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyList_SET_ITEM(__pyx_t_7, 2, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_6);
    PyList_SET_ITEM(__pyx_t_7, 3, __pyx_t_6);
    __pyx_t_1 = 0;
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_t_6 = 0;
    __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_tmp, __pyx_t_7); if (unlikely(__pyx_t_8 == -1)) __PYX_ERR(0, 507, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }

  /* "oasis.pyx":508
 *         for j in range(self.i+1):
 *             tmp.append([self.P[j].v, self.P[j].w, self.P[j].t, self.P[j].l])
 *         return tmp             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_tmp);
  __pyx_r = __pyx_v_tmp;
  goto __pyx_L0;

  /* "oasis.pyx":503
 * 
 *     @property
 *     def P(self):             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t j
 *         tmp = []
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("oasis.OASIS.P.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tmp);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "oasis.pyx":511
 * 
 *     @property
 *     def g(self):             # <<<<<<<<<<<<<<
 *         return self.g
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5oasis_5OASIS_1g_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5oasis_5OASIS_1g_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5oasis_5OASIS_1g___get__(((struct __pyx_obj_5oasis_OASIS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5oasis_5OASIS_1g___get__(struct __pyx_obj_5oasis_OASIS *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "oasis.pyx":512
 *     @property
 *     def g(self):
 *         return self.g             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->g); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 512, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "oasis.pyx":511
 * 
 *     @property
 *     def g(self):             # <<<<<<<<<<<<<<
 *         return self.g
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("oasis.OASIS.g.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "oasis.pyx":515
 * 
 *     @property
 *     def g2(self):             # <<<<<<<<<<<<<<
 *         return self.g2
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5oasis_5OASIS_2g2_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5oasis_5OASIS_2g2_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5oasis_5OASIS_2g2___get__(((struct __pyx_obj_5oasis_OASIS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5oasis_5OASIS_2g2___get__(struct __pyx_obj_5oasis_OASIS *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "oasis.pyx":516
 *     @property
 *     def g2(self):
 *         return self.g2             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->g2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 516, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "oasis.pyx":515
 * 
 *     @property
 *     def g2(self):             # <<<<<<<<<<<<<<
 *         return self.g2
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("oasis.OASIS.g2.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "oasis.pyx":519
 * 
 *     @property
 *     def lam(self):             # <<<<<<<<<<<<<<
 *         return self.lam
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5oasis_5OASIS_3lam_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5oasis_5OASIS_3lam_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5oasis_5OASIS_3lam___get__(((struct __pyx_obj_5oasis_OASIS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5oasis_5OASIS_3lam___get__(struct __pyx_obj_5oasis_OASIS *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "oasis.pyx":520
 *     @property
 *     def lam(self):
 *         return self.lam             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->lam); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 520, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "oasis.pyx":519
 * 
 *     @property
 *     def lam(self):             # <<<<<<<<<<<<<<
 *         return self.lam
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("oasis.OASIS.lam.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "oasis.pyx":523
 * 
 *     @property
 *     def s_min(self):             # <<<<<<<<<<<<<<
 *         return self.s_min
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5oasis_5OASIS_5s_min_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5oasis_5OASIS_5s_min_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5oasis_5OASIS_5s_min___get__(((struct __pyx_obj_5oasis_OASIS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5oasis_5OASIS_5s_min___get__(struct __pyx_obj_5oasis_OASIS *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "oasis.pyx":524
 *     @property
 *     def s_min(self):
 *         return self.s_min             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->s_min); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 524, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "oasis.pyx":523
 * 
 *     @property
 *     def s_min(self):             # <<<<<<<<<<<<<<
 *         return self.s_min
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("oasis.OASIS.s_min.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "oasis.pyx":527
 * 
 *     @property
 *     def b(self):             # <<<<<<<<<<<<<<
 *         return self.b
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5oasis_5OASIS_1b_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5oasis_5OASIS_1b_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5oasis_5OASIS_1b___get__(((struct __pyx_obj_5oasis_OASIS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5oasis_5OASIS_1b___get__(struct __pyx_obj_5oasis_OASIS *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "oasis.pyx":528
 *     @property
 *     def b(self):
 *         return self.b             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->b); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 528, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "oasis.pyx":527
 * 
 *     @property
 *     def b(self):             # <<<<<<<<<<<<<<
 *         return self.b
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("oasis.OASIS.b.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "oasis.pyx":531
 * 
 *     @property
 *     def t(self):             # <<<<<<<<<<<<<<
 *         return self.t
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5oasis_5OASIS_1t_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5oasis_5OASIS_1t_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5oasis_5OASIS_1t___get__(((struct __pyx_obj_5oasis_OASIS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5oasis_5OASIS_1t___get__(struct __pyx_obj_5oasis_OASIS *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "oasis.pyx":532
 *     @property
 *     def t(self):
 *         return self.t             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->t); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 532, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "oasis.pyx":531
 * 
 *     @property
 *     def t(self):             # <<<<<<<<<<<<<<
 *         return self.t
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("oasis.OASIS.t.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "oasis.pyx":535
 * 
 *     @property
 *     def c(self):             # <<<<<<<<<<<<<<
 *         """
 *         construct and return full calcium trace
 */

/* Python wrapper */
static PyObject *__pyx_pw_5oasis_5OASIS_1c_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5oasis_5OASIS_1c_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5oasis_5OASIS_1c___get__(((struct __pyx_obj_5oasis_OASIS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5oasis_5OASIS_1c___get__(struct __pyx_obj_5oasis_OASIS *__pyx_v_self) {
  PyArrayObject *__pyx_v_c = 0;
  Py_ssize_t __pyx_v_j;
  Py_ssize_t __pyx_v_k;
  __pyx_t_5oasis_SINGLE __pyx_v_tmp;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_c;
  __Pyx_Buffer __pyx_pybuffer_c;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyArrayObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  Py_ssize_t __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  double __pyx_t_13;
  __pyx_t_5oasis_SINGLE __pyx_t_14;
  long __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  Py_ssize_t __pyx_t_17;
  Py_ssize_t __pyx_t_18;
  Py_ssize_t __pyx_t_19;
  Py_ssize_t __pyx_t_20;
  Py_ssize_t __pyx_t_21;
  __Pyx_RefNannySetupContext("__get__", 0);
  __pyx_pybuffer_c.pybuffer.buf = NULL;
  __pyx_pybuffer_c.refcount = 0;
  __pyx_pybuffernd_c.data = NULL;
  __pyx_pybuffernd_c.rcbuffer = &__pyx_pybuffer_c;

  /* "oasis.pyx":542
 *         cdef Py_ssize_t j, k
 *         cdef SINGLE tmp
 *         if self.g2 == 0:  # AR(1)             # <<<<<<<<<<<<<<
 *             c = np.zeros(self.P[self.i].t + self.P[self.i].l, dtype='float32')
 *             for j in range(self.i + 1):
 */
  __pyx_t_1 = ((__pyx_v_self->g2 == 0.0) != 0);
  if (__pyx_t_1) {

    /* "oasis.pyx":543
 *         cdef SINGLE tmp
 *         if self.g2 == 0:  # AR(1)
 *             c = np.zeros(self.P[self.i].t + self.P[self.i].l, dtype='float32')             # <<<<<<<<<<<<<<
 *             for j in range(self.i + 1):
 *                 tmp = fmax(self.P[j].v, 0) / self.P[j].w
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 543, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 543, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyInt_FromSsize_t(((__pyx_v_self->P[__pyx_v_self->i]).t + (__pyx_v_self->P[__pyx_v_self->i]).l)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 543, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 543, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 543, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_n_s_float32) < 0) __PYX_ERR(0, 543, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 543, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 543, __pyx_L1_error)
    __pyx_t_6 = ((PyArrayObject *)__pyx_t_5);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_c.rcbuffer->pybuffer);
      __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack);
      if (unlikely(__pyx_t_7 < 0)) {
        PyErr_Fetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_v_c, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
        }
      }
      __pyx_pybuffernd_c.diminfo[0].strides = __pyx_pybuffernd_c.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_c.diminfo[0].shape = __pyx_pybuffernd_c.rcbuffer->pybuffer.shape[0];
      if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 543, __pyx_L1_error)
    }
    __pyx_t_6 = 0;
    __pyx_v_c = ((PyArrayObject *)__pyx_t_5);
    __pyx_t_5 = 0;

    /* "oasis.pyx":544
 *         if self.g2 == 0:  # AR(1)
 *             c = np.zeros(self.P[self.i].t + self.P[self.i].l, dtype='float32')
 *             for j in range(self.i + 1):             # <<<<<<<<<<<<<<
 *                 tmp = fmax(self.P[j].v, 0) / self.P[j].w
 *                 for k in range(min1000(self.P[j].l)):
 */
    __pyx_t_11 = (__pyx_v_self->i + 1);
    for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_11; __pyx_t_12+=1) {
      __pyx_v_j = __pyx_t_12;

      /* "oasis.pyx":545
 *             c = np.zeros(self.P[self.i].t + self.P[self.i].l, dtype='float32')
 *             for j in range(self.i + 1):
 *                 tmp = fmax(self.P[j].v, 0) / self.P[j].w             # <<<<<<<<<<<<<<
 *                 for k in range(min1000(self.P[j].l)):
 *                     c[k + self.P[j].t] = tmp * self.h[k]
 */
      __pyx_t_13 = fmax((__pyx_v_self->P[__pyx_v_j]).v, 0.0);
      __pyx_t_14 = (__pyx_v_self->P[__pyx_v_j]).w;
      if (unlikely(__pyx_t_14 == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 545, __pyx_L1_error)
      }
      __pyx_v_tmp = (__pyx_t_13 / __pyx_t_14);

      /* "oasis.pyx":546
 *             for j in range(self.i + 1):
 *                 tmp = fmax(self.P[j].v, 0) / self.P[j].w
 *                 for k in range(min1000(self.P[j].l)):             # <<<<<<<<<<<<<<
 *                     c[k + self.P[j].t] = tmp * self.h[k]
 *                 # # more accurate exponential decay instead truncation
 */
      __pyx_t_5 = PyInt_FromSsize_t((__pyx_v_self->P[__pyx_v_j]).l); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 546, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_2 = __pyx_f_5oasis_min1000(__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 546, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_15 = __Pyx_PyInt_As_long(__pyx_t_2); if (unlikely((__pyx_t_15 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 546, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      for (__pyx_t_16 = 0; __pyx_t_16 < __pyx_t_15; __pyx_t_16+=1) {
        __pyx_v_k = __pyx_t_16;

        /* "oasis.pyx":547
 *                 tmp = fmax(self.P[j].v, 0) / self.P[j].w
 *                 for k in range(min1000(self.P[j].l)):
 *                     c[k + self.P[j].t] = tmp * self.h[k]             # <<<<<<<<<<<<<<
 *                 # # more accurate exponential decay instead truncation
 *                 # for k in range(1000, self.P[j].l):
 */
        __pyx_t_17 = (__pyx_v_k + (__pyx_v_self->P[__pyx_v_j]).t);
        __pyx_t_7 = -1;
        if (__pyx_t_17 < 0) {
          __pyx_t_17 += __pyx_pybuffernd_c.diminfo[0].shape;
          if (unlikely(__pyx_t_17 < 0)) __pyx_t_7 = 0;
        } else if (unlikely(__pyx_t_17 >= __pyx_pybuffernd_c.diminfo[0].shape)) __pyx_t_7 = 0;
        if (unlikely(__pyx_t_7 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_7);
          __PYX_ERR(0, 547, __pyx_L1_error)
        }
        *__Pyx_BufPtrStrided1d(__pyx_t_5oasis_SINGLE *, __pyx_pybuffernd_c.rcbuffer->pybuffer.buf, __pyx_t_17, __pyx_pybuffernd_c.diminfo[0].strides) = (__pyx_v_tmp * (__pyx_v_self->h[__pyx_v_k]));
      }
    }

    /* "oasis.pyx":551
 *                 # for k in range(1000, self.P[j].l):
 *                 #     c[k + self.P[j].t] = tmp * self.g**k
 *             return c             # <<<<<<<<<<<<<<
 *         else:  # AR(2)
 *             c = np.zeros(self.P[self.i].t + self.P[self.i].l, dtype='float32')
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_c));
    __pyx_r = ((PyObject *)__pyx_v_c);
    goto __pyx_L0;

    /* "oasis.pyx":542
 *         cdef Py_ssize_t j, k
 *         cdef SINGLE tmp
 *         if self.g2 == 0:  # AR(1)             # <<<<<<<<<<<<<<
 *             c = np.zeros(self.P[self.i].t + self.P[self.i].l, dtype='float32')
 *             for j in range(self.i + 1):
 */
  }

  /* "oasis.pyx":553
 *             return c
 *         else:  # AR(2)
 *             c = np.zeros(self.P[self.i].t + self.P[self.i].l, dtype='float32')             # <<<<<<<<<<<<<<
 *             # first pool
 *             c[0] = self.P[0].v
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 553, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 553, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyInt_FromSsize_t(((__pyx_v_self->P[__pyx_v_self->i]).t + (__pyx_v_self->P[__pyx_v_self->i]).l)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 553, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 553, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 553, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_n_s_float32) < 0) __PYX_ERR(0, 553, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 553, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 553, __pyx_L1_error)
    __pyx_t_6 = ((PyArrayObject *)__pyx_t_3);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_c.rcbuffer->pybuffer);
      __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack);
      if (unlikely(__pyx_t_7 < 0)) {
        PyErr_Fetch(&__pyx_t_10, &__pyx_t_9, &__pyx_t_8);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_v_c, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_8);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_10, __pyx_t_9, __pyx_t_8);
        }
      }
      __pyx_pybuffernd_c.diminfo[0].strides = __pyx_pybuffernd_c.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_c.diminfo[0].shape = __pyx_pybuffernd_c.rcbuffer->pybuffer.shape[0];
      if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 553, __pyx_L1_error)
    }
    __pyx_t_6 = 0;
    __pyx_v_c = ((PyArrayObject *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "oasis.pyx":555
 *             c = np.zeros(self.P[self.i].t + self.P[self.i].l, dtype='float32')
 *             # first pool
 *             c[0] = self.P[0].v             # <<<<<<<<<<<<<<
 *             for k in range(1, self.P[0].l):
 *                 c[k] = c[k - 1] * self.d
 */
    __pyx_t_14 = (__pyx_v_self->P[0]).v;
    __pyx_t_18 = 0;
    __pyx_t_7 = -1;
    if (__pyx_t_18 < 0) {
      __pyx_t_18 += __pyx_pybuffernd_c.diminfo[0].shape;
      if (unlikely(__pyx_t_18 < 0)) __pyx_t_7 = 0;
    } else if (unlikely(__pyx_t_18 >= __pyx_pybuffernd_c.diminfo[0].shape)) __pyx_t_7 = 0;
    if (unlikely(__pyx_t_7 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_7);
      __PYX_ERR(0, 555, __pyx_L1_error)
    }
    *__Pyx_BufPtrStrided1d(__pyx_t_5oasis_SINGLE *, __pyx_pybuffernd_c.rcbuffer->pybuffer.buf, __pyx_t_18, __pyx_pybuffernd_c.diminfo[0].strides) = __pyx_t_14;

    /* "oasis.pyx":556
 *             # first pool
 *             c[0] = self.P[0].v
 *             for k in range(1, self.P[0].l):             # <<<<<<<<<<<<<<
 *                 c[k] = c[k - 1] * self.d
 *             # remaining pools
 */
    __pyx_t_11 = (__pyx_v_self->P[0]).l;
    for (__pyx_t_12 = 1; __pyx_t_12 < __pyx_t_11; __pyx_t_12+=1) {
      __pyx_v_k = __pyx_t_12;

      /* "oasis.pyx":557
 *             c[0] = self.P[0].v
 *             for k in range(1, self.P[0].l):
 *                 c[k] = c[k - 1] * self.d             # <<<<<<<<<<<<<<
 *             # remaining pools
 *             for j in range(1, self.i + 1):
 */
      __pyx_t_19 = (__pyx_v_k - 1);
      __pyx_t_7 = -1;
      if (__pyx_t_19 < 0) {
        __pyx_t_19 += __pyx_pybuffernd_c.diminfo[0].shape;
        if (unlikely(__pyx_t_19 < 0)) __pyx_t_7 = 0;
      } else if (unlikely(__pyx_t_19 >= __pyx_pybuffernd_c.diminfo[0].shape)) __pyx_t_7 = 0;
      if (unlikely(__pyx_t_7 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_7);
        __PYX_ERR(0, 557, __pyx_L1_error)
      }
      __pyx_t_20 = __pyx_v_k;
      __pyx_t_7 = -1;
      if (__pyx_t_20 < 0) {
        __pyx_t_20 += __pyx_pybuffernd_c.diminfo[0].shape;
        if (unlikely(__pyx_t_20 < 0)) __pyx_t_7 = 0;
      } else if (unlikely(__pyx_t_20 >= __pyx_pybuffernd_c.diminfo[0].shape)) __pyx_t_7 = 0;
      if (unlikely(__pyx_t_7 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_7);
        __PYX_ERR(0, 557, __pyx_L1_error)
      }
      *__Pyx_BufPtrStrided1d(__pyx_t_5oasis_SINGLE *, __pyx_pybuffernd_c.rcbuffer->pybuffer.buf, __pyx_t_20, __pyx_pybuffernd_c.diminfo[0].strides) = ((*__Pyx_BufPtrStrided1d(__pyx_t_5oasis_SINGLE *, __pyx_pybuffernd_c.rcbuffer->pybuffer.buf, __pyx_t_19, __pyx_pybuffernd_c.diminfo[0].strides)) * __pyx_v_self->d);
    }

    /* "oasis.pyx":559
 *                 c[k] = c[k - 1] * self.d
 *             # remaining pools
 *             for j in range(1, self.i + 1):             # <<<<<<<<<<<<<<
 *                 for k in range(min1000(self.P[j].l)):
 *                     c[k + self.P[j].t] = self.h[k] * self.P[j].v + self.g12[k] * self.P[j - 1].w
 */
    __pyx_t_11 = (__pyx_v_self->i + 1);
    for (__pyx_t_12 = 1; __pyx_t_12 < __pyx_t_11; __pyx_t_12+=1) {
      __pyx_v_j = __pyx_t_12;

      /* "oasis.pyx":560
 *             # remaining pools
 *             for j in range(1, self.i + 1):
 *                 for k in range(min1000(self.P[j].l)):             # <<<<<<<<<<<<<<
 *                     c[k + self.P[j].t] = self.h[k] * self.P[j].v + self.g12[k] * self.P[j - 1].w
 *                 # # more accurate exponential decay instead truncation
 */
      __pyx_t_3 = PyInt_FromSsize_t((__pyx_v_self->P[__pyx_v_j]).l); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 560, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = __pyx_f_5oasis_min1000(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 560, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_15 = __Pyx_PyInt_As_long(__pyx_t_2); if (unlikely((__pyx_t_15 == (long)-1) && PyErr_Occurred())) __PYX_ERR(0, 560, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      for (__pyx_t_16 = 0; __pyx_t_16 < __pyx_t_15; __pyx_t_16+=1) {
        __pyx_v_k = __pyx_t_16;

        /* "oasis.pyx":561
 *             for j in range(1, self.i + 1):
 *                 for k in range(min1000(self.P[j].l)):
 *                     c[k + self.P[j].t] = self.h[k] * self.P[j].v + self.g12[k] * self.P[j - 1].w             # <<<<<<<<<<<<<<
 *                 # # more accurate exponential decay instead truncation
 *                 # for k in range(1000, self.P[j].l):
 */
        __pyx_t_21 = (__pyx_v_k + (__pyx_v_self->P[__pyx_v_j]).t);
        __pyx_t_7 = -1;
        if (__pyx_t_21 < 0) {
          __pyx_t_21 += __pyx_pybuffernd_c.diminfo[0].shape;
          if (unlikely(__pyx_t_21 < 0)) __pyx_t_7 = 0;
        } else if (unlikely(__pyx_t_21 >= __pyx_pybuffernd_c.diminfo[0].shape)) __pyx_t_7 = 0;
        if (unlikely(__pyx_t_7 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_7);
          __PYX_ERR(0, 561, __pyx_L1_error)
        }
        *__Pyx_BufPtrStrided1d(__pyx_t_5oasis_SINGLE *, __pyx_pybuffernd_c.rcbuffer->pybuffer.buf, __pyx_t_21, __pyx_pybuffernd_c.diminfo[0].strides) = (((__pyx_v_self->h[__pyx_v_k]) * (__pyx_v_self->P[__pyx_v_j]).v) + ((__pyx_v_self->g12[__pyx_v_k]) * (__pyx_v_self->P[(__pyx_v_j - 1)]).w));
      }
    }

    /* "oasis.pyx":565
 *                 # for k in range(1000, self.P[j].l):
 *                 #     c[k + self.P[j].t] = c[k + self.P[j].t - 1] * self.d
 *             return c             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_c));
    __pyx_r = ((PyObject *)__pyx_v_c);
    goto __pyx_L0;
  }

  /* "oasis.pyx":535
 * 
 *     @property
 *     def c(self):             # <<<<<<<<<<<<<<
 *         """
 *         construct and return full calcium trace
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_c.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("oasis.OASIS.c.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_c.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_c);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "oasis.pyx":568
 * 
 *     @property
 *     def s(self):             # <<<<<<<<<<<<<<
 *         """
 *         construct and return full deconvolved activity, 'spike rates'
 */

/* Python wrapper */
static PyObject *__pyx_pw_5oasis_5OASIS_1s_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_5oasis_5OASIS_1s_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5oasis_5OASIS_1s___get__(((struct __pyx_obj_5oasis_OASIS *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5oasis_5OASIS_1s___get__(struct __pyx_obj_5oasis_OASIS *__pyx_v_self) {
  PyArrayObject *__pyx_v_s = 0;
  Py_ssize_t __pyx_v_j;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_s;
  __Pyx_Buffer __pyx_pybuffer_s;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyArrayObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  Py_ssize_t __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  __pyx_t_5oasis_SINGLE __pyx_t_13;
  __pyx_t_5oasis_SINGLE __pyx_t_14;
  __pyx_t_5oasis_SINGLE __pyx_t_15;
  __pyx_t_5oasis_SINGLE __pyx_t_16;
  Py_ssize_t __pyx_t_17;
  PyObject *__pyx_t_18 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __pyx_pybuffer_s.pybuffer.buf = NULL;
  __pyx_pybuffer_s.refcount = 0;
  __pyx_pybuffernd_s.data = NULL;
  __pyx_pybuffernd_s.rcbuffer = &__pyx_pybuffer_s;

  /* "oasis.pyx":574
 *         cdef np.ndarray[SINGLE, ndim = 1] s
 *         cdef Py_ssize_t j
 *         if self.g2 == 0:  # AR(1)             # <<<<<<<<<<<<<<
 *             s = np.zeros(self.P[self.i].t + self.P[self.i].l, dtype='float32')
 *             for j in range(self.i):
 */
  __pyx_t_1 = ((__pyx_v_self->g2 == 0.0) != 0);
  if (__pyx_t_1) {

    /* "oasis.pyx":575
 *         cdef Py_ssize_t j
 *         if self.g2 == 0:  # AR(1)
 *             s = np.zeros(self.P[self.i].t + self.P[self.i].l, dtype='float32')             # <<<<<<<<<<<<<<
 *             for j in range(self.i):
 *                 s[self.P[j + 1].t] = self.P[j + 1].v / self.P[j + 1].w - \
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 575, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 575, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyInt_FromSsize_t(((__pyx_v_self->P[__pyx_v_self->i]).t + (__pyx_v_self->P[__pyx_v_self->i]).l)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 575, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 575, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 575, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_n_s_float32) < 0) __PYX_ERR(0, 575, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 575, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 575, __pyx_L1_error)
    __pyx_t_6 = ((PyArrayObject *)__pyx_t_5);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_s.rcbuffer->pybuffer);
      __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_s.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack);
      if (unlikely(__pyx_t_7 < 0)) {
        PyErr_Fetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_s.rcbuffer->pybuffer, (PyObject*)__pyx_v_s, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
        }
      }
      __pyx_pybuffernd_s.diminfo[0].strides = __pyx_pybuffernd_s.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_s.diminfo[0].shape = __pyx_pybuffernd_s.rcbuffer->pybuffer.shape[0];
      if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 575, __pyx_L1_error)
    }
    __pyx_t_6 = 0;
    __pyx_v_s = ((PyArrayObject *)__pyx_t_5);
    __pyx_t_5 = 0;

    /* "oasis.pyx":576
 *         if self.g2 == 0:  # AR(1)
 *             s = np.zeros(self.P[self.i].t + self.P[self.i].l, dtype='float32')
 *             for j in range(self.i):             # <<<<<<<<<<<<<<
 *                 s[self.P[j + 1].t] = self.P[j + 1].v / self.P[j + 1].w - \
 *                     self.P[j].v / self.P[j].w * self.g**self.P[j].l
 */
    __pyx_t_11 = __pyx_v_self->i;
    for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_11; __pyx_t_12+=1) {
      __pyx_v_j = __pyx_t_12;

      /* "oasis.pyx":577
 *             s = np.zeros(self.P[self.i].t + self.P[self.i].l, dtype='float32')
 *             for j in range(self.i):
 *                 s[self.P[j + 1].t] = self.P[j + 1].v / self.P[j + 1].w - \             # <<<<<<<<<<<<<<
 *                     self.P[j].v / self.P[j].w * self.g**self.P[j].l
 *             return s
 */
      __pyx_t_13 = (__pyx_v_self->P[(__pyx_v_j + 1)]).v;
      __pyx_t_14 = (__pyx_v_self->P[(__pyx_v_j + 1)]).w;
      if (unlikely(__pyx_t_14 == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 577, __pyx_L1_error)
      }

      /* "oasis.pyx":578
 *             for j in range(self.i):
 *                 s[self.P[j + 1].t] = self.P[j + 1].v / self.P[j + 1].w - \
 *                     self.P[j].v / self.P[j].w * self.g**self.P[j].l             # <<<<<<<<<<<<<<
 *             return s
 *         else:  # AR(2)
 */
      __pyx_t_15 = (__pyx_v_self->P[__pyx_v_j]).v;
      __pyx_t_16 = (__pyx_v_self->P[__pyx_v_j]).w;
      if (unlikely(__pyx_t_16 == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        __PYX_ERR(0, 578, __pyx_L1_error)
      }

      /* "oasis.pyx":577
 *             s = np.zeros(self.P[self.i].t + self.P[self.i].l, dtype='float32')
 *             for j in range(self.i):
 *                 s[self.P[j + 1].t] = self.P[j + 1].v / self.P[j + 1].w - \             # <<<<<<<<<<<<<<
 *                     self.P[j].v / self.P[j].w * self.g**self.P[j].l
 *             return s
 */
      __pyx_t_17 = (__pyx_v_self->P[(__pyx_v_j + 1)]).t;
      __pyx_t_7 = -1;
      if (__pyx_t_17 < 0) {
        __pyx_t_17 += __pyx_pybuffernd_s.diminfo[0].shape;
        if (unlikely(__pyx_t_17 < 0)) __pyx_t_7 = 0;
      } else if (unlikely(__pyx_t_17 >= __pyx_pybuffernd_s.diminfo[0].shape)) __pyx_t_7 = 0;
      if (unlikely(__pyx_t_7 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_7);
        __PYX_ERR(0, 577, __pyx_L1_error)
      }
      *__Pyx_BufPtrStrided1d(__pyx_t_5oasis_SINGLE *, __pyx_pybuffernd_s.rcbuffer->pybuffer.buf, __pyx_t_17, __pyx_pybuffernd_s.diminfo[0].strides) = ((__pyx_t_13 / __pyx_t_14) - ((__pyx_t_15 / __pyx_t_16) * powf(__pyx_v_self->g, ((__pyx_t_5oasis_SINGLE)(__pyx_v_self->P[__pyx_v_j]).l))));
    }

    /* "oasis.pyx":579
 *                 s[self.P[j + 1].t] = self.P[j + 1].v / self.P[j + 1].w - \
 *                     self.P[j].v / self.P[j].w * self.g**self.P[j].l
 *             return s             # <<<<<<<<<<<<<<
 *         else:  # AR(2)
 *             return self.get_s(self.P[self.i].t + self.P[self.i].l)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_s));
    __pyx_r = ((PyObject *)__pyx_v_s);
    goto __pyx_L0;

    /* "oasis.pyx":574
 *         cdef np.ndarray[SINGLE, ndim = 1] s
 *         cdef Py_ssize_t j
 *         if self.g2 == 0:  # AR(1)             # <<<<<<<<<<<<<<
 *             s = np.zeros(self.P[self.i].t + self.P[self.i].l, dtype='float32')
 *             for j in range(self.i):
 */
  }

  /* "oasis.pyx":581
 *             return s
 *         else:  # AR(2)
 *             return self.get_s(self.P[self.i].t + self.P[self.i].l)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_s); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 581, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PyInt_FromSsize_t(((__pyx_v_self->P[__pyx_v_self->i]).t + (__pyx_v_self->P[__pyx_v_self->i]).l)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 581, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (!__pyx_t_3) {
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 581, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_5);
    } else {
      __pyx_t_18 = PyTuple_New(1+1); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 581, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_18);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_18, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_18, 0+1, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_18, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 581, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;
  }

  /* "oasis.pyx":568
 * 
 *     @property
 *     def s(self):             # <<<<<<<<<<<<<<
 *         """
 *         construct and return full deconvolved activity, 'spike rates'
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_18);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_s.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("oasis.OASIS.s.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_s.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "oasis.pyx":585
 * 
 * @cython.cdivision(True)
 * def oasisAR1(np.ndarray[SINGLE, ndim=1] y, SINGLE g, SINGLE lam=0, SINGLE s_min=0):             # <<<<<<<<<<<<<<
 *     """ Infer the most likely discretized spike train underlying an AR(1) fluorescence trace
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5oasis_1oasisAR1(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5oasis_oasisAR1[] = " Infer the most likely discretized spike train underlying an AR(1) fluorescence trace\n\n    Solves the sparse non-negative deconvolution problem\n    min 1/2|c-y|^2 + lam |s|_1 subject to s_t = c_t-g c_{t-1} >=s_min or =0\n\n    Parameters\n    ----------\n    y : array of float\n        One dimensional array containing the fluorescence intensities with\n        one entry per time-bin.\n    g : float\n        Parameter of the AR(1) process that models the fluorescence impulse response.\n    lam : float, optional, default 0\n        Sparsity penalty parameter lambda.\n    s_min : float, optional, default 0\n        Minimal non-zero activity within each bin (minimal 'spike size').\n\n    Returns\n    -------\n    c : array of float\n        The inferred denoised fluorescence signal at each time-bin.\n    s : array of float\n        Discretized deconvolved neural activity (spikes)\n\n    References\n    ----------\n    * Friedrich J and Paninski L, NIPS 2016\n    * Friedrich J, Zhou P, and Paninski L, PLOS Computational Biology 2017\n    ";
static PyMethodDef __pyx_mdef_5oasis_1oasisAR1 = {"oasisAR1", (PyCFunction)__pyx_pw_5oasis_1oasisAR1, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5oasis_oasisAR1};
static PyObject *__pyx_pw_5oasis_1oasisAR1(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_y = 0;
  __pyx_t_5oasis_SINGLE __pyx_v_g;
  __pyx_t_5oasis_SINGLE __pyx_v_lam;
  __pyx_t_5oasis_SINGLE __pyx_v_s_min;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("oasisAR1 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_y,&__pyx_n_s_g,&__pyx_n_s_lam,&__pyx_n_s_s_min,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("oasisAR1", 0, 2, 4, 1); __PYX_ERR(0, 585, __pyx_L3_error)
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_lam);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_s_min);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "oasisAR1") < 0)) __PYX_ERR(0, 585, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_y = ((PyArrayObject *)values[0]);
    __pyx_v_g = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_g == (npy_float32)-1) && PyErr_Occurred())) __PYX_ERR(0, 585, __pyx_L3_error)
    if (values[2]) {
      __pyx_v_lam = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_lam == (npy_float32)-1) && PyErr_Occurred())) __PYX_ERR(0, 585, __pyx_L3_error)
    } else {
      __pyx_v_lam = ((__pyx_t_5oasis_SINGLE)0.0);
    }
    if (values[3]) {
      __pyx_v_s_min = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_s_min == (npy_float32)-1) && PyErr_Occurred())) __PYX_ERR(0, 585, __pyx_L3_error)
    } else {
      __pyx_v_s_min = ((__pyx_t_5oasis_SINGLE)0.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("oasisAR1", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 585, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("oasis.oasisAR1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_y), __pyx_ptype_5numpy_ndarray, 1, "y", 0))) __PYX_ERR(0, 585, __pyx_L1_error)
  __pyx_r = __pyx_pf_5oasis_oasisAR1(__pyx_self, __pyx_v_y, __pyx_v_g, __pyx_v_lam, __pyx_v_s_min);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5oasis_oasisAR1(CYTHON_UNUSED PyObject *__pyx_self, PyArrayObject *__pyx_v_y, __pyx_t_5oasis_SINGLE __pyx_v_g, __pyx_t_5oasis_SINGLE __pyx_v_lam, __pyx_t_5oasis_SINGLE __pyx_v_s_min) {
  Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_j;
  Py_ssize_t __pyx_v_k;
  Py_ssize_t __pyx_v_t;
  Py_ssize_t __pyx_v_T;
  __pyx_t_5oasis_SINGLE __pyx_v_tmp;
  PyArrayObject *__pyx_v_c = 0;
  PyArrayObject *__pyx_v_s = 0;
  std::vector<struct __pyx_t_5oasis_Pool>  __pyx_v_P;
  struct __pyx_t_5oasis_Pool __pyx_v_newpool;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_c;
  __Pyx_Buffer __pyx_pybuffer_c;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_s;
  __Pyx_Buffer __pyx_pybuffer_s;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_y;
  __Pyx_Buffer __pyx_pybuffer_y;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  __pyx_t_5oasis_SINGLE __pyx_t_4;
  __pyx_t_5oasis_SINGLE __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyArrayObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  Py_ssize_t __pyx_t_19;
  Py_ssize_t __pyx_t_20;
  Py_ssize_t __pyx_t_21;
  Py_ssize_t __pyx_t_22;
  PyObject *__pyx_t_23 = NULL;
  __Pyx_RefNannySetupContext("oasisAR1", 0);
  __pyx_pybuffer_c.pybuffer.buf = NULL;
  __pyx_pybuffer_c.refcount = 0;
  __pyx_pybuffernd_c.data = NULL;
  __pyx_pybuffernd_c.rcbuffer = &__pyx_pybuffer_c;
  __pyx_pybuffer_s.pybuffer.buf = NULL;
  __pyx_pybuffer_s.refcount = 0;
  __pyx_pybuffernd_s.data = NULL;
  __pyx_pybuffernd_s.rcbuffer = &__pyx_pybuffer_s;
  __pyx_pybuffer_y.pybuffer.buf = NULL;
  __pyx_pybuffer_y.refcount = 0;
  __pyx_pybuffernd_y.data = NULL;
  __pyx_pybuffernd_y.rcbuffer = &__pyx_pybuffer_y;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_y.rcbuffer->pybuffer, (PyObject*)__pyx_v_y, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 585, __pyx_L1_error)
  }
  __pyx_pybuffernd_y.diminfo[0].strides = __pyx_pybuffernd_y.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_y.diminfo[0].shape = __pyx_pybuffernd_y.rcbuffer->pybuffer.shape[0];

  /* "oasis.pyx":623
 *         Pool newpool
 * 
 *     T = len(y)             # <<<<<<<<<<<<<<
 *     # [value, weight, start time, length] of pool
 *     newpool.v, newpool.w, newpool.t, newpool.l = y[0] - lam * (1 - g), 1, 0, 1
 */
  __pyx_t_1 = PyObject_Length(((PyObject *)__pyx_v_y)); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 623, __pyx_L1_error)
  __pyx_v_T = __pyx_t_1;

  /* "oasis.pyx":625
 *     T = len(y)
 *     # [value, weight, start time, length] of pool
 *     newpool.v, newpool.w, newpool.t, newpool.l = y[0] - lam * (1 - g), 1, 0, 1             # <<<<<<<<<<<<<<
 *     P.push_back(newpool)
 *     i = 0  # index of last pool
 */
  __pyx_t_2 = 0;
  __pyx_t_3 = -1;
  if (__pyx_t_2 < 0) {
    __pyx_t_2 += __pyx_pybuffernd_y.diminfo[0].shape;
    if (unlikely(__pyx_t_2 < 0)) __pyx_t_3 = 0;
  } else if (unlikely(__pyx_t_2 >= __pyx_pybuffernd_y.diminfo[0].shape)) __pyx_t_3 = 0;
  if (unlikely(__pyx_t_3 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_3);
    __PYX_ERR(0, 625, __pyx_L1_error)
  }
  __pyx_t_4 = ((*__Pyx_BufPtrStrided1d(__pyx_t_5oasis_SINGLE *, __pyx_pybuffernd_y.rcbuffer->pybuffer.buf, __pyx_t_2, __pyx_pybuffernd_y.diminfo[0].strides)) - (__pyx_v_lam * (1.0 - __pyx_v_g)));
  __pyx_t_5 = 1.0;
  __pyx_t_1 = 0;
  __pyx_t_6 = 1;
  __pyx_v_newpool.v = __pyx_t_4;
  __pyx_v_newpool.w = __pyx_t_5;
  __pyx_v_newpool.t = __pyx_t_1;
  __pyx_v_newpool.l = __pyx_t_6;

  /* "oasis.pyx":626
 *     # [value, weight, start time, length] of pool
 *     newpool.v, newpool.w, newpool.t, newpool.l = y[0] - lam * (1 - g), 1, 0, 1
 *     P.push_back(newpool)             # <<<<<<<<<<<<<<
 *     i = 0  # index of last pool
 *     t = 1  # number of time points added = index of next data point
 */
  try {
    __pyx_v_P.push_back(__pyx_v_newpool);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 626, __pyx_L1_error)
  }

  /* "oasis.pyx":627
 *     newpool.v, newpool.w, newpool.t, newpool.l = y[0] - lam * (1 - g), 1, 0, 1
 *     P.push_back(newpool)
 *     i = 0  # index of last pool             # <<<<<<<<<<<<<<
 *     t = 1  # number of time points added = index of next data point
 *     while t < T:
 */
  __pyx_v_i = 0;

  /* "oasis.pyx":628
 *     P.push_back(newpool)
 *     i = 0  # index of last pool
 *     t = 1  # number of time points added = index of next data point             # <<<<<<<<<<<<<<
 *     while t < T:
 *         # add next data point as pool
 */
  __pyx_v_t = 1;

  /* "oasis.pyx":629
 *     i = 0  # index of last pool
 *     t = 1  # number of time points added = index of next data point
 *     while t < T:             # <<<<<<<<<<<<<<
 *         # add next data point as pool
 *         newpool.v = y[t] - lam * (1 if t == T - 1 else (1 - g))
 */
  while (1) {
    __pyx_t_7 = ((__pyx_v_t < __pyx_v_T) != 0);
    if (!__pyx_t_7) break;

    /* "oasis.pyx":631
 *     while t < T:
 *         # add next data point as pool
 *         newpool.v = y[t] - lam * (1 if t == T - 1 else (1 - g))             # <<<<<<<<<<<<<<
 *         newpool.w, newpool.t, newpool.l = 1, t, 1
 *         P.push_back(newpool)
 */
    __pyx_t_8 = __pyx_v_t;
    __pyx_t_3 = -1;
    if (__pyx_t_8 < 0) {
      __pyx_t_8 += __pyx_pybuffernd_y.diminfo[0].shape;
      if (unlikely(__pyx_t_8 < 0)) __pyx_t_3 = 0;
    } else if (unlikely(__pyx_t_8 >= __pyx_pybuffernd_y.diminfo[0].shape)) __pyx_t_3 = 0;
    if (unlikely(__pyx_t_3 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_3);
      __PYX_ERR(0, 631, __pyx_L1_error)
    }
    if (((__pyx_v_t == (__pyx_v_T - 1)) != 0)) {
      __pyx_t_5 = 1.0;
    } else {
      __pyx_t_5 = (1.0 - __pyx_v_g);
    }
    __pyx_v_newpool.v = ((*__Pyx_BufPtrStrided1d(__pyx_t_5oasis_SINGLE *, __pyx_pybuffernd_y.rcbuffer->pybuffer.buf, __pyx_t_8, __pyx_pybuffernd_y.diminfo[0].strides)) - (__pyx_v_lam * __pyx_t_5));

    /* "oasis.pyx":632
 *         # add next data point as pool
 *         newpool.v = y[t] - lam * (1 if t == T - 1 else (1 - g))
 *         newpool.w, newpool.t, newpool.l = 1, t, 1             # <<<<<<<<<<<<<<
 *         P.push_back(newpool)
 *         t += 1
 */
    __pyx_t_5 = 1.0;
    __pyx_t_6 = __pyx_v_t;
    __pyx_t_1 = 1;
    __pyx_v_newpool.w = __pyx_t_5;
    __pyx_v_newpool.t = __pyx_t_6;
    __pyx_v_newpool.l = __pyx_t_1;

    /* "oasis.pyx":633
 *         newpool.v = y[t] - lam * (1 if t == T - 1 else (1 - g))
 *         newpool.w, newpool.t, newpool.l = 1, t, 1
 *         P.push_back(newpool)             # <<<<<<<<<<<<<<
 *         t += 1
 *         i += 1
 */
    try {
      __pyx_v_P.push_back(__pyx_v_newpool);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 633, __pyx_L1_error)
    }

    /* "oasis.pyx":634
 *         newpool.w, newpool.t, newpool.l = 1, t, 1
 *         P.push_back(newpool)
 *         t += 1             # <<<<<<<<<<<<<<
 *         i += 1
 *         while (i > 0 and  # backtrack until violations fixed
 */
    __pyx_v_t = (__pyx_v_t + 1);

    /* "oasis.pyx":635
 *         P.push_back(newpool)
 *         t += 1
 *         i += 1             # <<<<<<<<<<<<<<
 *         while (i > 0 and  # backtrack until violations fixed
 *                (P[i - 1].v / P[i - 1].w * g**P[i - 1].l + s_min > P[i].v / P[i].w)):
 */
    __pyx_v_i = (__pyx_v_i + 1);

    /* "oasis.pyx":636
 *         t += 1
 *         i += 1
 *         while (i > 0 and  # backtrack until violations fixed             # <<<<<<<<<<<<<<
 *                (P[i - 1].v / P[i - 1].w * g**P[i - 1].l + s_min > P[i].v / P[i].w)):
 *             i -= 1
 */
    while (1) {
      __pyx_t_9 = ((__pyx_v_i > 0) != 0);
      if (__pyx_t_9) {
      } else {
        __pyx_t_7 = __pyx_t_9;
        goto __pyx_L7_bool_binop_done;
      }

      /* "oasis.pyx":637
 *         i += 1
 *         while (i > 0 and  # backtrack until violations fixed
 *                (P[i - 1].v / P[i - 1].w * g**P[i - 1].l + s_min > P[i].v / P[i].w)):             # <<<<<<<<<<<<<<
 *             i -= 1
 *             # merge two pools
 */
      __pyx_t_9 = ((((((__pyx_v_P[(__pyx_v_i - 1)]).v / (__pyx_v_P[(__pyx_v_i - 1)]).w) * powf(__pyx_v_g, ((__pyx_t_5oasis_SINGLE)(__pyx_v_P[(__pyx_v_i - 1)]).l))) + __pyx_v_s_min) > ((__pyx_v_P[__pyx_v_i]).v / (__pyx_v_P[__pyx_v_i]).w)) != 0);
      __pyx_t_7 = __pyx_t_9;
      __pyx_L7_bool_binop_done:;
      if (!__pyx_t_7) break;

      /* "oasis.pyx":638
 *         while (i > 0 and  # backtrack until violations fixed
 *                (P[i - 1].v / P[i - 1].w * g**P[i - 1].l + s_min > P[i].v / P[i].w)):
 *             i -= 1             # <<<<<<<<<<<<<<
 *             # merge two pools
 *             P[i].v += P[i + 1].v * g**P[i].l
 */
      __pyx_v_i = (__pyx_v_i - 1);

      /* "oasis.pyx":640
 *             i -= 1
 *             # merge two pools
 *             P[i].v += P[i + 1].v * g**P[i].l             # <<<<<<<<<<<<<<
 *             P[i].w += P[i + 1].w * g**(2 * P[i].l)
 *             P[i].l += P[i + 1].l
 */
      __pyx_t_1 = __pyx_v_i;
      (__pyx_v_P[__pyx_t_1]).v = ((__pyx_v_P[__pyx_t_1]).v + ((__pyx_v_P[(__pyx_v_i + 1)]).v * powf(__pyx_v_g, ((__pyx_t_5oasis_SINGLE)(__pyx_v_P[__pyx_v_i]).l))));

      /* "oasis.pyx":641
 *             # merge two pools
 *             P[i].v += P[i + 1].v * g**P[i].l
 *             P[i].w += P[i + 1].w * g**(2 * P[i].l)             # <<<<<<<<<<<<<<
 *             P[i].l += P[i + 1].l
 *             P.pop_back()
 */
      __pyx_t_1 = __pyx_v_i;
      (__pyx_v_P[__pyx_t_1]).w = ((__pyx_v_P[__pyx_t_1]).w + ((__pyx_v_P[(__pyx_v_i + 1)]).w * powf(__pyx_v_g, ((__pyx_t_5oasis_SINGLE)(2 * (__pyx_v_P[__pyx_v_i]).l)))));

      /* "oasis.pyx":642
 *             P[i].v += P[i + 1].v * g**P[i].l
 *             P[i].w += P[i + 1].w * g**(2 * P[i].l)
 *             P[i].l += P[i + 1].l             # <<<<<<<<<<<<<<
 *             P.pop_back()
 *     # construct c
 */
      __pyx_t_1 = __pyx_v_i;
      (__pyx_v_P[__pyx_t_1]).l = ((__pyx_v_P[__pyx_t_1]).l + (__pyx_v_P[(__pyx_v_i + 1)]).l);

      /* "oasis.pyx":643
 *             P[i].w += P[i + 1].w * g**(2 * P[i].l)
 *             P[i].l += P[i + 1].l
 *             P.pop_back()             # <<<<<<<<<<<<<<
 *     # construct c
 *     c = np.empty(T, dtype=np.float32)
 */
      __pyx_v_P.pop_back();
    }
  }

  /* "oasis.pyx":645
 *             P.pop_back()
 *     # construct c
 *     c = np.empty(T, dtype=np.float32)             # <<<<<<<<<<<<<<
 *     for j in range(i + 1):
 *         tmp = fmax(P[j].v, 0) / P[j].w
 */
  __pyx_t_10 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 645, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_empty); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 645, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = PyInt_FromSsize_t(__pyx_v_T); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 645, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_12 = PyTuple_New(1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 645, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_GIVEREF(__pyx_t_10);
  PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_10);
  __pyx_t_10 = 0;
  __pyx_t_10 = PyDict_New(); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 645, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_13 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 645, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_n_s_float32); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 645, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  if (PyDict_SetItem(__pyx_t_10, __pyx_n_s_dtype, __pyx_t_14) < 0) __PYX_ERR(0, 645, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_12, __pyx_t_10); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 645, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  if (!(likely(((__pyx_t_14) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_14, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 645, __pyx_L1_error)
  __pyx_t_15 = ((PyArrayObject *)__pyx_t_14);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_c.rcbuffer->pybuffer);
    __pyx_t_3 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_t_15, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_3 < 0)) {
      PyErr_Fetch(&__pyx_t_16, &__pyx_t_17, &__pyx_t_18);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_v_c, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_16); Py_XDECREF(__pyx_t_17); Py_XDECREF(__pyx_t_18);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_16, __pyx_t_17, __pyx_t_18);
      }
    }
    __pyx_pybuffernd_c.diminfo[0].strides = __pyx_pybuffernd_c.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_c.diminfo[0].shape = __pyx_pybuffernd_c.rcbuffer->pybuffer.shape[0];
    if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 645, __pyx_L1_error)
  }
  __pyx_t_15 = 0;
  __pyx_v_c = ((PyArrayObject *)__pyx_t_14);
  __pyx_t_14 = 0;

  /* "oasis.pyx":646
 *     # construct c
 *     c = np.empty(T, dtype=np.float32)
 *     for j in range(i + 1):             # <<<<<<<<<<<<<<
 *         tmp = fmax(P[j].v, 0) / P[j].w
 *         for k in range(P[j].l):
 */
  __pyx_t_1 = (__pyx_v_i + 1);
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_1; __pyx_t_6+=1) {
    __pyx_v_j = __pyx_t_6;

    /* "oasis.pyx":647
 *     c = np.empty(T, dtype=np.float32)
 *     for j in range(i + 1):
 *         tmp = fmax(P[j].v, 0) / P[j].w             # <<<<<<<<<<<<<<
 *         for k in range(P[j].l):
 *             c[k + P[j].t] = tmp
 */
    __pyx_v_tmp = (fmax((__pyx_v_P[__pyx_v_j]).v, 0.0) / (__pyx_v_P[__pyx_v_j]).w);

    /* "oasis.pyx":648
 *     for j in range(i + 1):
 *         tmp = fmax(P[j].v, 0) / P[j].w
 *         for k in range(P[j].l):             # <<<<<<<<<<<<<<
 *             c[k + P[j].t] = tmp
 *             tmp *= g
 */
    __pyx_t_19 = (__pyx_v_P[__pyx_v_j]).l;
    for (__pyx_t_20 = 0; __pyx_t_20 < __pyx_t_19; __pyx_t_20+=1) {
      __pyx_v_k = __pyx_t_20;

      /* "oasis.pyx":649
 *         tmp = fmax(P[j].v, 0) / P[j].w
 *         for k in range(P[j].l):
 *             c[k + P[j].t] = tmp             # <<<<<<<<<<<<<<
 *             tmp *= g
 *     # construct s
 */
      __pyx_t_21 = (__pyx_v_k + (__pyx_v_P[__pyx_v_j]).t);
      __pyx_t_3 = -1;
      if (__pyx_t_21 < 0) {
        __pyx_t_21 += __pyx_pybuffernd_c.diminfo[0].shape;
        if (unlikely(__pyx_t_21 < 0)) __pyx_t_3 = 0;
      } else if (unlikely(__pyx_t_21 >= __pyx_pybuffernd_c.diminfo[0].shape)) __pyx_t_3 = 0;
      if (unlikely(__pyx_t_3 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_3);
        __PYX_ERR(0, 649, __pyx_L1_error)
      }
      *__Pyx_BufPtrStrided1d(__pyx_t_5oasis_SINGLE *, __pyx_pybuffernd_c.rcbuffer->pybuffer.buf, __pyx_t_21, __pyx_pybuffernd_c.diminfo[0].strides) = __pyx_v_tmp;

      /* "oasis.pyx":650
 *         for k in range(P[j].l):
 *             c[k + P[j].t] = tmp
 *             tmp *= g             # <<<<<<<<<<<<<<
 *     # construct s
 *     s = c.copy()
 */
      __pyx_v_tmp = (__pyx_v_tmp * __pyx_v_g);
    }
  }

  /* "oasis.pyx":652
 *             tmp *= g
 *     # construct s
 *     s = c.copy()             # <<<<<<<<<<<<<<
 *     s[0] = 0
 *     s[1:] -= g * c[:-1]
 */
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_c), __pyx_n_s_copy); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 652, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_12 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_10))) {
    __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_10);
    if (likely(__pyx_t_12)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
      __Pyx_INCREF(__pyx_t_12);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_10, function);
    }
  }
  if (__pyx_t_12) {
    __pyx_t_14 = __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_12); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 652, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  } else {
    __pyx_t_14 = __Pyx_PyObject_CallNoArg(__pyx_t_10); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 652, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  if (!(likely(((__pyx_t_14) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_14, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 652, __pyx_L1_error)
  __pyx_t_15 = ((PyArrayObject *)__pyx_t_14);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_s.rcbuffer->pybuffer);
    __pyx_t_3 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_s.rcbuffer->pybuffer, (PyObject*)__pyx_t_15, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_3 < 0)) {
      PyErr_Fetch(&__pyx_t_18, &__pyx_t_17, &__pyx_t_16);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_s.rcbuffer->pybuffer, (PyObject*)__pyx_v_s, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_18); Py_XDECREF(__pyx_t_17); Py_XDECREF(__pyx_t_16);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_18, __pyx_t_17, __pyx_t_16);
      }
    }
    __pyx_pybuffernd_s.diminfo[0].strides = __pyx_pybuffernd_s.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_s.diminfo[0].shape = __pyx_pybuffernd_s.rcbuffer->pybuffer.shape[0];
    if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 652, __pyx_L1_error)
  }
  __pyx_t_15 = 0;
  __pyx_v_s = ((PyArrayObject *)__pyx_t_14);
  __pyx_t_14 = 0;

  /* "oasis.pyx":653
 *     # construct s
 *     s = c.copy()
 *     s[0] = 0             # <<<<<<<<<<<<<<
 *     s[1:] -= g * c[:-1]
 *     return c, s
 */
  __pyx_t_22 = 0;
  __pyx_t_3 = -1;
  if (__pyx_t_22 < 0) {
    __pyx_t_22 += __pyx_pybuffernd_s.diminfo[0].shape;
    if (unlikely(__pyx_t_22 < 0)) __pyx_t_3 = 0;
  } else if (unlikely(__pyx_t_22 >= __pyx_pybuffernd_s.diminfo[0].shape)) __pyx_t_3 = 0;
  if (unlikely(__pyx_t_3 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_3);
    __PYX_ERR(0, 653, __pyx_L1_error)
  }
  *__Pyx_BufPtrStrided1d(__pyx_t_5oasis_SINGLE *, __pyx_pybuffernd_s.rcbuffer->pybuffer.buf, __pyx_t_22, __pyx_pybuffernd_s.diminfo[0].strides) = 0.0;

  /* "oasis.pyx":654
 *     s = c.copy()
 *     s[0] = 0
 *     s[1:] -= g * c[:-1]             # <<<<<<<<<<<<<<
 *     return c, s
 * 
 */
  __Pyx_INCREF(__pyx_slice_);
  __pyx_t_23 = __pyx_slice_;
  __pyx_t_14 = PyObject_GetItem(((PyObject *)__pyx_v_s), __pyx_t_23); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 654, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __pyx_t_10 = PyFloat_FromDouble(__pyx_v_g); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 654, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_12 = __Pyx_PyObject_GetSlice(((PyObject *)__pyx_v_c), 0, -1L, NULL, NULL, &__pyx_slice__2, 0, 1, 1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 654, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_11 = PyNumber_Multiply(__pyx_t_10, __pyx_t_12); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 654, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __pyx_t_12 = PyNumber_InPlaceSubtract(__pyx_t_14, __pyx_t_11); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 654, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_s), __pyx_t_23, __pyx_t_12) < 0)) __PYX_ERR(0, 654, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;

  /* "oasis.pyx":655
 *     s[0] = 0
 *     s[1:] -= g * c[:-1]
 *     return c, s             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_12 = PyTuple_New(2); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 655, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_INCREF(((PyObject *)__pyx_v_c));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_c));
  PyTuple_SET_ITEM(__pyx_t_12, 0, ((PyObject *)__pyx_v_c));
  __Pyx_INCREF(((PyObject *)__pyx_v_s));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_s));
  PyTuple_SET_ITEM(__pyx_t_12, 1, ((PyObject *)__pyx_v_s));
  __pyx_r = __pyx_t_12;
  __pyx_t_12 = 0;
  goto __pyx_L0;

  /* "oasis.pyx":585
 * 
 * @cython.cdivision(True)
 * def oasisAR1(np.ndarray[SINGLE, ndim=1] y, SINGLE g, SINGLE lam=0, SINGLE s_min=0):             # <<<<<<<<<<<<<<
 *     """ Infer the most likely discretized spike train underlying an AR(1) fluorescence trace
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_23);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_c.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_s.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_y.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("oasis.oasisAR1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_c.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_s.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_y.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_c);
  __Pyx_XDECREF((PyObject *)__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "oasis.pyx":659
 * 
 * @cython.cdivision(True)
 * def constrained_oasisAR1(np.ndarray[SINGLE, ndim=1] y, SINGLE g, SINGLE sn,             # <<<<<<<<<<<<<<
 *                          bool optimize_b=False, bool b_nonneg=True, int optimize_g=0,
 *                          int decimate=1, int max_iter=5, int penalty=1):
 */

/* Python wrapper */
static PyObject *__pyx_pw_5oasis_3constrained_oasisAR1(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_5oasis_2constrained_oasisAR1[] = " Infer the most likely discretized spike train underlying an AR(1) fluorescence trace\n\n    Solves the noise constrained sparse non-negative deconvolution problem\n    min |s|_1 subject to |c-y|^2 = sn^2 T and s_t = c_t-g c_{t-1} >= 0\n\n    Parameters\n    ----------\n    y : array of float\n        One dimensional array containing the fluorescence intensities (with baseline\n        already subtracted, if known, see optimize_b) with one entry per time-bin.\n    g : float\n        Parameter of the AR(1) process that models the fluorescence impulse response.\n    sn : float\n        Standard deviation of the noise distribution.\n    optimize_b : bool, optional, default False\n        Optimize baseline if True else it is set to 0, see y.\n    b_nonneg: bool, optional, default True\n        Enforce strictly non-negative baseline if True.\n    optimize_g : int, optional, default 0\n        Number of large, isolated events to consider for optimizing g.\n        No optimization if optimize_g=0.\n    decimate : int, optional, default 1\n        Decimation factor for estimating hyper-parameters faster on decimated data.\n    max_iter : int, optional, default 5\n        Maximal number of iterations.\n    penalty : int, optional, default 1\n        Sparsity penalty. 1: min |s|_1  0: min |s|_0\n\n    Returns\n    -------\n    c : array of float\n        The inferred denoised fluorescence signal at each time-bin.\n    s : array of float\n        Discretized deconvolved neural activity (spikes).\n    b : float\n        Fluorescence baseline value.\n    g : float\n        Parameter of the AR(1) process that models the fluorescence impulse response.\n    lam : float\n        Sparsity penalty parameter lambda of dual problem.\n\n    References\n    ----------\n    * Friedrich J and Paninski L, NIPS 2016\n    * Friedrich J, Zhou P, and Paninski L, PLOS Computational Biology 2017\n    ";
static PyMethodDef __pyx_mdef_5oasis_3constrained_oasisAR1 = {"constrained_oasisAR1", (PyCFunction)__pyx_pw_5oasis_3constrained_oasisAR1, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5oasis_2constrained_oasisAR1};
static PyObject *__pyx_pw_5oasis_3constrained_oasisAR1(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_y = 0;
  __pyx_t_5oasis_SINGLE __pyx_v_g;
  __pyx_t_5oasis_SINGLE __pyx_v_sn;
  PyBoolObject *__pyx_v_optimize_b = 0;
  PyBoolObject *__pyx_v_b_nonneg = 0;
  int __pyx_v_optimize_g;
  int __pyx_v_decimate;
  int __pyx_v_max_iter;
  int __pyx_v_penalty;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("constrained_oasisAR1 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_y,&__pyx_n_s_g,&__pyx_n_s_sn,&__pyx_n_s_optimize_b,&__pyx_n_s_b_nonneg,&__pyx_n_s_optimize_g,&__pyx_n_s_decimate,&__pyx_n_s_max_iter,&__pyx_n_s_penalty,0};
    PyObject* values[9] = {0,0,0,0,0,0,0,0,0};

    /* "oasis.pyx":660
 * @cython.cdivision(True)
 * def constrained_oasisAR1(np.ndarray[SINGLE, ndim=1] y, SINGLE g, SINGLE sn,
 *                          bool optimize_b=False, bool b_nonneg=True, int optimize_g=0,             # <<<<<<<<<<<<<<
 *                          int decimate=1, int max_iter=5, int penalty=1):
 *     """ Infer the most likely discretized spike train underlying an AR(1) fluorescence trace
 */
    values[3] = (PyObject *)((PyBoolObject *)Py_False);
    values[4] = (PyObject *)((PyBoolObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("constrained_oasisAR1", 0, 3, 9, 1); __PYX_ERR(0, 659, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_sn)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("constrained_oasisAR1", 0, 3, 9, 2); __PYX_ERR(0, 659, __pyx_L3_error)
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_optimize_b);
          if (value) { values[3] = value; kw_args--; }
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_b_nonneg);
          if (value) { values[4] = value; kw_args--; }
        }
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_optimize_g);
          if (value) { values[5] = value; kw_args--; }
        }
        case  6:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_decimate);
          if (value) { values[6] = value; kw_args--; }
        }
        case  7:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_max_iter);
          if (value) { values[7] = value; kw_args--; }
        }
        case  8:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_penalty);
          if (value) { values[8] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "constrained_oasisAR1") < 0)) __PYX_ERR(0, 659, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_y = ((PyArrayObject *)values[0]);
    __pyx_v_g = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_g == (npy_float32)-1) && PyErr_Occurred())) __PYX_ERR(0, 659, __pyx_L3_error)
    __pyx_v_sn = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_sn == (npy_float32)-1) && PyErr_Occurred())) __PYX_ERR(0, 659, __pyx_L3_error)
    __pyx_v_optimize_b = ((PyBoolObject *)values[3]);
    __pyx_v_b_nonneg = ((PyBoolObject *)values[4]);
    if (values[5]) {
      __pyx_v_optimize_g = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_optimize_g == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 660, __pyx_L3_error)
    } else {
      __pyx_v_optimize_g = ((int)0);
    }
    if (values[6]) {
      __pyx_v_decimate = __Pyx_PyInt_As_int(values[6]); if (unlikely((__pyx_v_decimate == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 661, __pyx_L3_error)
    } else {
      __pyx_v_decimate = ((int)1);
    }
    if (values[7]) {
      __pyx_v_max_iter = __Pyx_PyInt_As_int(values[7]); if (unlikely((__pyx_v_max_iter == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 661, __pyx_L3_error)
    } else {
      __pyx_v_max_iter = ((int)5);
    }
    if (values[8]) {
      __pyx_v_penalty = __Pyx_PyInt_As_int(values[8]); if (unlikely((__pyx_v_penalty == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 661, __pyx_L3_error)
    } else {
      __pyx_v_penalty = ((int)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("constrained_oasisAR1", 0, 3, 9, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 659, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("oasis.constrained_oasisAR1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_y), __pyx_ptype_5numpy_ndarray, 1, "y", 0))) __PYX_ERR(0, 659, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_optimize_b), __pyx_ptype_7cpython_4bool_bool, 1, "optimize_b", 0))) __PYX_ERR(0, 660, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_b_nonneg), __pyx_ptype_7cpython_4bool_bool, 1, "b_nonneg", 0))) __PYX_ERR(0, 660, __pyx_L1_error)
  __pyx_r = __pyx_pf_5oasis_2constrained_oasisAR1(__pyx_self, __pyx_v_y, __pyx_v_g, __pyx_v_sn, __pyx_v_optimize_b, __pyx_v_b_nonneg, __pyx_v_optimize_g, __pyx_v_decimate, __pyx_v_max_iter, __pyx_v_penalty);

  /* "oasis.pyx":659
 * 
 * @cython.cdivision(True)
 * def constrained_oasisAR1(np.ndarray[SINGLE, ndim=1] y, SINGLE g, SINGLE sn,             # <<<<<<<<<<<<<<
 *                          bool optimize_b=False, bool b_nonneg=True, int optimize_g=0,
 *                          int decimate=1, int max_iter=5, int penalty=1):
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "oasis.pyx":733
 *     lam = 0  # sn/sqrt(1-g*g)
 * 
 *     def oasis1strun(np.ndarray[SINGLE, ndim=1] y, SINGLE g, np.ndarray[SINGLE, ndim=1] c):             # <<<<<<<<<<<<<<
 * 
 *         cdef:
 */

/* Python wrapper */
static PyObject *__pyx_pw_5oasis_20constrained_oasisAR1_1oasis1strun(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_5oasis_20constrained_oasisAR1_1oasis1strun = {"oasis1strun", (PyCFunction)__pyx_pw_5oasis_20constrained_oasisAR1_1oasis1strun, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5oasis_20constrained_oasisAR1_1oasis1strun(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyArrayObject *__pyx_v_y = 0;
  __pyx_t_5oasis_SINGLE __pyx_v_g;
  PyArrayObject *__pyx_v_c = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("oasis1strun (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_y,&__pyx_n_s_g,&__pyx_n_s_c,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("oasis1strun", 1, 3, 3, 1); __PYX_ERR(0, 733, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_c)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("oasis1strun", 1, 3, 3, 2); __PYX_ERR(0, 733, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "oasis1strun") < 0)) __PYX_ERR(0, 733, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_y = ((PyArrayObject *)values[0]);
    __pyx_v_g = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_g == (npy_float32)-1) && PyErr_Occurred())) __PYX_ERR(0, 733, __pyx_L3_error)
    __pyx_v_c = ((PyArrayObject *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("oasis1strun", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 733, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("oasis.constrained_oasisAR1.oasis1strun", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_y), __pyx_ptype_5numpy_ndarray, 1, "y", 0))) __PYX_ERR(0, 733, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_c), __pyx_ptype_5numpy_ndarray, 1, "c", 0))) __PYX_ERR(0, 733, __pyx_L1_error)
  __pyx_r = __pyx_pf_5oasis_20constrained_oasisAR1_oasis1strun(__pyx_self, __pyx_v_y, __pyx_v_g, __pyx_v_c);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5oasis_20constrained_oasisAR1_oasis1strun(CYTHON_UNUSED PyObject *__pyx_self, PyArrayObject *__pyx_v_y, __pyx_t_5oasis_SINGLE __pyx_v_g, PyArrayObject *__pyx_v_c) {
  Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_j;
  Py_ssize_t __pyx_v_k;
  Py_ssize_t __pyx_v_t;
  Py_ssize_t __pyx_v_T;
  __pyx_t_5oasis_SINGLE __pyx_v_tmp;
  std::vector<struct __pyx_t_5oasis_Pool>  __pyx_v_P;
  struct __pyx_t_5oasis_Pool __pyx_v_newpool;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_c;
  __Pyx_Buffer __pyx_pybuffer_c;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_y;
  __Pyx_Buffer __pyx_pybuffer_y;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  __pyx_t_5oasis_SINGLE __pyx_t_4;
  __pyx_t_5oasis_SINGLE __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyArrayObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  Py_ssize_t __pyx_t_19;
  Py_ssize_t __pyx_t_20;
  Py_ssize_t __pyx_t_21;
  __Pyx_RefNannySetupContext("oasis1strun", 0);
  __Pyx_INCREF((PyObject *)__pyx_v_c);
  __pyx_pybuffer_y.pybuffer.buf = NULL;
  __pyx_pybuffer_y.refcount = 0;
  __pyx_pybuffernd_y.data = NULL;
  __pyx_pybuffernd_y.rcbuffer = &__pyx_pybuffer_y;
  __pyx_pybuffer_c.pybuffer.buf = NULL;
  __pyx_pybuffer_c.refcount = 0;
  __pyx_pybuffernd_c.data = NULL;
  __pyx_pybuffernd_c.rcbuffer = &__pyx_pybuffer_c;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_y.rcbuffer->pybuffer, (PyObject*)__pyx_v_y, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 733, __pyx_L1_error)
  }
  __pyx_pybuffernd_y.diminfo[0].strides = __pyx_pybuffernd_y.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_y.diminfo[0].shape = __pyx_pybuffernd_y.rcbuffer->pybuffer.shape[0];
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_v_c, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 733, __pyx_L1_error)
  }
  __pyx_pybuffernd_c.diminfo[0].strides = __pyx_pybuffernd_c.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_c.diminfo[0].shape = __pyx_pybuffernd_c.rcbuffer->pybuffer.shape[0];

  /* "oasis.pyx":741
 *             Pool newpool
 * 
 *         T = len(y)             # <<<<<<<<<<<<<<
 *         # [value, weight, start time, length] of pool
 *         # newpool.v, newpool.w, newpool.t, newpool.l = y[0] - lam * (1 - g), 1, 0, 1
 */
  __pyx_t_1 = PyObject_Length(((PyObject *)__pyx_v_y)); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 741, __pyx_L1_error)
  __pyx_v_T = __pyx_t_1;

  /* "oasis.pyx":744
 *         # [value, weight, start time, length] of pool
 *         # newpool.v, newpool.w, newpool.t, newpool.l = y[0] - lam * (1 - g), 1, 0, 1
 *         newpool.v, newpool.w, newpool.t, newpool.l = y[0], 1, 0, 1             # <<<<<<<<<<<<<<
 *         P.push_back(newpool)
 *         i = 0  # index of last pool
 */
  __pyx_t_2 = 0;
  __pyx_t_3 = -1;
  if (__pyx_t_2 < 0) {
    __pyx_t_2 += __pyx_pybuffernd_y.diminfo[0].shape;
    if (unlikely(__pyx_t_2 < 0)) __pyx_t_3 = 0;
  } else if (unlikely(__pyx_t_2 >= __pyx_pybuffernd_y.diminfo[0].shape)) __pyx_t_3 = 0;
  if (unlikely(__pyx_t_3 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_3);
    __PYX_ERR(0, 744, __pyx_L1_error)
  }
  __pyx_t_4 = (*__Pyx_BufPtrStrided1d(__pyx_t_5oasis_SINGLE *, __pyx_pybuffernd_y.rcbuffer->pybuffer.buf, __pyx_t_2, __pyx_pybuffernd_y.diminfo[0].strides));
  __pyx_t_5 = 1.0;
  __pyx_t_1 = 0;
  __pyx_t_6 = 1;
  __pyx_v_newpool.v = __pyx_t_4;
  __pyx_v_newpool.w = __pyx_t_5;
  __pyx_v_newpool.t = __pyx_t_1;
  __pyx_v_newpool.l = __pyx_t_6;

  /* "oasis.pyx":745
 *         # newpool.v, newpool.w, newpool.t, newpool.l = y[0] - lam * (1 - g), 1, 0, 1
 *         newpool.v, newpool.w, newpool.t, newpool.l = y[0], 1, 0, 1
 *         P.push_back(newpool)             # <<<<<<<<<<<<<<
 *         i = 0  # index of last pool
 *         t = 1  # number of time points added = index of next data point
 */
  try {
    __pyx_v_P.push_back(__pyx_v_newpool);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 745, __pyx_L1_error)
  }

  /* "oasis.pyx":746
 *         newpool.v, newpool.w, newpool.t, newpool.l = y[0], 1, 0, 1
 *         P.push_back(newpool)
 *         i = 0  # index of last pool             # <<<<<<<<<<<<<<
 *         t = 1  # number of time points added = index of next data point
 *         while t < T:
 */
  __pyx_v_i = 0;

  /* "oasis.pyx":747
 *         P.push_back(newpool)
 *         i = 0  # index of last pool
 *         t = 1  # number of time points added = index of next data point             # <<<<<<<<<<<<<<
 *         while t < T:
 *             # add next data point as pool
 */
  __pyx_v_t = 1;

  /* "oasis.pyx":748
 *         i = 0  # index of last pool
 *         t = 1  # number of time points added = index of next data point
 *         while t < T:             # <<<<<<<<<<<<<<
 *             # add next data point as pool
 *             newpool.v = y[t]  # - lam * (1 if t == T - 1 else (1 - g))
 */
  while (1) {
    __pyx_t_7 = ((__pyx_v_t < __pyx_v_T) != 0);
    if (!__pyx_t_7) break;

    /* "oasis.pyx":750
 *         while t < T:
 *             # add next data point as pool
 *             newpool.v = y[t]  # - lam * (1 if t == T - 1 else (1 - g))             # <<<<<<<<<<<<<<
 *             newpool.w, newpool.t, newpool.l = 1, t, 1
 *             P.push_back(newpool)
 */
    __pyx_t_8 = __pyx_v_t;
    __pyx_t_3 = -1;
    if (__pyx_t_8 < 0) {
      __pyx_t_8 += __pyx_pybuffernd_y.diminfo[0].shape;
      if (unlikely(__pyx_t_8 < 0)) __pyx_t_3 = 0;
    } else if (unlikely(__pyx_t_8 >= __pyx_pybuffernd_y.diminfo[0].shape)) __pyx_t_3 = 0;
    if (unlikely(__pyx_t_3 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_3);
      __PYX_ERR(0, 750, __pyx_L1_error)
    }
    __pyx_v_newpool.v = (*__Pyx_BufPtrStrided1d(__pyx_t_5oasis_SINGLE *, __pyx_pybuffernd_y.rcbuffer->pybuffer.buf, __pyx_t_8, __pyx_pybuffernd_y.diminfo[0].strides));

    /* "oasis.pyx":751
 *             # add next data point as pool
 *             newpool.v = y[t]  # - lam * (1 if t == T - 1 else (1 - g))
 *             newpool.w, newpool.t, newpool.l = 1, t, 1             # <<<<<<<<<<<<<<
 *             P.push_back(newpool)
 *             t += 1
 */
    __pyx_t_5 = 1.0;
    __pyx_t_6 = __pyx_v_t;
    __pyx_t_1 = 1;
    __pyx_v_newpool.w = __pyx_t_5;
    __pyx_v_newpool.t = __pyx_t_6;
    __pyx_v_newpool.l = __pyx_t_1;

    /* "oasis.pyx":752
 *             newpool.v = y[t]  # - lam * (1 if t == T - 1 else (1 - g))
 *             newpool.w, newpool.t, newpool.l = 1, t, 1
 *             P.push_back(newpool)             # <<<<<<<<<<<<<<
 *             t += 1
 *             i += 1
 */
    try {
      __pyx_v_P.push_back(__pyx_v_newpool);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 752, __pyx_L1_error)
    }

    /* "oasis.pyx":753
 *             newpool.w, newpool.t, newpool.l = 1, t, 1
 *             P.push_back(newpool)
 *             t += 1             # <<<<<<<<<<<<<<
 *             i += 1
 *             while (i > 0 and  # backtrack until violations fixed
 */
    __pyx_v_t = (__pyx_v_t + 1);

    /* "oasis.pyx":754
 *             P.push_back(newpool)
 *             t += 1
 *             i += 1             # <<<<<<<<<<<<<<
 *             while (i > 0 and  # backtrack until violations fixed
 *                    (P[i - 1].v / P[i - 1].w * g**P[i - 1].l > P[i].v / P[i].w)):
 */
    __pyx_v_i = (__pyx_v_i + 1);

    /* "oasis.pyx":755
 *             t += 1
 *             i += 1
 *             while (i > 0 and  # backtrack until violations fixed             # <<<<<<<<<<<<<<
 *                    (P[i - 1].v / P[i - 1].w * g**P[i - 1].l > P[i].v / P[i].w)):
 *                 i -= 1
 */
    while (1) {
      __pyx_t_9 = ((__pyx_v_i > 0) != 0);
      if (__pyx_t_9) {
      } else {
        __pyx_t_7 = __pyx_t_9;
        goto __pyx_L7_bool_binop_done;
      }

      /* "oasis.pyx":756
 *             i += 1
 *             while (i > 0 and  # backtrack until violations fixed
 *                    (P[i - 1].v / P[i - 1].w * g**P[i - 1].l > P[i].v / P[i].w)):             # <<<<<<<<<<<<<<
 *                 i -= 1
 *                 # merge two pools
 */
      __pyx_t_9 = (((((__pyx_v_P[(__pyx_v_i - 1)]).v / (__pyx_v_P[(__pyx_v_i - 1)]).w) * powf(__pyx_v_g, ((__pyx_t_5oasis_SINGLE)(__pyx_v_P[(__pyx_v_i - 1)]).l))) > ((__pyx_v_P[__pyx_v_i]).v / (__pyx_v_P[__pyx_v_i]).w)) != 0);
      __pyx_t_7 = __pyx_t_9;
      __pyx_L7_bool_binop_done:;
      if (!__pyx_t_7) break;

      /* "oasis.pyx":757
 *             while (i > 0 and  # backtrack until violations fixed
 *                    (P[i - 1].v / P[i - 1].w * g**P[i - 1].l > P[i].v / P[i].w)):
 *                 i -= 1             # <<<<<<<<<<<<<<
 *                 # merge two pools
 *                 P[i].v += P[i + 1].v * g**P[i].l
 */
      __pyx_v_i = (__pyx_v_i - 1);

      /* "oasis.pyx":759
 *                 i -= 1
 *                 # merge two pools
 *                 P[i].v += P[i + 1].v * g**P[i].l             # <<<<<<<<<<<<<<
 *                 P[i].w += P[i + 1].w * g**(2 * P[i].l)
 *                 P[i].l += P[i + 1].l
 */
      __pyx_t_1 = __pyx_v_i;
      (__pyx_v_P[__pyx_t_1]).v = ((__pyx_v_P[__pyx_t_1]).v + ((__pyx_v_P[(__pyx_v_i + 1)]).v * powf(__pyx_v_g, ((__pyx_t_5oasis_SINGLE)(__pyx_v_P[__pyx_v_i]).l))));

      /* "oasis.pyx":760
 *                 # merge two pools
 *                 P[i].v += P[i + 1].v * g**P[i].l
 *                 P[i].w += P[i + 1].w * g**(2 * P[i].l)             # <<<<<<<<<<<<<<
 *                 P[i].l += P[i + 1].l
 *                 P.pop_back()
 */
      __pyx_t_1 = __pyx_v_i;
      (__pyx_v_P[__pyx_t_1]).w = ((__pyx_v_P[__pyx_t_1]).w + ((__pyx_v_P[(__pyx_v_i + 1)]).w * powf(__pyx_v_g, ((__pyx_t_5oasis_SINGLE)(2 * (__pyx_v_P[__pyx_v_i]).l)))));

      /* "oasis.pyx":761
 *                 P[i].v += P[i + 1].v * g**P[i].l
 *                 P[i].w += P[i + 1].w * g**(2 * P[i].l)
 *                 P[i].l += P[i + 1].l             # <<<<<<<<<<<<<<
 *                 P.pop_back()
 *         # construct c
 */
      __pyx_t_1 = __pyx_v_i;
      (__pyx_v_P[__pyx_t_1]).l = ((__pyx_v_P[__pyx_t_1]).l + (__pyx_v_P[(__pyx_v_i + 1)]).l);

      /* "oasis.pyx":762
 *                 P[i].w += P[i + 1].w * g**(2 * P[i].l)
 *                 P[i].l += P[i + 1].l
 *                 P.pop_back()             # <<<<<<<<<<<<<<
 *         # construct c
 *         c = np.empty(T, dtype=np.float32)
 */
      __pyx_v_P.pop_back();
    }
  }

  /* "oasis.pyx":764
 *                 P.pop_back()
 *         # construct c
 *         c = np.empty(T, dtype=np.float32)             # <<<<<<<<<<<<<<
 *         for j in range(i + 1):
 *             tmp = fmax(P[j].v, 0) / P[j].w
 */
  __pyx_t_10 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 764, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_empty); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 764, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = PyInt_FromSsize_t(__pyx_v_T); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 764, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_12 = PyTuple_New(1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 764, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_GIVEREF(__pyx_t_10);
  PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_10);
  __pyx_t_10 = 0;
  __pyx_t_10 = PyDict_New(); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 764, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_13 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 764, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_n_s_float32); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 764, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  if (PyDict_SetItem(__pyx_t_10, __pyx_n_s_dtype, __pyx_t_14) < 0) __PYX_ERR(0, 764, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_12, __pyx_t_10); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 764, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  if (!(likely(((__pyx_t_14) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_14, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 764, __pyx_L1_error)
  __pyx_t_15 = ((PyArrayObject *)__pyx_t_14);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_c.rcbuffer->pybuffer);
    __pyx_t_3 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_t_15, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_3 < 0)) {
      PyErr_Fetch(&__pyx_t_16, &__pyx_t_17, &__pyx_t_18);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_v_c, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_16); Py_XDECREF(__pyx_t_17); Py_XDECREF(__pyx_t_18);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_16, __pyx_t_17, __pyx_t_18);
      }
    }
    __pyx_pybuffernd_c.diminfo[0].strides = __pyx_pybuffernd_c.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_c.diminfo[0].shape = __pyx_pybuffernd_c.rcbuffer->pybuffer.shape[0];
    if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 764, __pyx_L1_error)
  }
  __pyx_t_15 = 0;
  __Pyx_DECREF_SET(__pyx_v_c, ((PyArrayObject *)__pyx_t_14));
  __pyx_t_14 = 0;

  /* "oasis.pyx":765
 *         # construct c
 *         c = np.empty(T, dtype=np.float32)
 *         for j in range(i + 1):             # <<<<<<<<<<<<<<
 *             tmp = fmax(P[j].v, 0) / P[j].w
 *             for k in range(P[j].l):
 */
  __pyx_t_1 = (__pyx_v_i + 1);
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_1; __pyx_t_6+=1) {
    __pyx_v_j = __pyx_t_6;

    /* "oasis.pyx":766
 *         c = np.empty(T, dtype=np.float32)
 *         for j in range(i + 1):
 *             tmp = fmax(P[j].v, 0) / P[j].w             # <<<<<<<<<<<<<<
 *             for k in range(P[j].l):
 *                 c[k + P[j].t] = tmp
 */
    __pyx_v_tmp = (fmax((__pyx_v_P[__pyx_v_j]).v, 0.0) / (__pyx_v_P[__pyx_v_j]).w);

    /* "oasis.pyx":767
 *         for j in range(i + 1):
 *             tmp = fmax(P[j].v, 0) / P[j].w
 *             for k in range(P[j].l):             # <<<<<<<<<<<<<<
 *                 c[k + P[j].t] = tmp
 *                 tmp *= g
 */
    __pyx_t_19 = (__pyx_v_P[__pyx_v_j]).l;
    for (__pyx_t_20 = 0; __pyx_t_20 < __pyx_t_19; __pyx_t_20+=1) {
      __pyx_v_k = __pyx_t_20;

      /* "oasis.pyx":768
 *             tmp = fmax(P[j].v, 0) / P[j].w
 *             for k in range(P[j].l):
 *                 c[k + P[j].t] = tmp             # <<<<<<<<<<<<<<
 *                 tmp *= g
 *         return c, P
 */
      __pyx_t_21 = (__pyx_v_k + (__pyx_v_P[__pyx_v_j]).t);
      __pyx_t_3 = -1;
      if (__pyx_t_21 < 0) {
        __pyx_t_21 += __pyx_pybuffernd_c.diminfo[0].shape;
        if (unlikely(__pyx_t_21 < 0)) __pyx_t_3 = 0;
      } else if (unlikely(__pyx_t_21 >= __pyx_pybuffernd_c.diminfo[0].shape)) __pyx_t_3 = 0;
      if (unlikely(__pyx_t_3 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_3);
        __PYX_ERR(0, 768, __pyx_L1_error)
      }
      *__Pyx_BufPtrStrided1d(__pyx_t_5oasis_SINGLE *, __pyx_pybuffernd_c.rcbuffer->pybuffer.buf, __pyx_t_21, __pyx_pybuffernd_c.diminfo[0].strides) = __pyx_v_tmp;

      /* "oasis.pyx":769
 *             for k in range(P[j].l):
 *                 c[k + P[j].t] = tmp
 *                 tmp *= g             # <<<<<<<<<<<<<<
 *         return c, P
 * 
 */
      __pyx_v_tmp = (__pyx_v_tmp * __pyx_v_g);
    }
  }

  /* "oasis.pyx":770
 *                 c[k + P[j].t] = tmp
 *                 tmp *= g
 *         return c, P             # <<<<<<<<<<<<<<
 * 
 *     def oasis(vector[Pool] P, SINGLE g, np.ndarray[SINGLE, ndim=1] c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_14 = __pyx_convert_vector_to_py_struct____pyx_t_5oasis_Pool(__pyx_v_P); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 770, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 770, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_INCREF(((PyObject *)__pyx_v_c));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_c));
  PyTuple_SET_ITEM(__pyx_t_10, 0, ((PyObject *)__pyx_v_c));
  __Pyx_GIVEREF(__pyx_t_14);
  PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_14);
  __pyx_t_14 = 0;
  __pyx_r = __pyx_t_10;
  __pyx_t_10 = 0;
  goto __pyx_L0;

  /* "oasis.pyx":733
 *     lam = 0  # sn/sqrt(1-g*g)
 * 
 *     def oasis1strun(np.ndarray[SINGLE, ndim=1] y, SINGLE g, np.ndarray[SINGLE, ndim=1] c):             # <<<<<<<<<<<<<<
 * 
 *         cdef:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_c.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_y.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("oasis.constrained_oasisAR1.oasis1strun", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_c.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_y.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_c);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "oasis.pyx":772
 *         return c, P
 * 
 *     def oasis(vector[Pool] P, SINGLE g, np.ndarray[SINGLE, ndim=1] c):             # <<<<<<<<<<<<<<
 * 
 *         cdef:
 */

/* Python wrapper */
static PyObject *__pyx_pw_5oasis_20constrained_oasisAR1_3oasis(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_5oasis_20constrained_oasisAR1_3oasis = {"oasis", (PyCFunction)__pyx_pw_5oasis_20constrained_oasisAR1_3oasis, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5oasis_20constrained_oasisAR1_3oasis(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  std::vector<struct __pyx_t_5oasis_Pool>  __pyx_v_P;
  __pyx_t_5oasis_SINGLE __pyx_v_g;
  PyArrayObject *__pyx_v_c = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("oasis (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_P,&__pyx_n_s_g,&__pyx_n_s_c,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_P)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("oasis", 1, 3, 3, 1); __PYX_ERR(0, 772, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_c)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("oasis", 1, 3, 3, 2); __PYX_ERR(0, 772, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "oasis") < 0)) __PYX_ERR(0, 772, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_P = __pyx_convert_vector_from_py_struct____pyx_t_5oasis_Pool(values[0]); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 772, __pyx_L3_error)
    __pyx_v_g = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_g == (npy_float32)-1) && PyErr_Occurred())) __PYX_ERR(0, 772, __pyx_L3_error)
    __pyx_v_c = ((PyArrayObject *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("oasis", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 772, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("oasis.constrained_oasisAR1.oasis", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_c), __pyx_ptype_5numpy_ndarray, 1, "c", 0))) __PYX_ERR(0, 772, __pyx_L1_error)
  __pyx_r = __pyx_pf_5oasis_20constrained_oasisAR1_2oasis(__pyx_self, __pyx_v_P, __pyx_v_g, __pyx_v_c);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5oasis_20constrained_oasisAR1_2oasis(CYTHON_UNUSED PyObject *__pyx_self, std::vector<struct __pyx_t_5oasis_Pool>  __pyx_v_P, __pyx_t_5oasis_SINGLE __pyx_v_g, PyArrayObject *__pyx_v_c) {
  Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_j;
  Py_ssize_t __pyx_v_k;
  __pyx_t_5oasis_SINGLE __pyx_v_tmp;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_c;
  __Pyx_Buffer __pyx_pybuffer_c;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyArrayObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  Py_ssize_t __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  Py_ssize_t __pyx_t_17;
  __Pyx_RefNannySetupContext("oasis", 0);
  __Pyx_INCREF((PyObject *)__pyx_v_c);
  __pyx_pybuffer_c.pybuffer.buf = NULL;
  __pyx_pybuffer_c.refcount = 0;
  __pyx_pybuffernd_c.data = NULL;
  __pyx_pybuffernd_c.rcbuffer = &__pyx_pybuffer_c;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_v_c, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 772, __pyx_L1_error)
  }
  __pyx_pybuffernd_c.diminfo[0].strides = __pyx_pybuffernd_c.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_c.diminfo[0].shape = __pyx_pybuffernd_c.rcbuffer->pybuffer.shape[0];

  /* "oasis.pyx":778
 *             SINGLE tmp
 * 
 *         i = 0             # <<<<<<<<<<<<<<
 *         while i < P.size() - 1:
 *             i += 1
 */
  __pyx_v_i = 0;

  /* "oasis.pyx":779
 * 
 *         i = 0
 *         while i < P.size() - 1:             # <<<<<<<<<<<<<<
 *             i += 1
 *             while (i > 0 and  # backtrack until violations fixed
 */
  while (1) {
    __pyx_t_1 = ((__pyx_v_i < (__pyx_v_P.size() - 1)) != 0);
    if (!__pyx_t_1) break;

    /* "oasis.pyx":780
 *         i = 0
 *         while i < P.size() - 1:
 *             i += 1             # <<<<<<<<<<<<<<
 *             while (i > 0 and  # backtrack until violations fixed
 *                    (P[i - 1].v / P[i - 1].w * g**P[i - 1].l > P[i].v / P[i].w)):
 */
    __pyx_v_i = (__pyx_v_i + 1);

    /* "oasis.pyx":781
 *         while i < P.size() - 1:
 *             i += 1
 *             while (i > 0 and  # backtrack until violations fixed             # <<<<<<<<<<<<<<
 *                    (P[i - 1].v / P[i - 1].w * g**P[i - 1].l > P[i].v / P[i].w)):
 *                 i -= 1
 */
    while (1) {
      __pyx_t_2 = ((__pyx_v_i > 0) != 0);
      if (__pyx_t_2) {
      } else {
        __pyx_t_1 = __pyx_t_2;
        goto __pyx_L7_bool_binop_done;
      }

      /* "oasis.pyx":782
 *             i += 1
 *             while (i > 0 and  # backtrack until violations fixed
 *                    (P[i - 1].v / P[i - 1].w * g**P[i - 1].l > P[i].v / P[i].w)):             # <<<<<<<<<<<<<<
 *                 i -= 1
 *                 # merge two pools
 */
      __pyx_t_2 = (((((__pyx_v_P[(__pyx_v_i - 1)]).v / (__pyx_v_P[(__pyx_v_i - 1)]).w) * powf(__pyx_v_g, ((__pyx_t_5oasis_SINGLE)(__pyx_v_P[(__pyx_v_i - 1)]).l))) > ((__pyx_v_P[__pyx_v_i]).v / (__pyx_v_P[__pyx_v_i]).w)) != 0);
      __pyx_t_1 = __pyx_t_2;
      __pyx_L7_bool_binop_done:;
      if (!__pyx_t_1) break;

      /* "oasis.pyx":783
 *             while (i > 0 and  # backtrack until violations fixed
 *                    (P[i - 1].v / P[i - 1].w * g**P[i - 1].l > P[i].v / P[i].w)):
 *                 i -= 1             # <<<<<<<<<<<<<<
 *                 # merge two pools
 *                 P[i].v += P[i + 1].v * g**P[i].l
 */
      __pyx_v_i = (__pyx_v_i - 1);

      /* "oasis.pyx":785
 *                 i -= 1
 *                 # merge two pools
 *                 P[i].v += P[i + 1].v * g**P[i].l             # <<<<<<<<<<<<<<
 *                 P[i].w += P[i + 1].w * g**(2 * P[i].l)
 *                 P[i].l += P[i + 1].l
 */
      __pyx_t_3 = __pyx_v_i;
      (__pyx_v_P[__pyx_t_3]).v = ((__pyx_v_P[__pyx_t_3]).v + ((__pyx_v_P[(__pyx_v_i + 1)]).v * powf(__pyx_v_g, ((__pyx_t_5oasis_SINGLE)(__pyx_v_P[__pyx_v_i]).l))));

      /* "oasis.pyx":786
 *                 # merge two pools
 *                 P[i].v += P[i + 1].v * g**P[i].l
 *                 P[i].w += P[i + 1].w * g**(2 * P[i].l)             # <<<<<<<<<<<<<<
 *                 P[i].l += P[i + 1].l
 *                 P.erase(P.begin() + i + 1)
 */
      __pyx_t_3 = __pyx_v_i;
      (__pyx_v_P[__pyx_t_3]).w = ((__pyx_v_P[__pyx_t_3]).w + ((__pyx_v_P[(__pyx_v_i + 1)]).w * powf(__pyx_v_g, ((__pyx_t_5oasis_SINGLE)(2 * (__pyx_v_P[__pyx_v_i]).l)))));

      /* "oasis.pyx":787
 *                 P[i].v += P[i + 1].v * g**P[i].l
 *                 P[i].w += P[i + 1].w * g**(2 * P[i].l)
 *                 P[i].l += P[i + 1].l             # <<<<<<<<<<<<<<
 *                 P.erase(P.begin() + i + 1)
 *         # construct c
 */
      __pyx_t_3 = __pyx_v_i;
      (__pyx_v_P[__pyx_t_3]).l = ((__pyx_v_P[__pyx_t_3]).l + (__pyx_v_P[(__pyx_v_i + 1)]).l);

      /* "oasis.pyx":788
 *                 P[i].w += P[i + 1].w * g**(2 * P[i].l)
 *                 P[i].l += P[i + 1].l
 *                 P.erase(P.begin() + i + 1)             # <<<<<<<<<<<<<<
 *         # construct c
 *         c = np.empty(P[P.size() - 1].t + P[P.size() - 1].l, dtype=np.float32)
 */
      __pyx_v_P.erase(((__pyx_v_P.begin() + __pyx_v_i) + 1));
    }
  }

  /* "oasis.pyx":790
 *                 P.erase(P.begin() + i + 1)
 *         # construct c
 *         c = np.empty(P[P.size() - 1].t + P[P.size() - 1].l, dtype=np.float32)             # <<<<<<<<<<<<<<
 *         for j in range(i + 1):
 *             tmp = fmax(P[j].v, 0) / P[j].w
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 790, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_empty); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 790, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyInt_FromSsize_t(((__pyx_v_P[(__pyx_v_P.size() - 1)]).t + (__pyx_v_P[(__pyx_v_P.size() - 1)]).l)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 790, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 790, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 790, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 790, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_float32); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 790, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_8) < 0) __PYX_ERR(0, 790, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_6, __pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 790, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (!(likely(((__pyx_t_8) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_8, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 790, __pyx_L1_error)
  __pyx_t_9 = ((PyArrayObject *)__pyx_t_8);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_c.rcbuffer->pybuffer);
    __pyx_t_10 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_t_9, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_10 < 0)) {
      PyErr_Fetch(&__pyx_t_11, &__pyx_t_12, &__pyx_t_13);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_v_c, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_12); Py_XDECREF(__pyx_t_13);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_11, __pyx_t_12, __pyx_t_13);
      }
    }
    __pyx_pybuffernd_c.diminfo[0].strides = __pyx_pybuffernd_c.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_c.diminfo[0].shape = __pyx_pybuffernd_c.rcbuffer->pybuffer.shape[0];
    if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(0, 790, __pyx_L1_error)
  }
  __pyx_t_9 = 0;
  __Pyx_DECREF_SET(__pyx_v_c, ((PyArrayObject *)__pyx_t_8));
  __pyx_t_8 = 0;

  /* "oasis.pyx":791
 *         # construct c
 *         c = np.empty(P[P.size() - 1].t + P[P.size() - 1].l, dtype=np.float32)
 *         for j in range(i + 1):             # <<<<<<<<<<<<<<
 *             tmp = fmax(P[j].v, 0) / P[j].w
 *             for k in range(P[j].l):
 */
  __pyx_t_3 = (__pyx_v_i + 1);
  for (__pyx_t_14 = 0; __pyx_t_14 < __pyx_t_3; __pyx_t_14+=1) {
    __pyx_v_j = __pyx_t_14;

    /* "oasis.pyx":792
 *         c = np.empty(P[P.size() - 1].t + P[P.size() - 1].l, dtype=np.float32)
 *         for j in range(i + 1):
 *             tmp = fmax(P[j].v, 0) / P[j].w             # <<<<<<<<<<<<<<
 *             for k in range(P[j].l):
 *                 c[k + P[j].t] = tmp
 */
    __pyx_v_tmp = (fmax((__pyx_v_P[__pyx_v_j]).v, 0.0) / (__pyx_v_P[__pyx_v_j]).w);

    /* "oasis.pyx":793
 *         for j in range(i + 1):
 *             tmp = fmax(P[j].v, 0) / P[j].w
 *             for k in range(P[j].l):             # <<<<<<<<<<<<<<
 *                 c[k + P[j].t] = tmp
 *                 tmp *= g
 */
    __pyx_t_15 = (__pyx_v_P[__pyx_v_j]).l;
    for (__pyx_t_16 = 0; __pyx_t_16 < __pyx_t_15; __pyx_t_16+=1) {
      __pyx_v_k = __pyx_t_16;

      /* "oasis.pyx":794
 *             tmp = fmax(P[j].v, 0) / P[j].w
 *             for k in range(P[j].l):
 *                 c[k + P[j].t] = tmp             # <<<<<<<<<<<<<<
 *                 tmp *= g
 *         return c, P
 */
      __pyx_t_17 = (__pyx_v_k + (__pyx_v_P[__pyx_v_j]).t);
      __pyx_t_10 = -1;
      if (__pyx_t_17 < 0) {
        __pyx_t_17 += __pyx_pybuffernd_c.diminfo[0].shape;
        if (unlikely(__pyx_t_17 < 0)) __pyx_t_10 = 0;
      } else if (unlikely(__pyx_t_17 >= __pyx_pybuffernd_c.diminfo[0].shape)) __pyx_t_10 = 0;
      if (unlikely(__pyx_t_10 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_10);
        __PYX_ERR(0, 794, __pyx_L1_error)
      }
      *__Pyx_BufPtrStrided1d(__pyx_t_5oasis_SINGLE *, __pyx_pybuffernd_c.rcbuffer->pybuffer.buf, __pyx_t_17, __pyx_pybuffernd_c.diminfo[0].strides) = __pyx_v_tmp;

      /* "oasis.pyx":795
 *             for k in range(P[j].l):
 *                 c[k + P[j].t] = tmp
 *                 tmp *= g             # <<<<<<<<<<<<<<
 *         return c, P
 * 
 */
      __pyx_v_tmp = (__pyx_v_tmp * __pyx_v_g);
    }
  }

  /* "oasis.pyx":796
 *                 c[k + P[j].t] = tmp
 *                 tmp *= g
 *         return c, P             # <<<<<<<<<<<<<<
 * 
 *     g_converged = False
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_8 = __pyx_convert_vector_to_py_struct____pyx_t_5oasis_Pool(__pyx_v_P); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 796, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 796, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(((PyObject *)__pyx_v_c));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_c));
  PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_v_c));
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_8);
  __pyx_t_8 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "oasis.pyx":772
 *         return c, P
 * 
 *     def oasis(vector[Pool] P, SINGLE g, np.ndarray[SINGLE, ndim=1] c):             # <<<<<<<<<<<<<<
 * 
 *         cdef:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_c.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("oasis.constrained_oasisAR1.oasis", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_c.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_c);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "oasis.pyx":838
 *                 Pl = [P[i].l for i in idx[-optimize_g:]]
 * 
 *                 def bar(y, g, Pt, Pl):             # <<<<<<<<<<<<<<
 *                     h = np.exp(log(g) * np.arange(ma, dtype=np.float32))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_5oasis_20constrained_oasisAR1_5bar(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_5oasis_20constrained_oasisAR1_5bar = {"bar", (PyCFunction)__pyx_pw_5oasis_20constrained_oasisAR1_5bar, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5oasis_20constrained_oasisAR1_5bar(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_y = 0;
  PyObject *__pyx_v_g = 0;
  PyObject *__pyx_v_Pt = 0;
  PyObject *__pyx_v_Pl = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("bar (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_y,&__pyx_n_s_g,&__pyx_n_s_Pt,&__pyx_n_s_Pl,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("bar", 1, 4, 4, 1); __PYX_ERR(0, 838, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Pt)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("bar", 1, 4, 4, 2); __PYX_ERR(0, 838, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Pl)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("bar", 1, 4, 4, 3); __PYX_ERR(0, 838, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "bar") < 0)) __PYX_ERR(0, 838, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_y = values[0];
    __pyx_v_g = values[1];
    __pyx_v_Pt = values[2];
    __pyx_v_Pl = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("bar", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 838, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("oasis.constrained_oasisAR1.bar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5oasis_20constrained_oasisAR1_4bar(__pyx_self, __pyx_v_y, __pyx_v_g, __pyx_v_Pt, __pyx_v_Pl);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "oasis.pyx":841
 *                     h = np.exp(log(g) * np.arange(ma, dtype=np.float32))
 * 
 *                     def foo(y, t, l, q, g, lam=lam):             # <<<<<<<<<<<<<<
 *                         yy = y[t:t + l]
 *                         if t + l == T:  # |s|_1 instead |c|_1
 */

static PyObject *__pyx_pf_5oasis_20constrained_oasisAR1_3bar_4__defaults__(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__defaults__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 841, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__Pyx_CyFunction_Defaults(__pyx_defaults, __pyx_self)->__pyx_arg_lam);
  __Pyx_GIVEREF(__Pyx_CyFunction_Defaults(__pyx_defaults, __pyx_self)->__pyx_arg_lam);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __Pyx_CyFunction_Defaults(__pyx_defaults, __pyx_self)->__pyx_arg_lam);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 841, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  PyTuple_SET_ITEM(__pyx_t_2, 1, Py_None);
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("oasis.constrained_oasisAR1.bar.__defaults__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5oasis_20constrained_oasisAR1_3bar_1foo(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_5oasis_20constrained_oasisAR1_3bar_1foo = {"foo", (PyCFunction)__pyx_pw_5oasis_20constrained_oasisAR1_3bar_1foo, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5oasis_20constrained_oasisAR1_3bar_1foo(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_y = 0;
  PyObject *__pyx_v_t = 0;
  PyObject *__pyx_v_l = 0;
  PyObject *__pyx_v_q = 0;
  PyObject *__pyx_v_g = 0;
  PyObject *__pyx_v_lam = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("foo (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_y,&__pyx_n_s_t,&__pyx_n_s_l,&__pyx_n_s_q,&__pyx_n_s_g,&__pyx_n_s_lam,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    __pyx_defaults *__pyx_dynamic_args = __Pyx_CyFunction_Defaults(__pyx_defaults, __pyx_self);
    values[5] = __pyx_dynamic_args->__pyx_arg_lam;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_t)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("foo", 0, 5, 6, 1); __PYX_ERR(0, 841, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_l)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("foo", 0, 5, 6, 2); __PYX_ERR(0, 841, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("foo", 0, 5, 6, 3); __PYX_ERR(0, 841, __pyx_L3_error)
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("foo", 0, 5, 6, 4); __PYX_ERR(0, 841, __pyx_L3_error)
        }
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_lam);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "foo") < 0)) __PYX_ERR(0, 841, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_y = values[0];
    __pyx_v_t = values[1];
    __pyx_v_l = values[2];
    __pyx_v_q = values[3];
    __pyx_v_g = values[4];
    __pyx_v_lam = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("foo", 0, 5, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 841, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("oasis.constrained_oasisAR1.bar.foo", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5oasis_20constrained_oasisAR1_3bar_foo(__pyx_self, __pyx_v_y, __pyx_v_t, __pyx_v_l, __pyx_v_q, __pyx_v_g, __pyx_v_lam);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5oasis_20constrained_oasisAR1_3bar_foo(PyObject *__pyx_self, PyObject *__pyx_v_y, PyObject *__pyx_v_t, PyObject *__pyx_v_l, PyObject *__pyx_v_q, PyObject *__pyx_v_g, PyObject *__pyx_v_lam) {
  struct __pyx_obj_5oasis___pyx_scope_struct__constrained_oasisAR1 *__pyx_cur_scope;
  struct __pyx_obj_5oasis___pyx_scope_struct__constrained_oasisAR1 *__pyx_outer_scope;
  PyObject *__pyx_v_yy = NULL;
  PyObject *__pyx_v_tmp = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("foo", 0);
  __pyx_outer_scope = (struct __pyx_obj_5oasis___pyx_scope_struct__constrained_oasisAR1 *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "oasis.pyx":842
 * 
 *                     def foo(y, t, l, q, g, lam=lam):
 *                         yy = y[t:t + l]             # <<<<<<<<<<<<<<
 *                         if t + l == T:  # |s|_1 instead |c|_1
 *                             tmp = ((q.dot(yy) - lam) * (1 - g * g) /
 */
  __pyx_t_1 = PyNumber_Add(__pyx_v_t, __pyx_v_l); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 842, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetSlice(__pyx_v_y, 0, 0, &__pyx_v_t, &__pyx_t_1, NULL, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 842, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_yy = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "oasis.pyx":843
 *                     def foo(y, t, l, q, g, lam=lam):
 *                         yy = y[t:t + l]
 *                         if t + l == T:  # |s|_1 instead |c|_1             # <<<<<<<<<<<<<<
 *                             tmp = ((q.dot(yy) - lam) * (1 - g * g) /
 *                                    (1 - g**(2 * l))) * q - yy
 */
  __pyx_t_2 = PyNumber_Add(__pyx_v_t, __pyx_v_l); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 843, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_cur_scope->__pyx_v_T); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 843, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 843, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 843, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_4) {

    /* "oasis.pyx":844
 *                         yy = y[t:t + l]
 *                         if t + l == T:  # |s|_1 instead |c|_1
 *                             tmp = ((q.dot(yy) - lam) * (1 - g * g) /             # <<<<<<<<<<<<<<
 *                                    (1 - g**(2 * l))) * q - yy
 *                         else:
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_q, __pyx_n_s_dot); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 844, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    if (!__pyx_t_2) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_yy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 844, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 844, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;
      __Pyx_INCREF(__pyx_v_yy);
      __Pyx_GIVEREF(__pyx_v_yy);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_yy);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 844, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Subtract(__pyx_t_3, __pyx_v_lam); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 844, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Multiply(__pyx_v_g, __pyx_v_g); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 844, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyInt_SubtractCObj(__pyx_int_1, __pyx_t_3, 1, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 844, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Multiply(__pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 844, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "oasis.pyx":845
 *                         if t + l == T:  # |s|_1 instead |c|_1
 *                             tmp = ((q.dot(yy) - lam) * (1 - g * g) /
 *                                    (1 - g**(2 * l))) * q - yy             # <<<<<<<<<<<<<<
 *                         else:
 *                             tmp = ((q.dot(yy) - lam * (1 - g**l)) * (1 - g * g) /
 */
    __pyx_t_5 = PyNumber_Multiply(__pyx_int_2, __pyx_v_l); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 845, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyNumber_Power(__pyx_v_g, __pyx_t_5, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 845, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyInt_SubtractCObj(__pyx_int_1, __pyx_t_1, 1, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 845, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "oasis.pyx":844
 *                         yy = y[t:t + l]
 *                         if t + l == T:  # |s|_1 instead |c|_1
 *                             tmp = ((q.dot(yy) - lam) * (1 - g * g) /             # <<<<<<<<<<<<<<
 *                                    (1 - g**(2 * l))) * q - yy
 *                         else:
 */
    __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 844, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "oasis.pyx":845
 *                         if t + l == T:  # |s|_1 instead |c|_1
 *                             tmp = ((q.dot(yy) - lam) * (1 - g * g) /
 *                                    (1 - g**(2 * l))) * q - yy             # <<<<<<<<<<<<<<
 *                         else:
 *                             tmp = ((q.dot(yy) - lam * (1 - g**l)) * (1 - g * g) /
 */
    __pyx_t_5 = PyNumber_Multiply(__pyx_t_1, __pyx_v_q); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 845, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Subtract(__pyx_t_5, __pyx_v_yy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 845, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_tmp = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "oasis.pyx":843
 *                     def foo(y, t, l, q, g, lam=lam):
 *                         yy = y[t:t + l]
 *                         if t + l == T:  # |s|_1 instead |c|_1             # <<<<<<<<<<<<<<
 *                             tmp = ((q.dot(yy) - lam) * (1 - g * g) /
 *                                    (1 - g**(2 * l))) * q - yy
 */
    goto __pyx_L3;
  }

  /* "oasis.pyx":848
 *                         else:
 *                             tmp = ((q.dot(yy) - lam * (1 - g**l)) * (1 - g * g) /
 *                                    (1 - g**(2 * l))) * q - yy             # <<<<<<<<<<<<<<
 *                         return tmp.dot(tmp)
 *                     return sum([foo(y, Pt[i], Pl[i], h[:Pl[i]], g)
 */
  /*else*/ {

    /* "oasis.pyx":847
 *                                    (1 - g**(2 * l))) * q - yy
 *                         else:
 *                             tmp = ((q.dot(yy) - lam * (1 - g**l)) * (1 - g * g) /             # <<<<<<<<<<<<<<
 *                                    (1 - g**(2 * l))) * q - yy
 *                         return tmp.dot(tmp)
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_q, __pyx_n_s_dot); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 847, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_3) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_yy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 847, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    } else {
      __pyx_t_2 = PyTuple_New(1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 847, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_v_yy);
      __Pyx_GIVEREF(__pyx_v_yy);
      PyTuple_SET_ITEM(__pyx_t_2, 0+1, __pyx_v_yy);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 847, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyNumber_Power(__pyx_v_g, __pyx_v_l, Py_None); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 847, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyInt_SubtractCObj(__pyx_int_1, __pyx_t_5, 1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 847, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyNumber_Multiply(__pyx_v_lam, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 847, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Subtract(__pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 847, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyNumber_Multiply(__pyx_v_g, __pyx_v_g); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 847, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = __Pyx_PyInt_SubtractCObj(__pyx_int_1, __pyx_t_5, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 847, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyNumber_Multiply(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 847, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "oasis.pyx":848
 *                         else:
 *                             tmp = ((q.dot(yy) - lam * (1 - g**l)) * (1 - g * g) /
 *                                    (1 - g**(2 * l))) * q - yy             # <<<<<<<<<<<<<<
 *                         return tmp.dot(tmp)
 *                     return sum([foo(y, Pt[i], Pl[i], h[:Pl[i]], g)
 */
    __pyx_t_1 = PyNumber_Multiply(__pyx_int_2, __pyx_v_l); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 848, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyNumber_Power(__pyx_v_g, __pyx_t_1, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 848, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyInt_SubtractCObj(__pyx_int_1, __pyx_t_2, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 848, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "oasis.pyx":847
 *                                    (1 - g**(2 * l))) * q - yy
 *                         else:
 *                             tmp = ((q.dot(yy) - lam * (1 - g**l)) * (1 - g * g) /             # <<<<<<<<<<<<<<
 *                                    (1 - g**(2 * l))) * q - yy
 *                         return tmp.dot(tmp)
 */
    __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 847, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "oasis.pyx":848
 *                         else:
 *                             tmp = ((q.dot(yy) - lam * (1 - g**l)) * (1 - g * g) /
 *                                    (1 - g**(2 * l))) * q - yy             # <<<<<<<<<<<<<<
 *                         return tmp.dot(tmp)
 *                     return sum([foo(y, Pt[i], Pl[i], h[:Pl[i]], g)
 */
    __pyx_t_1 = PyNumber_Multiply(__pyx_t_2, __pyx_v_q); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 848, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Subtract(__pyx_t_1, __pyx_v_yy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 848, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_tmp = __pyx_t_2;
    __pyx_t_2 = 0;
  }
  __pyx_L3:;

  /* "oasis.pyx":849
 *                             tmp = ((q.dot(yy) - lam * (1 - g**l)) * (1 - g * g) /
 *                                    (1 - g**(2 * l))) * q - yy
 *                         return tmp.dot(tmp)             # <<<<<<<<<<<<<<
 *                     return sum([foo(y, Pt[i], Pl[i], h[:Pl[i]], g)
 *                                 for i in range(optimize_g)])
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_tmp, __pyx_n_s_dot); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 849, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_tmp); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 849, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 849, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5); __pyx_t_5 = NULL;
    __Pyx_INCREF(__pyx_v_tmp);
    __Pyx_GIVEREF(__pyx_v_tmp);
    PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_v_tmp);
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 849, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "oasis.pyx":841
 *                     h = np.exp(log(g) * np.arange(ma, dtype=np.float32))
 * 
 *                     def foo(y, t, l, q, g, lam=lam):             # <<<<<<<<<<<<<<
 *                         yy = y[t:t + l]
 *                         if t + l == T:  # |s|_1 instead |c|_1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("oasis.constrained_oasisAR1.bar.foo", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_yy);
  __Pyx_XDECREF(__pyx_v_tmp);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "oasis.pyx":838
 *                 Pl = [P[i].l for i in idx[-optimize_g:]]
 * 
 *                 def bar(y, g, Pt, Pl):             # <<<<<<<<<<<<<<
 *                     h = np.exp(log(g) * np.arange(ma, dtype=np.float32))
 * 
 */

static PyObject *__pyx_pf_5oasis_20constrained_oasisAR1_4bar(PyObject *__pyx_self, PyObject *__pyx_v_y, PyObject *__pyx_v_g, PyObject *__pyx_v_Pt, PyObject *__pyx_v_Pl) {
  struct __pyx_obj_5oasis___pyx_scope_struct__constrained_oasisAR1 *__pyx_cur_scope;
  struct __pyx_obj_5oasis___pyx_scope_struct__constrained_oasisAR1 *__pyx_outer_scope;
  PyObject *__pyx_v_h = NULL;
  PyObject *__pyx_v_foo = 0;
  int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  double __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_t_11;
  __Pyx_RefNannySetupContext("bar", 0);
  __pyx_outer_scope = (struct __pyx_obj_5oasis___pyx_scope_struct__constrained_oasisAR1 *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "oasis.pyx":839
 * 
 *                 def bar(y, g, Pt, Pl):
 *                     h = np.exp(log(g) * np.arange(ma, dtype=np.float32))             # <<<<<<<<<<<<<<
 * 
 *                     def foo(y, t, l, q, g, lam=lam):
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 839, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_exp); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 839, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_v_g); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 839, __pyx_L1_error)
  __pyx_t_2 = PyFloat_FromDouble(log(__pyx_t_4)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 839, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 839, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_arange); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 839, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyInt_From_unsigned_int(__pyx_cur_scope->__pyx_v_ma); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 839, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 839, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 839, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 839, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_float32); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 839, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_9) < 0) __PYX_ERR(0, 839, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_7, __pyx_t_5); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 839, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyNumber_Multiply(__pyx_t_2, __pyx_t_9); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 839, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_9)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_9) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 839, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_2 = PyTuple_New(1+1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 839, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_9); __pyx_t_9 = NULL;
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_2, 0+1, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 839, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_h = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "oasis.pyx":841
 *                     h = np.exp(log(g) * np.arange(ma, dtype=np.float32))
 * 
 *                     def foo(y, t, l, q, g, lam=lam):             # <<<<<<<<<<<<<<
 *                         yy = y[t:t + l]
 *                         if t + l == T:  # |s|_1 instead |c|_1
 */
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_5oasis_20constrained_oasisAR1_3bar_1foo, 0, __pyx_n_s_constrained_oasisAR1_locals_bar, ((PyObject*)__pyx_cur_scope), __pyx_n_s_oasis, __pyx_d, ((PyObject *)__pyx_codeobj__4)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 841, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!__Pyx_CyFunction_InitDefaults(__pyx_t_1, sizeof(__pyx_defaults), 1)) __PYX_ERR(0, 841, __pyx_L1_error)
  __pyx_t_3 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_lam); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 841, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_Defaults(__pyx_defaults, __pyx_t_1)->__pyx_arg_lam = __pyx_t_3;
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __Pyx_CyFunction_SetDefaultsGetter(__pyx_t_1, __pyx_pf_5oasis_20constrained_oasisAR1_3bar_4__defaults__);
  __pyx_v_foo = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "oasis.pyx":850
 *                                    (1 - g**(2 * l))) * q - yy
 *                         return tmp.dot(tmp)
 *                     return sum([foo(y, Pt[i], Pl[i], h[:Pl[i]], g)             # <<<<<<<<<<<<<<
 *                                 for i in range(optimize_g)])
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 850, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "oasis.pyx":851
 *                         return tmp.dot(tmp)
 *                     return sum([foo(y, Pt[i], Pl[i], h[:Pl[i]], g)
 *                                 for i in range(optimize_g)])             # <<<<<<<<<<<<<<
 * 
 *                 def baz(y, Pt, Pl):
 */
  __pyx_t_10 = __pyx_cur_scope->__pyx_v_optimize_g;
  for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_10; __pyx_t_11+=1) {
    __pyx_v_i = __pyx_t_11;

    /* "oasis.pyx":850
 *                                    (1 - g**(2 * l))) * q - yy
 *                         return tmp.dot(tmp)
 *                     return sum([foo(y, Pt[i], Pl[i], h[:Pl[i]], g)             # <<<<<<<<<<<<<<
 *                                 for i in range(optimize_g)])
 * 
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_Pt, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 850, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_Pl, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 850, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_Pl, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 850, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_9 = __Pyx_PyObject_GetSlice(__pyx_v_h, 0, 0, NULL, &__pyx_t_5, NULL, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 850, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyTuple_New(5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 850, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_v_y);
    __Pyx_GIVEREF(__pyx_v_y);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_y);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_9);
    __Pyx_INCREF(__pyx_v_g);
    __Pyx_GIVEREF(__pyx_v_g);
    PyTuple_SET_ITEM(__pyx_t_5, 4, __pyx_v_g);
    __pyx_t_3 = 0;
    __pyx_t_2 = 0;
    __pyx_t_9 = 0;
    __pyx_t_9 = __Pyx_PyObject_Call(__pyx_v_foo, __pyx_t_5, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 850, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_9))) __PYX_ERR(0, 850, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  }
  __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 850, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_sum, __pyx_t_9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 850, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "oasis.pyx":838
 *                 Pl = [P[i].l for i in idx[-optimize_g:]]
 * 
 *                 def bar(y, g, Pt, Pl):             # <<<<<<<<<<<<<<
 *                     h = np.exp(log(g) * np.arange(ma, dtype=np.float32))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("oasis.constrained_oasisAR1.bar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_h);
  __Pyx_XDECREF(__pyx_v_foo);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "oasis.pyx":853
 *                                 for i in range(optimize_g)])
 * 
 *                 def baz(y, Pt, Pl):             # <<<<<<<<<<<<<<
 *                     # minimizes residual
 *                     return fminbound(lambda x: bar(y, x, Pt, Pl), 0, 1, xtol=1e-4, maxfun=50)
 */

/* Python wrapper */
static PyObject *__pyx_pw_5oasis_20constrained_oasisAR1_7baz(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_5oasis_20constrained_oasisAR1_7baz = {"baz", (PyCFunction)__pyx_pw_5oasis_20constrained_oasisAR1_7baz, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5oasis_20constrained_oasisAR1_7baz(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_y = 0;
  PyObject *__pyx_v_Pt = 0;
  PyObject *__pyx_v_Pl = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("baz (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_y,&__pyx_n_s_Pt,&__pyx_n_s_Pl,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Pt)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("baz", 1, 3, 3, 1); __PYX_ERR(0, 853, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Pl)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("baz", 1, 3, 3, 2); __PYX_ERR(0, 853, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "baz") < 0)) __PYX_ERR(0, 853, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_y = values[0];
    __pyx_v_Pt = values[1];
    __pyx_v_Pl = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("baz", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 853, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("oasis.constrained_oasisAR1.baz", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5oasis_20constrained_oasisAR1_6baz(__pyx_self, __pyx_v_y, __pyx_v_Pt, __pyx_v_Pl);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "oasis.pyx":855
 *                 def baz(y, Pt, Pl):
 *                     # minimizes residual
 *                     return fminbound(lambda x: bar(y, x, Pt, Pl), 0, 1, xtol=1e-4, maxfun=50)             # <<<<<<<<<<<<<<
 *                 aa = baz(y, Pt, Pl)
 *                 if abs(aa - g) < 1e-4:
 */

/* Python wrapper */
static PyObject *__pyx_pw_5oasis_20constrained_oasisAR1_3baz_lambda(PyObject *__pyx_self, PyObject *__pyx_v_x); /*proto*/
static PyMethodDef __pyx_mdef_5oasis_20constrained_oasisAR1_3baz_lambda = {"lambda", (PyCFunction)__pyx_pw_5oasis_20constrained_oasisAR1_3baz_lambda, METH_O, 0};
static PyObject *__pyx_pw_5oasis_20constrained_oasisAR1_3baz_lambda(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda (wrapper)", 0);
  __pyx_r = __pyx_lambda_funcdef_lambda(__pyx_self, ((PyObject *)__pyx_v_x));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_lambda(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  struct __pyx_obj_5oasis___pyx_scope_struct_1_baz *__pyx_cur_scope;
  struct __pyx_obj_5oasis___pyx_scope_struct_1_baz *__pyx_outer_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("lambda", 0);
  __pyx_outer_scope = (struct __pyx_obj_5oasis___pyx_scope_struct_1_baz *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_bar)) { __Pyx_RaiseClosureNameError("bar"); __PYX_ERR(0, 855, __pyx_L1_error) }
  if (unlikely(!__pyx_cur_scope->__pyx_v_y)) { __Pyx_RaiseClosureNameError("y"); __PYX_ERR(0, 855, __pyx_L1_error) }
  if (unlikely(!__pyx_cur_scope->__pyx_v_Pt)) { __Pyx_RaiseClosureNameError("Pt"); __PYX_ERR(0, 855, __pyx_L1_error) }
  if (unlikely(!__pyx_cur_scope->__pyx_v_Pl)) { __Pyx_RaiseClosureNameError("Pl"); __PYX_ERR(0, 855, __pyx_L1_error) }
  __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 855, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_y);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_y);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_cur_scope->__pyx_v_y);
  __Pyx_INCREF(__pyx_v_x);
  __Pyx_GIVEREF(__pyx_v_x);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_x);
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_Pt);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_Pt);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_cur_scope->__pyx_v_Pt);
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_Pl);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_Pl);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_cur_scope->__pyx_v_Pl);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_bar, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 855, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("oasis.constrained_oasisAR1.baz.lambda", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "oasis.pyx":853
 *                                 for i in range(optimize_g)])
 * 
 *                 def baz(y, Pt, Pl):             # <<<<<<<<<<<<<<
 *                     # minimizes residual
 *                     return fminbound(lambda x: bar(y, x, Pt, Pl), 0, 1, xtol=1e-4, maxfun=50)
 */

static PyObject *__pyx_pf_5oasis_20constrained_oasisAR1_6baz(PyObject *__pyx_self, PyObject *__pyx_v_y, PyObject *__pyx_v_Pt, PyObject *__pyx_v_Pl) {
  struct __pyx_obj_5oasis___pyx_scope_struct_1_baz *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("baz", 0);
  __pyx_cur_scope = (struct __pyx_obj_5oasis___pyx_scope_struct_1_baz *)__pyx_tp_new_5oasis___pyx_scope_struct_1_baz(__pyx_ptype_5oasis___pyx_scope_struct_1_baz, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_5oasis___pyx_scope_struct__constrained_oasisAR1 *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  __pyx_cur_scope->__pyx_v_y = __pyx_v_y;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_y);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_y);
  __pyx_cur_scope->__pyx_v_Pt = __pyx_v_Pt;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_Pt);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_Pt);
  __pyx_cur_scope->__pyx_v_Pl = __pyx_v_Pl;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_Pl);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_Pl);

  /* "oasis.pyx":855
 *                 def baz(y, Pt, Pl):
 *                     # minimizes residual
 *                     return fminbound(lambda x: bar(y, x, Pt, Pl), 0, 1, xtol=1e-4, maxfun=50)             # <<<<<<<<<<<<<<
 *                 aa = baz(y, Pt, Pl)
 *                 if abs(aa - g) < 1e-4:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_fminbound); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 855, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_5oasis_20constrained_oasisAR1_3baz_lambda, 0, __pyx_n_s_constrained_oasisAR1_locals_baz, ((PyObject*)__pyx_cur_scope), __pyx_n_s_oasis, __pyx_d, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 855, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 855, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_0);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_int_1);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 855, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_xtol, __pyx_float_1eneg_4) < 0) __PYX_ERR(0, 855, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_maxfun, __pyx_int_50) < 0) __PYX_ERR(0, 855, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 855, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "oasis.pyx":853
 *                                 for i in range(optimize_g)])
 * 
 *                 def baz(y, Pt, Pl):             # <<<<<<<<<<<<<<
 *                     # minimizes residual
 *                     return fminbound(lambda x: bar(y, x, Pt, Pl), 0, 1, xtol=1e-4, maxfun=50)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("oasis.constrained_oasisAR1.baz", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "oasis.pyx":937
 *                 Pl = [P[i].l for i in idx[-optimize_g:]]
 * 
 *                 def bar(y, opt, Pt, Pl):             # <<<<<<<<<<<<<<
 *                     b, g = opt
 *                     h = np.exp(log(g) * np.arange(ma, dtype=np.float32))
 */

/* Python wrapper */
static PyObject *__pyx_pw_5oasis_20constrained_oasisAR1_9bar(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_5oasis_20constrained_oasisAR1_9bar = {"bar", (PyCFunction)__pyx_pw_5oasis_20constrained_oasisAR1_9bar, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5oasis_20constrained_oasisAR1_9bar(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_y = 0;
  PyObject *__pyx_v_opt = 0;
  PyObject *__pyx_v_Pt = 0;
  PyObject *__pyx_v_Pl = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("bar (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_y,&__pyx_n_s_opt,&__pyx_n_s_Pt,&__pyx_n_s_Pl,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_opt)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("bar", 1, 4, 4, 1); __PYX_ERR(0, 937, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Pt)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("bar", 1, 4, 4, 2); __PYX_ERR(0, 937, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Pl)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("bar", 1, 4, 4, 3); __PYX_ERR(0, 937, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "bar") < 0)) __PYX_ERR(0, 937, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 4) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
    }
    __pyx_v_y = values[0];
    __pyx_v_opt = values[1];
    __pyx_v_Pt = values[2];
    __pyx_v_Pl = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("bar", 1, 4, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 937, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("oasis.constrained_oasisAR1.bar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5oasis_20constrained_oasisAR1_8bar(__pyx_self, __pyx_v_y, __pyx_v_opt, __pyx_v_Pt, __pyx_v_Pl);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "oasis.pyx":941
 *                     h = np.exp(log(g) * np.arange(ma, dtype=np.float32))
 * 
 *                     def foo(y, t, l, q, b, g, lam=lam):             # <<<<<<<<<<<<<<
 *                         yy = y[t:t + l] - b
 *                         if t + l == T:  # |s|_1 instead |c|_1
 */

static PyObject *__pyx_pf_5oasis_20constrained_oasisAR1_3bar_6__defaults__(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__defaults__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 941, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__Pyx_CyFunction_Defaults(__pyx_defaults1, __pyx_self)->__pyx_arg_lam);
  __Pyx_GIVEREF(__Pyx_CyFunction_Defaults(__pyx_defaults1, __pyx_self)->__pyx_arg_lam);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __Pyx_CyFunction_Defaults(__pyx_defaults1, __pyx_self)->__pyx_arg_lam);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 941, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  PyTuple_SET_ITEM(__pyx_t_2, 1, Py_None);
  __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("oasis.constrained_oasisAR1.bar.__defaults__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_5oasis_20constrained_oasisAR1_3bar_3foo(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_5oasis_20constrained_oasisAR1_3bar_3foo = {"foo", (PyCFunction)__pyx_pw_5oasis_20constrained_oasisAR1_3bar_3foo, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5oasis_20constrained_oasisAR1_3bar_3foo(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_y = 0;
  PyObject *__pyx_v_t = 0;
  PyObject *__pyx_v_l = 0;
  PyObject *__pyx_v_q = 0;
  PyObject *__pyx_v_b = 0;
  PyObject *__pyx_v_g = 0;
  PyObject *__pyx_v_lam = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("foo (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_y,&__pyx_n_s_t,&__pyx_n_s_l,&__pyx_n_s_q,&__pyx_n_s_b,&__pyx_n_s_g,&__pyx_n_s_lam,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    __pyx_defaults1 *__pyx_dynamic_args = __Pyx_CyFunction_Defaults(__pyx_defaults1, __pyx_self);
    values[6] = __pyx_dynamic_args->__pyx_arg_lam;
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_t)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("foo", 0, 6, 7, 1); __PYX_ERR(0, 941, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_l)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("foo", 0, 6, 7, 2); __PYX_ERR(0, 941, __pyx_L3_error)
        }
        case  3:
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_q)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("foo", 0, 6, 7, 3); __PYX_ERR(0, 941, __pyx_L3_error)
        }
        case  4:
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("foo", 0, 6, 7, 4); __PYX_ERR(0, 941, __pyx_L3_error)
        }
        case  5:
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_g)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("foo", 0, 6, 7, 5); __PYX_ERR(0, 941, __pyx_L3_error)
        }
        case  6:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_lam);
          if (value) { values[6] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "foo") < 0)) __PYX_ERR(0, 941, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_y = values[0];
    __pyx_v_t = values[1];
    __pyx_v_l = values[2];
    __pyx_v_q = values[3];
    __pyx_v_b = values[4];
    __pyx_v_g = values[5];
    __pyx_v_lam = values[6];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("foo", 0, 6, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 941, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("oasis.constrained_oasisAR1.bar.foo", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5oasis_20constrained_oasisAR1_3bar_2foo(__pyx_self, __pyx_v_y, __pyx_v_t, __pyx_v_l, __pyx_v_q, __pyx_v_b, __pyx_v_g, __pyx_v_lam);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_5oasis_20constrained_oasisAR1_3bar_2foo(PyObject *__pyx_self, PyObject *__pyx_v_y, PyObject *__pyx_v_t, PyObject *__pyx_v_l, PyObject *__pyx_v_q, PyObject *__pyx_v_b, PyObject *__pyx_v_g, PyObject *__pyx_v_lam) {
  struct __pyx_obj_5oasis___pyx_scope_struct__constrained_oasisAR1 *__pyx_cur_scope;
  struct __pyx_obj_5oasis___pyx_scope_struct__constrained_oasisAR1 *__pyx_outer_scope;
  PyObject *__pyx_v_yy = NULL;
  PyObject *__pyx_v_tmp = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("foo", 0);
  __pyx_outer_scope = (struct __pyx_obj_5oasis___pyx_scope_struct__constrained_oasisAR1 *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "oasis.pyx":942
 * 
 *                     def foo(y, t, l, q, b, g, lam=lam):
 *                         yy = y[t:t + l] - b             # <<<<<<<<<<<<<<
 *                         if t + l == T:  # |s|_1 instead |c|_1
 *                             tmp = ((q.dot(yy) - lam) * (1 - g * g) /
 */
  __pyx_t_1 = PyNumber_Add(__pyx_v_t, __pyx_v_l); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 942, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetSlice(__pyx_v_y, 0, 0, &__pyx_v_t, &__pyx_t_1, NULL, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 942, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Subtract(__pyx_t_2, __pyx_v_b); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 942, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_yy = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "oasis.pyx":943
 *                     def foo(y, t, l, q, b, g, lam=lam):
 *                         yy = y[t:t + l] - b
 *                         if t + l == T:  # |s|_1 instead |c|_1             # <<<<<<<<<<<<<<
 *                             tmp = ((q.dot(yy) - lam) * (1 - g * g) /
 *                                    (1 - g**(2 * l))) * q - yy
 */
  __pyx_t_1 = PyNumber_Add(__pyx_v_t, __pyx_v_l); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 943, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_unsigned_int(__pyx_cur_scope->__pyx_v_T); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 943, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 943, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 943, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_4) {

    /* "oasis.pyx":944
 *                         yy = y[t:t + l] - b
 *                         if t + l == T:  # |s|_1 instead |c|_1
 *                             tmp = ((q.dot(yy) - lam) * (1 - g * g) /             # <<<<<<<<<<<<<<
 *                                    (1 - g**(2 * l))) * q - yy
 *                         else:
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_q, __pyx_n_s_dot); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 944, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    if (!__pyx_t_1) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_yy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 944, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 944, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1); __pyx_t_1 = NULL;
      __Pyx_INCREF(__pyx_v_yy);
      __Pyx_GIVEREF(__pyx_v_yy);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_yy);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 944, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Subtract(__pyx_t_3, __pyx_v_lam); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 944, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Multiply(__pyx_v_g, __pyx_v_g); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 944, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyInt_SubtractCObj(__pyx_int_1, __pyx_t_3, 1, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 944, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Multiply(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 944, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "oasis.pyx":945
 *                         if t + l == T:  # |s|_1 instead |c|_1
 *                             tmp = ((q.dot(yy) - lam) * (1 - g * g) /
 *                                    (1 - g**(2 * l))) * q - yy             # <<<<<<<<<<<<<<
 *                         else:
 *                             tmp = ((q.dot(yy) - lam * (1 - g**l)) * (1 - g * g) /
 */
    __pyx_t_5 = PyNumber_Multiply(__pyx_int_2, __pyx_v_l); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 945, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = PyNumber_Power(__pyx_v_g, __pyx_t_5, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 945, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyInt_SubtractCObj(__pyx_int_1, __pyx_t_2, 1, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 945, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "oasis.pyx":944
 *                         yy = y[t:t + l] - b
 *                         if t + l == T:  # |s|_1 instead |c|_1
 *                             tmp = ((q.dot(yy) - lam) * (1 - g * g) /             # <<<<<<<<<<<<<<
 *                                    (1 - g**(2 * l))) * q - yy
 *                         else:
 */
    __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 944, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "oasis.pyx":945
 *                         if t + l == T:  # |s|_1 instead |c|_1
 *                             tmp = ((q.dot(yy) - lam) * (1 - g * g) /
 *                                    (1 - g**(2 * l))) * q - yy             # <<<<<<<<<<<<<<
 *                         else:
 *                             tmp = ((q.dot(yy) - lam * (1 - g**l)) * (1 - g * g) /
 */
    __pyx_t_5 = PyNumber_Multiply(__pyx_t_2, __pyx_v_q); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 945, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Subtract(__pyx_t_5, __pyx_v_yy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 945, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_tmp = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "oasis.pyx":943
 *                     def foo(y, t, l, q, b, g, lam=lam):
 *                         yy = y[t:t + l] - b
 *                         if t + l == T:  # |s|_1 instead |c|_1             # <<<<<<<<<<<<<<
 *                             tmp = ((q.dot(yy) - lam) * (1 - g * g) /
 *                                    (1 - g**(2 * l))) * q - yy
 */
    goto __pyx_L3;
  }

  /* "oasis.pyx":948
 *                         else:
 *                             tmp = ((q.dot(yy) - lam * (1 - g**l)) * (1 - g * g) /
 *                                    (1 - g**(2 * l))) * q - yy             # <<<<<<<<<<<<<<
 *                         return tmp.dot(tmp)
 *                     return sum([foo(y, Pt[i], Pl[i], h[:Pl[i]], b, g)
 */
  /*else*/ {

    /* "oasis.pyx":947
 *                                    (1 - g**(2 * l))) * q - yy
 *                         else:
 *                             tmp = ((q.dot(yy) - lam * (1 - g**l)) * (1 - g * g) /             # <<<<<<<<<<<<<<
 *                                    (1 - g**(2 * l))) * q - yy
 *                         return tmp.dot(tmp)
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_q, __pyx_n_s_dot); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 947, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_3) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_yy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 947, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      __pyx_t_1 = PyTuple_New(1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 947, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_v_yy);
      __Pyx_GIVEREF(__pyx_v_yy);
      PyTuple_SET_ITEM(__pyx_t_1, 0+1, __pyx_v_yy);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 947, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyNumber_Power(__pyx_v_g, __pyx_v_l, Py_None); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 947, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = __Pyx_PyInt_SubtractCObj(__pyx_int_1, __pyx_t_5, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 947, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyNumber_Multiply(__pyx_v_lam, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 947, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Subtract(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 947, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyNumber_Multiply(__pyx_v_g, __pyx_v_g); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 947, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyInt_SubtractCObj(__pyx_int_1, __pyx_t_5, 1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 947, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyNumber_Multiply(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 947, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "oasis.pyx":948
 *                         else:
 *                             tmp = ((q.dot(yy) - lam * (1 - g**l)) * (1 - g * g) /
 *                                    (1 - g**(2 * l))) * q - yy             # <<<<<<<<<<<<<<
 *                         return tmp.dot(tmp)
 *                     return sum([foo(y, Pt[i], Pl[i], h[:Pl[i]], b, g)
 */
    __pyx_t_2 = PyNumber_Multiply(__pyx_int_2, __pyx_v_l); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 948, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyNumber_Power(__pyx_v_g, __pyx_t_2, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 948, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyInt_SubtractCObj(__pyx_int_1, __pyx_t_1, 1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 948, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "oasis.pyx":947
 *                                    (1 - g**(2 * l))) * q - yy
 *                         else:
 *                             tmp = ((q.dot(yy) - lam * (1 - g**l)) * (1 - g * g) /             # <<<<<<<<<<<<<<
 *                                    (1 - g**(2 * l))) * q - yy
 *                         return tmp.dot(tmp)
 */
    __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_t_5, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 947, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "oasis.pyx":948
 *                         else:
 *                             tmp = ((q.dot(yy) - lam * (1 - g**l)) * (1 - g * g) /
 *                                    (1 - g**(2 * l))) * q - yy             # <<<<<<<<<<<<<<
 *                         return tmp.dot(tmp)
 *                     return sum([foo(y, Pt[i], Pl[i], h[:Pl[i]], b, g)
 */
    __pyx_t_2 = PyNumber_Multiply(__pyx_t_1, __pyx_v_q); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 948, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Subtract(__pyx_t_2, __pyx_v_yy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 948, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_tmp = __pyx_t_1;
    __pyx_t_1 = 0;
  }
  __pyx_L3:;

  /* "oasis.pyx":949
 *                             tmp = ((q.dot(yy) - lam * (1 - g**l)) * (1 - g * g) /
 *                                    (1 - g**(2 * l))) * q - yy
 *                         return tmp.dot(tmp)             # <<<<<<<<<<<<<<
 *                     return sum([foo(y, Pt[i], Pl[i], h[:Pl[i]], b, g)
 *                                 for i in range(P.size() if P.size() < optimize_g else optimize_g)])
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_tmp, __pyx_n_s_dot); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 949, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_tmp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 949, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 949, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5); __pyx_t_5 = NULL;
    __Pyx_INCREF(__pyx_v_tmp);
    __Pyx_GIVEREF(__pyx_v_tmp);
    PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_v_tmp);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 949, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "oasis.pyx":941
 *                     h = np.exp(log(g) * np.arange(ma, dtype=np.float32))
 * 
 *                     def foo(y, t, l, q, b, g, lam=lam):             # <<<<<<<<<<<<<<
 *                         yy = y[t:t + l] - b
 *                         if t + l == T:  # |s|_1 instead |c|_1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("oasis.constrained_oasisAR1.bar.foo", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_yy);
  __Pyx_XDECREF(__pyx_v_tmp);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "oasis.pyx":937
 *                 Pl = [P[i].l for i in idx[-optimize_g:]]
 * 
 *                 def bar(y, opt, Pt, Pl):             # <<<<<<<<<<<<<<
 *                     b, g = opt
 *                     h = np.exp(log(g) * np.arange(ma, dtype=np.float32))
 */

static PyObject *__pyx_pf_5oasis_20constrained_oasisAR1_8bar(PyObject *__pyx_self, PyObject *__pyx_v_y, PyObject *__pyx_v_opt, PyObject *__pyx_v_Pt, PyObject *__pyx_v_Pl) {
  struct __pyx_obj_5oasis___pyx_scope_struct__constrained_oasisAR1 *__pyx_cur_scope;
  struct __pyx_obj_5oasis___pyx_scope_struct__constrained_oasisAR1 *__pyx_outer_scope;
  PyObject *__pyx_v_b = NULL;
  PyObject *__pyx_v_g = NULL;
  PyObject *__pyx_v_h = NULL;
  PyObject *__pyx_v_foo = 0;
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *(*__pyx_t_4)(PyObject *);
  double __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  size_t __pyx_t_11;
  size_t __pyx_t_12;
  __Pyx_RefNannySetupContext("bar", 0);
  __pyx_outer_scope = (struct __pyx_obj_5oasis___pyx_scope_struct__constrained_oasisAR1 *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;

  /* "oasis.pyx":938
 * 
 *                 def bar(y, opt, Pt, Pl):
 *                     b, g = opt             # <<<<<<<<<<<<<<
 *                     h = np.exp(log(g) * np.arange(ma, dtype=np.float32))
 * 
 */
  if ((likely(PyTuple_CheckExact(__pyx_v_opt))) || (PyList_CheckExact(__pyx_v_opt))) {
    PyObject* sequence = __pyx_v_opt;
    #if CYTHON_COMPILING_IN_CPYTHON
    Py_ssize_t size = Py_SIZE(sequence);
    #else
    Py_ssize_t size = PySequence_Size(sequence);
    #endif
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 938, __pyx_L1_error)
    }
    #if CYTHON_COMPILING_IN_CPYTHON
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_2);
    #else
    __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 938, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 938, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    #endif
  } else {
    Py_ssize_t index = -1;
    __pyx_t_3 = PyObject_GetIter(__pyx_v_opt); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 938, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = Py_TYPE(__pyx_t_3)->tp_iternext;
    index = 0; __pyx_t_1 = __pyx_t_4(__pyx_t_3); if (unlikely(!__pyx_t_1)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    index = 1; __pyx_t_2 = __pyx_t_4(__pyx_t_3); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_4(__pyx_t_3), 2) < 0) __PYX_ERR(0, 938, __pyx_L1_error)
    __pyx_t_4 = NULL;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 938, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_b = __pyx_t_1;
  __pyx_t_1 = 0;
  __pyx_v_g = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "oasis.pyx":939
 *                 def bar(y, opt, Pt, Pl):
 *                     b, g = opt
 *                     h = np.exp(log(g) * np.arange(ma, dtype=np.float32))             # <<<<<<<<<<<<<<
 * 
 *                     def foo(y, t, l, q, b, g, lam=lam):
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 939, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_exp); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 939, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_g); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 939, __pyx_L1_error)
  __pyx_t_1 = PyFloat_FromDouble(log(__pyx_t_5)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 939, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 939, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_arange); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 939, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyInt_From_unsigned_int(__pyx_cur_scope->__pyx_v_ma); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 939, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 939, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_6 = PyDict_New(); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 939, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 939, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_float32); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 939, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_dtype, __pyx_t_10) < 0) __PYX_ERR(0, 939, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_8, __pyx_t_6); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 939, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyNumber_Multiply(__pyx_t_1, __pyx_t_10); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 939, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_10)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_10);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_10) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 939, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_1 = PyTuple_New(1+1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 939, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_10); __pyx_t_10 = NULL;
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 0+1, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 939, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_h = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "oasis.pyx":941
 *                     h = np.exp(log(g) * np.arange(ma, dtype=np.float32))
 * 
 *                     def foo(y, t, l, q, b, g, lam=lam):             # <<<<<<<<<<<<<<
 *                         yy = y[t:t + l] - b
 *                         if t + l == T:  # |s|_1 instead |c|_1
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_5oasis_20constrained_oasisAR1_3bar_3foo, 0, __pyx_n_s_constrained_oasisAR1_locals_bar, ((PyObject*)__pyx_cur_scope), __pyx_n_s_oasis, __pyx_d, ((PyObject *)__pyx_codeobj__6)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 941, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (!__Pyx_CyFunction_InitDefaults(__pyx_t_2, sizeof(__pyx_defaults1), 1)) __PYX_ERR(0, 941, __pyx_L1_error)
  __pyx_t_3 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_lam); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 941, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_Defaults(__pyx_defaults1, __pyx_t_2)->__pyx_arg_lam = __pyx_t_3;
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __Pyx_CyFunction_SetDefaultsGetter(__pyx_t_2, __pyx_pf_5oasis_20constrained_oasisAR1_3bar_6__defaults__);
  __pyx_v_foo = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "oasis.pyx":950
 *                                    (1 - g**(2 * l))) * q - yy
 *                         return tmp.dot(tmp)
 *                     return sum([foo(y, Pt[i], Pl[i], h[:Pl[i]], b, g)             # <<<<<<<<<<<<<<
 *                                 for i in range(P.size() if P.size() < optimize_g else optimize_g)])
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 950, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "oasis.pyx":951
 *                         return tmp.dot(tmp)
 *                     return sum([foo(y, Pt[i], Pl[i], h[:Pl[i]], b, g)
 *                                 for i in range(P.size() if P.size() < optimize_g else optimize_g)])             # <<<<<<<<<<<<<<
 * 
 *                 def baz(y, Pt, Pl):
 */
  if (((__pyx_cur_scope->__pyx_v_P.size() < __pyx_cur_scope->__pyx_v_optimize_g) != 0)) {
    __pyx_t_11 = __pyx_cur_scope->__pyx_v_P.size();
  } else {
    __pyx_t_11 = __pyx_cur_scope->__pyx_v_optimize_g;
  }
  for (__pyx_t_12 = 0; __pyx_t_12 < __pyx_t_11; __pyx_t_12+=1) {
    __pyx_v_i = __pyx_t_12;

    /* "oasis.pyx":950
 *                                    (1 - g**(2 * l))) * q - yy
 *                         return tmp.dot(tmp)
 *                     return sum([foo(y, Pt[i], Pl[i], h[:Pl[i]], b, g)             # <<<<<<<<<<<<<<
 *                                 for i in range(P.size() if P.size() < optimize_g else optimize_g)])
 * 
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_Pt, __pyx_v_i, size_t, 0, __Pyx_PyInt_FromSize_t, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 950, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_Pl, __pyx_v_i, size_t, 0, __Pyx_PyInt_FromSize_t, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 950, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_Pl, __pyx_v_i, size_t, 0, __Pyx_PyInt_FromSize_t, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 950, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_10 = __Pyx_PyObject_GetSlice(__pyx_v_h, 0, 0, NULL, &__pyx_t_6, NULL, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 950, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyTuple_New(6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 950, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_v_y);
    __Pyx_GIVEREF(__pyx_v_y);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_y);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_10);
    PyTuple_SET_ITEM(__pyx_t_6, 3, __pyx_t_10);
    __Pyx_INCREF(__pyx_v_b);
    __Pyx_GIVEREF(__pyx_v_b);
    PyTuple_SET_ITEM(__pyx_t_6, 4, __pyx_v_b);
    __Pyx_INCREF(__pyx_v_g);
    __Pyx_GIVEREF(__pyx_v_g);
    PyTuple_SET_ITEM(__pyx_t_6, 5, __pyx_v_g);
    __pyx_t_3 = 0;
    __pyx_t_1 = 0;
    __pyx_t_10 = 0;
    __pyx_t_10 = __Pyx_PyObject_Call(__pyx_v_foo, __pyx_t_6, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 950, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_10))) __PYX_ERR(0, 950, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  }
  __pyx_t_10 = PyTuple_New(1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 950, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_sum, __pyx_t_10, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 950, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "oasis.pyx":937
 *                 Pl = [P[i].l for i in idx[-optimize_g:]]
 * 
 *                 def bar(y, opt, Pt, Pl):             # <<<<<<<<<<<<<<
 *                     b, g = opt
 *                     h = np.exp(log(g) * np.arange(ma, dtype=np.float32))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("oasis.constrained_oasisAR1.bar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_b);
  __Pyx_XDECREF(__pyx_v_g);
  __Pyx_XDECREF(__pyx_v_h);
  __Pyx_XDECREF(__pyx_v_foo);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "oasis.pyx":953
 *                                 for i in range(P.size() if P.size() < optimize_g else optimize_g)])
 * 
 *                 def baz(y, Pt, Pl):             # <<<<<<<<<<<<<<
 *                     return minimize(lambda x: bar(y, x, Pt, Pl), (b, g),
 *                                     bounds=((0 if b_nonneg else None, None), (.001, .999)),
 */

/* Python wrapper */
static PyObject *__pyx_pw_5oasis_20constrained_oasisAR1_11baz(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_5oasis_20constrained_oasisAR1_11baz = {"baz", (PyCFunction)__pyx_pw_5oasis_20constrained_oasisAR1_11baz, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_5oasis_20constrained_oasisAR1_11baz(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_y = 0;
  PyObject *__pyx_v_Pt = 0;
  PyObject *__pyx_v_Pl = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("baz (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_y,&__pyx_n_s_Pt,&__pyx_n_s_Pl,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Pt)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("baz", 1, 3, 3, 1); __PYX_ERR(0, 953, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_Pl)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("baz", 1, 3, 3, 2); __PYX_ERR(0, 953, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "baz") < 0)) __PYX_ERR(0, 953, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_y = values[0];
    __pyx_v_Pt = values[1];
    __pyx_v_Pl = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("baz", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 953, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("oasis.constrained_oasisAR1.baz", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_5oasis_20constrained_oasisAR1_10baz(__pyx_self, __pyx_v_y, __pyx_v_Pt, __pyx_v_Pl);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "oasis.pyx":954
 * 
 *                 def baz(y, Pt, Pl):
 *                     return minimize(lambda x: bar(y, x, Pt, Pl), (b, g),             # <<<<<<<<<<<<<<
 *                                     bounds=((0 if b_nonneg else None, None), (.001, .999)),
 *                                     method='L-BFGS-B',
 */

/* Python wrapper */
static PyObject *__pyx_pw_5oasis_20constrained_oasisAR1_3baz_1lambda1(PyObject *__pyx_self, PyObject *__pyx_v_x); /*proto*/
static PyMethodDef __pyx_mdef_5oasis_20constrained_oasisAR1_3baz_1lambda1 = {"lambda1", (PyCFunction)__pyx_pw_5oasis_20constrained_oasisAR1_3baz_1lambda1, METH_O, 0};
static PyObject *__pyx_pw_5oasis_20constrained_oasisAR1_3baz_1lambda1(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda1 (wrapper)", 0);
  __pyx_r = __pyx_lambda_funcdef_lambda1(__pyx_self, ((PyObject *)__pyx_v_x));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_lambda1(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  struct __pyx_obj_5oasis___pyx_scope_struct_2_baz *__pyx_cur_scope;
  struct __pyx_obj_5oasis___pyx_scope_struct_2_baz *__pyx_outer_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("lambda1", 0);
  __pyx_outer_scope = (struct __pyx_obj_5oasis___pyx_scope_struct_2_baz *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_bar)) { __Pyx_RaiseClosureNameError("bar"); __PYX_ERR(0, 954, __pyx_L1_error) }
  if (unlikely(!__pyx_cur_scope->__pyx_v_y)) { __Pyx_RaiseClosureNameError("y"); __PYX_ERR(0, 954, __pyx_L1_error) }
  if (unlikely(!__pyx_cur_scope->__pyx_v_Pt)) { __Pyx_RaiseClosureNameError("Pt"); __PYX_ERR(0, 954, __pyx_L1_error) }
  if (unlikely(!__pyx_cur_scope->__pyx_v_Pl)) { __Pyx_RaiseClosureNameError("Pl"); __PYX_ERR(0, 954, __pyx_L1_error) }
  __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 954, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_y);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_y);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_cur_scope->__pyx_v_y);
  __Pyx_INCREF(__pyx_v_x);
  __Pyx_GIVEREF(__pyx_v_x);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_x);
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_Pt);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_Pt);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_cur_scope->__pyx_v_Pt);
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_Pl);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_Pl);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_cur_scope->__pyx_v_Pl);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_bar, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 954, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("oasis.constrained_oasisAR1.baz.lambda1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "oasis.pyx":953
 *                                 for i in range(P.size() if P.size() < optimize_g else optimize_g)])
 * 
 *                 def baz(y, Pt, Pl):             # <<<<<<<<<<<<<<
 *                     return minimize(lambda x: bar(y, x, Pt, Pl), (b, g),
 *                                     bounds=((0 if b_nonneg else None, None), (.001, .999)),
 */

static PyObject *__pyx_pf_5oasis_20constrained_oasisAR1_10baz(PyObject *__pyx_self, PyObject *__pyx_v_y, PyObject *__pyx_v_Pt, PyObject *__pyx_v_Pl) {
  struct __pyx_obj_5oasis___pyx_scope_struct_2_baz *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("baz", 0);
  __pyx_cur_scope = (struct __pyx_obj_5oasis___pyx_scope_struct_2_baz *)__pyx_tp_new_5oasis___pyx_scope_struct_2_baz(__pyx_ptype_5oasis___pyx_scope_struct_2_baz, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_5oasis___pyx_scope_struct__constrained_oasisAR1 *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  __pyx_cur_scope->__pyx_v_y = __pyx_v_y;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_y);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_y);
  __pyx_cur_scope->__pyx_v_Pt = __pyx_v_Pt;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_Pt);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_Pt);
  __pyx_cur_scope->__pyx_v_Pl = __pyx_v_Pl;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_Pl);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_Pl);

  /* "oasis.pyx":954
 * 
 *                 def baz(y, Pt, Pl):
 *                     return minimize(lambda x: bar(y, x, Pt, Pl), (b, g),             # <<<<<<<<<<<<<<
 *                                     bounds=((0 if b_nonneg else None, None), (.001, .999)),
 *                                     method='L-BFGS-B',
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_minimize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 954, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_5oasis_20constrained_oasisAR1_3baz_1lambda1, 0, __pyx_n_s_constrained_oasisAR1_locals_baz, ((PyObject*)__pyx_cur_scope), __pyx_n_s_oasis, __pyx_d, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 954, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_b); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 954, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_g); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 954, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 954, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 954, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_5);
  __pyx_t_2 = 0;
  __pyx_t_5 = 0;

  /* "oasis.pyx":955
 *                 def baz(y, Pt, Pl):
 *                     return minimize(lambda x: bar(y, x, Pt, Pl), (b, g),
 *                                     bounds=((0 if b_nonneg else None, None), (.001, .999)),             # <<<<<<<<<<<<<<
 *                                     method='L-BFGS-B',
 *                                     options={'gtol': 1e-04, 'maxiter': 3, 'ftol': 1e-05})
 */
  __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 955, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_b_nonneg)) { __Pyx_RaiseClosureNameError("b_nonneg"); __PYX_ERR(0, 955, __pyx_L1_error) }
  __pyx_t_6 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_cur_scope->__pyx_outer_scope->__pyx_v_b_nonneg)); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 955, __pyx_L1_error)
  if (__pyx_t_6) {
    __Pyx_INCREF(__pyx_int_0);
    __pyx_t_2 = __pyx_int_0;
  } else {
    __Pyx_INCREF(Py_None);
    __pyx_t_2 = Py_None;
  }
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 955, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  PyTuple_SET_ITEM(__pyx_t_3, 1, Py_None);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 955, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __Pyx_INCREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_tuple__7);
  __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_bounds, __pyx_t_2) < 0) __PYX_ERR(0, 955, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_method, __pyx_kp_s_L_BFGS_B) < 0) __PYX_ERR(0, 955, __pyx_L1_error)

  /* "oasis.pyx":957
 *                                     bounds=((0 if b_nonneg else None, None), (.001, .999)),
 *                                     method='L-BFGS-B',
 *                                     options={'gtol': 1e-04, 'maxiter': 3, 'ftol': 1e-05})             # <<<<<<<<<<<<<<
 *                 result = baz(y, Pt, Pl)
 *                 if fabs(result['x'][1] - g) < 1e-3:
 */
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 957, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_gtol, __pyx_float_1eneg_04) < 0) __PYX_ERR(0, 957, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_maxiter, __pyx_int_3) < 0) __PYX_ERR(0, 957, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_ftol, __pyx_float_1eneg_05) < 0) __PYX_ERR(0, 957, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_options, __pyx_t_2) < 0) __PYX_ERR(0, 955, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "oasis.pyx":954
 * 
 *                 def baz(y, Pt, Pl):
 *                     return minimize(lambda x: bar(y, x, Pt, Pl), (b, g),             # <<<<<<<<<<<<<<
 *                                     bounds=((0 if b_nonneg else None, None), (.001, .999)),
 *                                     method='L-BFGS-B',
 */
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 954, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "oasis.pyx":953
 *                                 for i in range(P.size() if P.size() < optimize_g else optimize_g)])
 * 
 *                 def baz(y, Pt, Pl):             # <<<<<<<<<<<<<<
 *                     return minimize(lambda x: bar(y, x, Pt, Pl), (b, g),
 *                                     bounds=((0 if b_nonneg else None, None), (.001, .999)),
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("oasis.constrained_oasisAR1.baz", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "oasis.pyx":659
 * 
 * @cython.cdivision(True)
 * def constrained_oasisAR1(np.ndarray[SINGLE, ndim=1] y, SINGLE g, SINGLE sn,             # <<<<<<<<<<<<<<
 *                          bool optimize_b=False, bool b_nonneg=True, int optimize_g=0,
 *                          int decimate=1, int max_iter=5, int penalty=1):
 */

static PyObject *__pyx_pf_5oasis_2constrained_oasisAR1(CYTHON_UNUSED PyObject *__pyx_self, PyArrayObject *__pyx_v_y, __pyx_t_5oasis_SINGLE __pyx_v_g, __pyx_t_5oasis_SINGLE __pyx_v_sn, PyBoolObject *__pyx_v_optimize_b, PyBoolObject *__pyx_v_b_nonneg, int __pyx_v_optimize_g, int __pyx_v_decimate, int __pyx_v_max_iter, int __pyx_v_penalty) {
  struct __pyx_obj_5oasis___pyx_scope_struct__constrained_oasisAR1 *__pyx_cur_scope;
  Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_j;
  Py_ssize_t __pyx_v_k;
  Py_ssize_t __pyx_v_t;
  unsigned int __pyx_v_count;
  __pyx_t_5oasis_SINGLE __pyx_v_thresh;
  __pyx_t_5oasis_SINGLE __pyx_v_RSS;
  __pyx_t_5oasis_SINGLE __pyx_v_aa;
  __pyx_t_5oasis_SINGLE __pyx_v_bb;
  __pyx_t_5oasis_SINGLE __pyx_v_cc;
  __pyx_t_5oasis_SINGLE __pyx_v_dlam;
  __pyx_t_5oasis_SINGLE __pyx_v_db;
  __pyx_t_5oasis_SINGLE __pyx_v_dphi;
  PyBoolObject *__pyx_v_g_converged = 0;
  PyArrayObject *__pyx_v_c = 0;
  PyArrayObject *__pyx_v_s = 0;
  PyArrayObject *__pyx_v_res = 0;
  PyArrayObject *__pyx_v_tmp = 0;
  PyArrayObject *__pyx_v_fluor = 0;
  PyArrayObject *__pyx_v_h = 0;
  PyArrayObject *__pyx_v_ff = 0;
  PyArrayObject *__pyx_v_ll = 0;
  struct __pyx_t_5oasis_Pool __pyx_v_newpool;
  PyObject *__pyx_v_oasis1strun = 0;
  PyObject *__pyx_v_oasis = 0;
  PyObject *__pyx_v_idx = NULL;
  PyObject *__pyx_v_Pt = NULL;
  PyObject *__pyx_v_Pl = NULL;
  PyObject *__pyx_v_baz = 0;
  PyObject *__pyx_v_q = NULL;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_v_lls = NULL;
  PyObject *__pyx_v_pos = NULL;
  PyObject *__pyx_v_p = NULL;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_c;
  __Pyx_Buffer __pyx_pybuffer_c;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_ff;
  __Pyx_Buffer __pyx_pybuffer_ff;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_fluor;
  __Pyx_Buffer __pyx_pybuffer_fluor;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_h;
  __Pyx_Buffer __pyx_pybuffer_h;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_ll;
  __Pyx_Buffer __pyx_pybuffer_ll;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_res;
  __Pyx_Buffer __pyx_pybuffer_res;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_s;
  __Pyx_Buffer __pyx_pybuffer_s;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_tmp;
  __Pyx_Buffer __pyx_pybuffer_tmp;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_y;
  __Pyx_Buffer __pyx_pybuffer_y;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyArrayObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyArrayObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  int __pyx_t_17;
  PyObject *(*__pyx_t_18)(PyObject *);
  std::vector<struct __pyx_t_5oasis_Pool>  __pyx_t_19;
  __pyx_t_5oasis_SINGLE __pyx_t_20;
  size_t __pyx_t_21;
  Py_ssize_t __pyx_t_22;
  Py_ssize_t __pyx_t_23;
  Py_ssize_t __pyx_t_24;
  Py_ssize_t __pyx_t_25;
  int __pyx_t_26;
  unsigned int __pyx_t_27;
  PyObject *(*__pyx_t_28)(PyObject *);
  double __pyx_t_29;
  double __pyx_t_30;
  double __pyx_t_31;
  Py_ssize_t __pyx_t_32;
  Py_ssize_t __pyx_t_33;
  __pyx_t_5oasis_SINGLE __pyx_t_34;
  PyObject *__pyx_t_35 = NULL;
  PyObject *__pyx_t_36 = NULL;
  PyArrayObject *__pyx_t_37 = NULL;
  Py_ssize_t __pyx_t_38;
  Py_ssize_t __pyx_t_39;
  Py_ssize_t __pyx_t_40;
  Py_ssize_t __pyx_t_41;
  Py_ssize_t __pyx_t_42;
  Py_ssize_t __pyx_t_43;
  Py_ssize_t __pyx_t_44;
  Py_ssize_t __pyx_t_45;
  Py_ssize_t __pyx_t_46;
  PyObject *__pyx_t_47 = NULL;
  __Pyx_RefNannySetupContext("constrained_oasisAR1", 0);
  __pyx_cur_scope = (struct __pyx_obj_5oasis___pyx_scope_struct__constrained_oasisAR1 *)__pyx_tp_new_5oasis___pyx_scope_struct__constrained_oasisAR1(__pyx_ptype_5oasis___pyx_scope_struct__constrained_oasisAR1, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_v_g = __pyx_v_g;
  __pyx_cur_scope->__pyx_v_b_nonneg = __pyx_v_b_nonneg;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_b_nonneg);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_b_nonneg);
  __pyx_cur_scope->__pyx_v_optimize_g = __pyx_v_optimize_g;
  __Pyx_INCREF((PyObject *)__pyx_v_y);
  __pyx_pybuffer_c.pybuffer.buf = NULL;
  __pyx_pybuffer_c.refcount = 0;
  __pyx_pybuffernd_c.data = NULL;
  __pyx_pybuffernd_c.rcbuffer = &__pyx_pybuffer_c;
  __pyx_pybuffer_s.pybuffer.buf = NULL;
  __pyx_pybuffer_s.refcount = 0;
  __pyx_pybuffernd_s.data = NULL;
  __pyx_pybuffernd_s.rcbuffer = &__pyx_pybuffer_s;
  __pyx_pybuffer_res.pybuffer.buf = NULL;
  __pyx_pybuffer_res.refcount = 0;
  __pyx_pybuffernd_res.data = NULL;
  __pyx_pybuffernd_res.rcbuffer = &__pyx_pybuffer_res;
  __pyx_pybuffer_tmp.pybuffer.buf = NULL;
  __pyx_pybuffer_tmp.refcount = 0;
  __pyx_pybuffernd_tmp.data = NULL;
  __pyx_pybuffernd_tmp.rcbuffer = &__pyx_pybuffer_tmp;
  __pyx_pybuffer_fluor.pybuffer.buf = NULL;
  __pyx_pybuffer_fluor.refcount = 0;
  __pyx_pybuffernd_fluor.data = NULL;
  __pyx_pybuffernd_fluor.rcbuffer = &__pyx_pybuffer_fluor;
  __pyx_pybuffer_h.pybuffer.buf = NULL;
  __pyx_pybuffer_h.refcount = 0;
  __pyx_pybuffernd_h.data = NULL;
  __pyx_pybuffernd_h.rcbuffer = &__pyx_pybuffer_h;
  __pyx_pybuffer_ff.pybuffer.buf = NULL;
  __pyx_pybuffer_ff.refcount = 0;
  __pyx_pybuffernd_ff.data = NULL;
  __pyx_pybuffernd_ff.rcbuffer = &__pyx_pybuffer_ff;
  __pyx_pybuffer_ll.pybuffer.buf = NULL;
  __pyx_pybuffer_ll.refcount = 0;
  __pyx_pybuffernd_ll.data = NULL;
  __pyx_pybuffernd_ll.rcbuffer = &__pyx_pybuffer_ll;
  __pyx_pybuffer_y.pybuffer.buf = NULL;
  __pyx_pybuffer_y.refcount = 0;
  __pyx_pybuffernd_y.data = NULL;
  __pyx_pybuffernd_y.rcbuffer = &__pyx_pybuffer_y;
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_y.rcbuffer->pybuffer, (PyObject*)__pyx_v_y, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) __PYX_ERR(0, 659, __pyx_L1_error)
  }
  __pyx_pybuffernd_y.diminfo[0].strides = __pyx_pybuffernd_y.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_y.diminfo[0].shape = __pyx_pybuffernd_y.rcbuffer->pybuffer.shape[0];

  /* "oasis.pyx":719
 *         Pool newpool
 * 
 *     T = len(y)             # <<<<<<<<<<<<<<
 *     thresh = sn * sn * T
 *     if decimate > 1:  # parameter changes due to downsampling
 */
  __pyx_t_1 = PyObject_Length(((PyObject *)__pyx_v_y)); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 719, __pyx_L1_error)
  __pyx_cur_scope->__pyx_v_T = __pyx_t_1;

  /* "oasis.pyx":720
 * 
 *     T = len(y)
 *     thresh = sn * sn * T             # <<<<<<<<<<<<<<
 *     if decimate > 1:  # parameter changes due to downsampling
 *         fluor = y.copy()
 */
  __pyx_v_thresh = ((__pyx_v_sn * __pyx_v_sn) * __pyx_cur_scope->__pyx_v_T);

  /* "oasis.pyx":721
 *     T = len(y)
 *     thresh = sn * sn * T
 *     if decimate > 1:  # parameter changes due to downsampling             # <<<<<<<<<<<<<<
 *         fluor = y.copy()
 *         y = y.reshape(-1, decimate).mean(1)
 */
  __pyx_t_2 = ((__pyx_v_decimate > 1) != 0);
  if (__pyx_t_2) {

    /* "oasis.pyx":722
 *     thresh = sn * sn * T
 *     if decimate > 1:  # parameter changes due to downsampling
 *         fluor = y.copy()             # <<<<<<<<<<<<<<
 *         y = y.reshape(-1, decimate).mean(1)
 *         g = g**decimate
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_y), __pyx_n_s_copy); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 722, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (__pyx_t_5) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 722, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 722, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 722, __pyx_L1_error)
    __pyx_t_6 = ((PyArrayObject *)__pyx_t_3);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_fluor.rcbuffer->pybuffer);
      __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_fluor.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
      if (unlikely(__pyx_t_7 < 0)) {
        PyErr_Fetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_fluor.rcbuffer->pybuffer, (PyObject*)__pyx_v_fluor, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
        }
      }
      __pyx_pybuffernd_fluor.diminfo[0].strides = __pyx_pybuffernd_fluor.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_fluor.diminfo[0].shape = __pyx_pybuffernd_fluor.rcbuffer->pybuffer.shape[0];
      if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 722, __pyx_L1_error)
    }
    __pyx_t_6 = 0;
    __pyx_v_fluor = ((PyArrayObject *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "oasis.pyx":723
 *     if decimate > 1:  # parameter changes due to downsampling
 *         fluor = y.copy()
 *         y = y.reshape(-1, decimate).mean(1)             # <<<<<<<<<<<<<<
 *         g = g**decimate
 *         thresh = thresh / decimate / decimate
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_y), __pyx_n_s_reshape); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 723, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_decimate); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 723, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_11 = NULL;
    __pyx_t_1 = 0;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_11)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_11);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_1 = 1;
      }
    }
    __pyx_t_12 = PyTuple_New(2+__pyx_t_1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 723, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    if (__pyx_t_11) {
      __Pyx_GIVEREF(__pyx_t_11); PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_11); __pyx_t_11 = NULL;
    }
    __Pyx_INCREF(__pyx_int_neg_1);
    __Pyx_GIVEREF(__pyx_int_neg_1);
    PyTuple_SET_ITEM(__pyx_t_12, 0+__pyx_t_1, __pyx_int_neg_1);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_12, 1+__pyx_t_1, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_12, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 723, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_mean); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 723, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 723, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 723, __pyx_L1_error)
    __pyx_t_13 = ((PyArrayObject *)__pyx_t_3);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_y.rcbuffer->pybuffer);
      __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_y.rcbuffer->pybuffer, (PyObject*)__pyx_t_13, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
      if (unlikely(__pyx_t_7 < 0)) {
        PyErr_Fetch(&__pyx_t_10, &__pyx_t_9, &__pyx_t_8);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_y.rcbuffer->pybuffer, (PyObject*)__pyx_v_y, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_8);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_10, __pyx_t_9, __pyx_t_8);
        }
      }
      __pyx_pybuffernd_y.diminfo[0].strides = __pyx_pybuffernd_y.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_y.diminfo[0].shape = __pyx_pybuffernd_y.rcbuffer->pybuffer.shape[0];
      if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 723, __pyx_L1_error)
    }
    __pyx_t_13 = 0;
    __Pyx_DECREF_SET(__pyx_v_y, ((PyArrayObject *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "oasis.pyx":724
 *         fluor = y.copy()
 *         y = y.reshape(-1, decimate).mean(1)
 *         g = g**decimate             # <<<<<<<<<<<<<<
 *         thresh = thresh / decimate / decimate
 *         T = len(y)
 */
    __pyx_cur_scope->__pyx_v_g = powf(__pyx_cur_scope->__pyx_v_g, ((__pyx_t_5oasis_SINGLE)__pyx_v_decimate));

    /* "oasis.pyx":725
 *         y = y.reshape(-1, decimate).mean(1)
 *         g = g**decimate
 *         thresh = thresh / decimate / decimate             # <<<<<<<<<<<<<<
 *         T = len(y)
 *     # explicit kernel, useful for constructing solution
 */
    __pyx_v_thresh = ((__pyx_v_thresh / __pyx_v_decimate) / __pyx_v_decimate);

    /* "oasis.pyx":726
 *         g = g**decimate
 *         thresh = thresh / decimate / decimate
 *         T = len(y)             # <<<<<<<<<<<<<<
 *     # explicit kernel, useful for constructing solution
 *     h = np.exp(log(g) * np.arange(T, dtype=np.float32))
 */
    __pyx_t_1 = PyObject_Length(((PyObject *)__pyx_v_y)); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 726, __pyx_L1_error)
    __pyx_cur_scope->__pyx_v_T = __pyx_t_1;

    /* "oasis.pyx":721
 *     T = len(y)
 *     thresh = sn * sn * T
 *     if decimate > 1:  # parameter changes due to downsampling             # <<<<<<<<<<<<<<
 *         fluor = y.copy()
 *         y = y.reshape(-1, decimate).mean(1)
 */
  }

  /* "oasis.pyx":728
 *         T = len(y)
 *     # explicit kernel, useful for constructing solution
 *     h = np.exp(log(g) * np.arange(T, dtype=np.float32))             # <<<<<<<<<<<<<<
 *     c = np.empty(T, dtype=np.float32)
 *     # [value, weight, start time, length] of pool
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 728, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_exp); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 728, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyFloat_FromDouble(log(__pyx_cur_scope->__pyx_v_g)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 728, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 728, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_arange); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 728, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyInt_From_unsigned_int(__pyx_cur_scope->__pyx_v_T); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 728, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_14 = PyTuple_New(1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 728, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 728, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_15 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 728, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_float32); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 728, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_16) < 0) __PYX_ERR(0, 728, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __pyx_t_16 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_14, __pyx_t_5); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 728, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyNumber_Multiply(__pyx_t_4, __pyx_t_16); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 728, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __pyx_t_16 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_12))) {
    __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_12);
    if (likely(__pyx_t_16)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
      __Pyx_INCREF(__pyx_t_16);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_12, function);
    }
  }
  if (!__pyx_t_16) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_12, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 728, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 728, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_16); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_16); __pyx_t_16 = NULL;
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 728, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 728, __pyx_L1_error)
  __pyx_t_6 = ((PyArrayObject *)__pyx_t_3);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_h.rcbuffer->pybuffer);
    __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_h.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_7 < 0)) {
      PyErr_Fetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_h.rcbuffer->pybuffer, (PyObject*)__pyx_v_h, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
      }
    }
    __pyx_pybuffernd_h.diminfo[0].strides = __pyx_pybuffernd_h.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_h.diminfo[0].shape = __pyx_pybuffernd_h.rcbuffer->pybuffer.shape[0];
    if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 728, __pyx_L1_error)
  }
  __pyx_t_6 = 0;
  __pyx_v_h = ((PyArrayObject *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "oasis.pyx":729
 *     # explicit kernel, useful for constructing solution
 *     h = np.exp(log(g) * np.arange(T, dtype=np.float32))
 *     c = np.empty(T, dtype=np.float32)             # <<<<<<<<<<<<<<
 *     # [value, weight, start time, length] of pool
 *     lam = 0  # sn/sqrt(1-g*g)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 729, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_empty); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 729, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_From_unsigned_int(__pyx_cur_scope->__pyx_v_T); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 729, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 729, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 729, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 729, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_float32); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 729, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_16) < 0) __PYX_ERR(0, 729, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __pyx_t_16 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 729, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!(likely(((__pyx_t_16) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_16, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 729, __pyx_L1_error)
  __pyx_t_6 = ((PyArrayObject *)__pyx_t_16);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_c.rcbuffer->pybuffer);
    __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_7 < 0)) {
      PyErr_Fetch(&__pyx_t_10, &__pyx_t_9, &__pyx_t_8);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_v_c, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_8);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_10, __pyx_t_9, __pyx_t_8);
      }
    }
    __pyx_pybuffernd_c.diminfo[0].strides = __pyx_pybuffernd_c.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_c.diminfo[0].shape = __pyx_pybuffernd_c.rcbuffer->pybuffer.shape[0];
    if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 729, __pyx_L1_error)
  }
  __pyx_t_6 = 0;
  __pyx_v_c = ((PyArrayObject *)__pyx_t_16);
  __pyx_t_16 = 0;

  /* "oasis.pyx":731
 *     c = np.empty(T, dtype=np.float32)
 *     # [value, weight, start time, length] of pool
 *     lam = 0  # sn/sqrt(1-g*g)             # <<<<<<<<<<<<<<
 * 
 *     def oasis1strun(np.ndarray[SINGLE, ndim=1] y, SINGLE g, np.ndarray[SINGLE, ndim=1] c):
 */
  __pyx_cur_scope->__pyx_v_lam = 0.0;

  /* "oasis.pyx":733
 *     lam = 0  # sn/sqrt(1-g*g)
 * 
 *     def oasis1strun(np.ndarray[SINGLE, ndim=1] y, SINGLE g, np.ndarray[SINGLE, ndim=1] c):             # <<<<<<<<<<<<<<
 * 
 *         cdef:
 */
  __pyx_t_16 = __Pyx_CyFunction_NewEx(&__pyx_mdef_5oasis_20constrained_oasisAR1_1oasis1strun, 0, __pyx_n_s_constrained_oasisAR1_locals_oasi, NULL, __pyx_n_s_oasis, __pyx_d, ((PyObject *)__pyx_codeobj__10)); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 733, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_v_oasis1strun = __pyx_t_16;
  __pyx_t_16 = 0;

  /* "oasis.pyx":772
 *         return c, P
 * 
 *     def oasis(vector[Pool] P, SINGLE g, np.ndarray[SINGLE, ndim=1] c):             # <<<<<<<<<<<<<<
 * 
 *         cdef:
 */
  __pyx_t_16 = __Pyx_CyFunction_NewEx(&__pyx_mdef_5oasis_20constrained_oasisAR1_3oasis, 0, __pyx_n_s_constrained_oasisAR1_locals_oasi_2, NULL, __pyx_n_s_oasis, __pyx_d, ((PyObject *)__pyx_codeobj__12)); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 772, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_v_oasis = __pyx_t_16;
  __pyx_t_16 = 0;

  /* "oasis.pyx":798
 *         return c, P
 * 
 *     g_converged = False             # <<<<<<<<<<<<<<
 *     count = 0
 *     if not optimize_b:  # don't optimize b, just the dual variable lambda and g if optimize_g>0
 */
  __Pyx_INCREF(Py_False);
  __pyx_v_g_converged = ((PyBoolObject *)Py_False);

  /* "oasis.pyx":799
 * 
 *     g_converged = False
 *     count = 0             # <<<<<<<<<<<<<<
 *     if not optimize_b:  # don't optimize b, just the dual variable lambda and g if optimize_g>0
 *         c, P = oasis1strun(y, g, c)
 */
  __pyx_v_count = 0;

  /* "oasis.pyx":800
 *     g_converged = False
 *     count = 0
 *     if not optimize_b:  # don't optimize b, just the dual variable lambda and g if optimize_g>0             # <<<<<<<<<<<<<<
 *         c, P = oasis1strun(y, g, c)
 *         tmp = np.empty(T, dtype=np.float32)
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_optimize_b)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 800, __pyx_L1_error)
  __pyx_t_17 = ((!__pyx_t_2) != 0);
  if (__pyx_t_17) {

    /* "oasis.pyx":801
 *     count = 0
 *     if not optimize_b:  # don't optimize b, just the dual variable lambda and g if optimize_g>0
 *         c, P = oasis1strun(y, g, c)             # <<<<<<<<<<<<<<
 *         tmp = np.empty(T, dtype=np.float32)
 *         res = y - c
 */
    __pyx_t_16 = __pyx_pf_5oasis_20constrained_oasisAR1_oasis1strun(__pyx_v_oasis1strun, ((PyArrayObject *)__pyx_v_y), __pyx_cur_scope->__pyx_v_g, ((PyArrayObject *)__pyx_v_c)); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 801, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    if ((likely(PyTuple_CheckExact(__pyx_t_16))) || (PyList_CheckExact(__pyx_t_16))) {
      PyObject* sequence = __pyx_t_16;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 801, __pyx_L1_error)
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 801, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 801, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      #endif
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_12 = PyObject_GetIter(__pyx_t_16); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 801, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      __pyx_t_18 = Py_TYPE(__pyx_t_12)->tp_iternext;
      index = 0; __pyx_t_3 = __pyx_t_18(__pyx_t_12); if (unlikely(!__pyx_t_3)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_3);
      index = 1; __pyx_t_4 = __pyx_t_18(__pyx_t_12); if (unlikely(!__pyx_t_4)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_4);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_18(__pyx_t_12), 2) < 0) __PYX_ERR(0, 801, __pyx_L1_error)
      __pyx_t_18 = NULL;
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_t_18 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 801, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 801, __pyx_L1_error)
    __pyx_t_19 = __pyx_convert_vector_from_py_struct____pyx_t_5oasis_Pool(__pyx_t_4); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 801, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_6 = ((PyArrayObject *)__pyx_t_3);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_c.rcbuffer->pybuffer);
      __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
      if (unlikely(__pyx_t_7 < 0)) {
        PyErr_Fetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_v_c, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
        }
      }
      __pyx_pybuffernd_c.diminfo[0].strides = __pyx_pybuffernd_c.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_c.diminfo[0].shape = __pyx_pybuffernd_c.rcbuffer->pybuffer.shape[0];
      if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 801, __pyx_L1_error)
    }
    __pyx_t_6 = 0;
    __Pyx_DECREF_SET(__pyx_v_c, ((PyArrayObject *)__pyx_t_3));
    __pyx_t_3 = 0;
    __pyx_cur_scope->__pyx_v_P = __pyx_t_19;

    /* "oasis.pyx":802
 *     if not optimize_b:  # don't optimize b, just the dual variable lambda and g if optimize_g>0
 *         c, P = oasis1strun(y, g, c)
 *         tmp = np.empty(T, dtype=np.float32)             # <<<<<<<<<<<<<<
 *         res = y - c
 *         RSS = (res).dot(res)
 */
    __pyx_t_16 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 802, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_16, __pyx_n_s_empty); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 802, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __pyx_t_16 = __Pyx_PyInt_From_unsigned_int(__pyx_cur_scope->__pyx_v_T); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 802, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 802, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_16);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_16);
    __pyx_t_16 = 0;
    __pyx_t_16 = PyDict_New(); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 802, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __pyx_t_12 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 802, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_float32); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 802, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    if (PyDict_SetItem(__pyx_t_16, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 802, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, __pyx_t_16); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 802, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 802, __pyx_L1_error)
    __pyx_t_6 = ((PyArrayObject *)__pyx_t_5);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_tmp.rcbuffer->pybuffer);
      __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_tmp.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack);
      if (unlikely(__pyx_t_7 < 0)) {
        PyErr_Fetch(&__pyx_t_10, &__pyx_t_9, &__pyx_t_8);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_tmp.rcbuffer->pybuffer, (PyObject*)__pyx_v_tmp, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_8);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_10, __pyx_t_9, __pyx_t_8);
        }
      }
      __pyx_pybuffernd_tmp.diminfo[0].strides = __pyx_pybuffernd_tmp.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_tmp.diminfo[0].shape = __pyx_pybuffernd_tmp.rcbuffer->pybuffer.shape[0];
      if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 802, __pyx_L1_error)
    }
    __pyx_t_6 = 0;
    __pyx_v_tmp = ((PyArrayObject *)__pyx_t_5);
    __pyx_t_5 = 0;

    /* "oasis.pyx":803
 *         c, P = oasis1strun(y, g, c)
 *         tmp = np.empty(T, dtype=np.float32)
 *         res = y - c             # <<<<<<<<<<<<<<
 *         RSS = (res).dot(res)
 *         b = 0
 */
    __pyx_t_5 = PyNumber_Subtract(((PyObject *)__pyx_v_y), ((PyObject *)__pyx_v_c)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 803, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 803, __pyx_L1_error)
    __pyx_t_6 = ((PyArrayObject *)__pyx_t_5);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_res.rcbuffer->pybuffer);
      __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_res.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
      if (unlikely(__pyx_t_7 < 0)) {
        PyErr_Fetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_res.rcbuffer->pybuffer, (PyObject*)__pyx_v_res, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
        }
      }
      __pyx_pybuffernd_res.diminfo[0].strides = __pyx_pybuffernd_res.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_res.diminfo[0].shape = __pyx_pybuffernd_res.rcbuffer->pybuffer.shape[0];
      if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 803, __pyx_L1_error)
    }
    __pyx_t_6 = 0;
    __pyx_v_res = ((PyArrayObject *)__pyx_t_5);
    __pyx_t_5 = 0;

    /* "oasis.pyx":804
 *         tmp = np.empty(T, dtype=np.float32)
 *         res = y - c
 *         RSS = (res).dot(res)             # <<<<<<<<<<<<<<
 *         b = 0
 *         # until noise constraint is tight or spike train is empty
 */
    __pyx_t_16 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_res), __pyx_n_s_dot); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 804, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __pyx_t_3 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_16))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_16);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_16, function);
      }
    }
    if (!__pyx_t_3) {
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_16, ((PyObject *)__pyx_v_res)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 804, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
    } else {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 804, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(((PyObject *)__pyx_v_res));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_res));
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, ((PyObject *)__pyx_v_res));
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_16, __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 804, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __pyx_t_20 = __pyx_PyFloat_AsFloat(__pyx_t_5); if (unlikely((__pyx_t_20 == (npy_float32)-1) && PyErr_Occurred())) __PYX_ERR(0, 804, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_RSS = __pyx_t_20;

    /* "oasis.pyx":805
 *         res = y - c
 *         RSS = (res).dot(res)
 *         b = 0             # <<<<<<<<<<<<<<
 *         # until noise constraint is tight or spike train is empty
 *         while RSS < thresh * (1 - 1e-4) and c.sum() > 1e-9:
 */
    __pyx_cur_scope->__pyx_v_b = 0.0;

    /* "oasis.pyx":807
 *         b = 0
 *         # until noise constraint is tight or spike train is empty
 *         while RSS < thresh * (1 - 1e-4) and c.sum() > 1e-9:             # <<<<<<<<<<<<<<
 *             # update lam
 *             for i in range(P.size()):
 */
    while (1) {
      __pyx_t_2 = ((__pyx_v_RSS < (__pyx_v_thresh * (1.0 - 1e-4))) != 0);
      if (__pyx_t_2) {
      } else {
        __pyx_t_17 = __pyx_t_2;
        goto __pyx_L9_bool_binop_done;
      }
      __pyx_t_16 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_c), __pyx_n_s_sum); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 807, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_16))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_16);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_16, function);
        }
      }
      if (__pyx_t_4) {
        __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_16, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 807, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_t_16); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 807, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      __pyx_t_16 = PyObject_RichCompare(__pyx_t_5, __pyx_float_1eneg_9, Py_GT); __Pyx_XGOTREF(__pyx_t_16); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 807, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_16); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 807, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      __pyx_t_17 = __pyx_t_2;
      __pyx_L9_bool_binop_done:;
      if (!__pyx_t_17) break;

      /* "oasis.pyx":809
 *         while RSS < thresh * (1 - 1e-4) and c.sum() > 1e-9:
 *             # update lam
 *             for i in range(P.size()):             # <<<<<<<<<<<<<<
 *                 if i == P.size() - 1:  # for |s|_1 instead |c|_1 sparsity
 *                     # faster than tmp[P[i].t:P[i].t + P[i].l] = 1 / P[i].w * h[:P[i].l]
 */
      __pyx_t_21 = __pyx_cur_scope->__pyx_v_P.size();
      for (__pyx_t_1 = 0; __pyx_t_1 < __pyx_t_21; __pyx_t_1+=1) {
        __pyx_v_i = __pyx_t_1;

        /* "oasis.pyx":810
 *             # update lam
 *             for i in range(P.size()):
 *                 if i == P.size() - 1:  # for |s|_1 instead |c|_1 sparsity             # <<<<<<<<<<<<<<
 *                     # faster than tmp[P[i].t:P[i].t + P[i].l] = 1 / P[i].w * h[:P[i].l]
 *                     aa = 1 / P[i].w
 */
        __pyx_t_17 = ((__pyx_v_i == (__pyx_cur_scope->__pyx_v_P.size() - 1)) != 0);
        if (__pyx_t_17) {

          /* "oasis.pyx":812
 *                 if i == P.size() - 1:  # for |s|_1 instead |c|_1 sparsity
 *                     # faster than tmp[P[i].t:P[i].t + P[i].l] = 1 / P[i].w * h[:P[i].l]
 *                     aa = 1 / P[i].w             # <<<<<<<<<<<<<<
 *                     for j in range(P[i].l):
 *                         tmp[P[i].t + j] = aa
 */
          __pyx_v_aa = (1.0 / (__pyx_cur_scope->__pyx_v_P[__pyx_v_i]).w);

          /* "oasis.pyx":813
 *                     # faster than tmp[P[i].t:P[i].t + P[i].l] = 1 / P[i].w * h[:P[i].l]
 *                     aa = 1 / P[i].w
 *                     for j in range(P[i].l):             # <<<<<<<<<<<<<<
 *                         tmp[P[i].t + j] = aa
 *                         aa *= g
 */
          __pyx_t_22 = (__pyx_cur_scope->__pyx_v_P[__pyx_v_i]).l;
          for (__pyx_t_23 = 0; __pyx_t_23 < __pyx_t_22; __pyx_t_23+=1) {
            __pyx_v_j = __pyx_t_23;

            /* "oasis.pyx":814
 *                     aa = 1 / P[i].w
 *                     for j in range(P[i].l):
 *                         tmp[P[i].t + j] = aa             # <<<<<<<<<<<<<<
 *                         aa *= g
 *                 else:
 */
            __pyx_t_24 = ((__pyx_cur_scope->__pyx_v_P[__pyx_v_i]).t + __pyx_v_j);
            __pyx_t_7 = -1;
            if (__pyx_t_24 < 0) {
              __pyx_t_24 += __pyx_pybuffernd_tmp.diminfo[0].shape;
              if (unlikely(__pyx_t_24 < 0)) __pyx_t_7 = 0;
            } else if (unlikely(__pyx_t_24 >= __pyx_pybuffernd_tmp.diminfo[0].shape)) __pyx_t_7 = 0;
            if (unlikely(__pyx_t_7 != -1)) {
              __Pyx_RaiseBufferIndexError(__pyx_t_7);
              __PYX_ERR(0, 814, __pyx_L1_error)
            }
            *__Pyx_BufPtrStrided1d(__pyx_t_5oasis_SINGLE *, __pyx_pybuffernd_tmp.rcbuffer->pybuffer.buf, __pyx_t_24, __pyx_pybuffernd_tmp.diminfo[0].strides) = __pyx_v_aa;

            /* "oasis.pyx":815
 *                     for j in range(P[i].l):
 *                         tmp[P[i].t + j] = aa
 *                         aa *= g             # <<<<<<<<<<<<<<
 *                 else:
 *                     aa = (1 - g**P[i].l) / P[i].w
 */
            __pyx_v_aa = (__pyx_v_aa * __pyx_cur_scope->__pyx_v_g);
          }

          /* "oasis.pyx":810
 *             # update lam
 *             for i in range(P.size()):
 *                 if i == P.size() - 1:  # for |s|_1 instead |c|_1 sparsity             # <<<<<<<<<<<<<<
 *                     # faster than tmp[P[i].t:P[i].t + P[i].l] = 1 / P[i].w * h[:P[i].l]
 *                     aa = 1 / P[i].w
 */
          goto __pyx_L13;
        }

        /* "oasis.pyx":817
 *                         aa *= g
 *                 else:
 *                     aa = (1 - g**P[i].l) / P[i].w             # <<<<<<<<<<<<<<
 *                     for j in range(P[i].l):
 *                         tmp[P[i].t + j] = aa
 */
        /*else*/ {
          __pyx_v_aa = ((1.0 - powf(__pyx_cur_scope->__pyx_v_g, ((__pyx_t_5oasis_SINGLE)(__pyx_cur_scope->__pyx_v_P[__pyx_v_i]).l))) / (__pyx_cur_scope->__pyx_v_P[__pyx_v_i]).w);

          /* "oasis.pyx":818
 *                 else:
 *                     aa = (1 - g**P[i].l) / P[i].w
 *                     for j in range(P[i].l):             # <<<<<<<<<<<<<<
 *                         tmp[P[i].t + j] = aa
 *                         aa *= g
 */
          __pyx_t_22 = (__pyx_cur_scope->__pyx_v_P[__pyx_v_i]).l;
          for (__pyx_t_23 = 0; __pyx_t_23 < __pyx_t_22; __pyx_t_23+=1) {
            __pyx_v_j = __pyx_t_23;

            /* "oasis.pyx":819
 *                     aa = (1 - g**P[i].l) / P[i].w
 *                     for j in range(P[i].l):
 *                         tmp[P[i].t + j] = aa             # <<<<<<<<<<<<<<
 *                         aa *= g
 *             aa = tmp.dot(tmp)
 */
            __pyx_t_25 = ((__pyx_cur_scope->__pyx_v_P[__pyx_v_i]).t + __pyx_v_j);
            __pyx_t_7 = -1;
            if (__pyx_t_25 < 0) {
              __pyx_t_25 += __pyx_pybuffernd_tmp.diminfo[0].shape;
              if (unlikely(__pyx_t_25 < 0)) __pyx_t_7 = 0;
            } else if (unlikely(__pyx_t_25 >= __pyx_pybuffernd_tmp.diminfo[0].shape)) __pyx_t_7 = 0;
            if (unlikely(__pyx_t_7 != -1)) {
              __Pyx_RaiseBufferIndexError(__pyx_t_7);
              __PYX_ERR(0, 819, __pyx_L1_error)
            }
            *__Pyx_BufPtrStrided1d(__pyx_t_5oasis_SINGLE *, __pyx_pybuffernd_tmp.rcbuffer->pybuffer.buf, __pyx_t_25, __pyx_pybuffernd_tmp.diminfo[0].strides) = __pyx_v_aa;

            /* "oasis.pyx":820
 *                     for j in range(P[i].l):
 *                         tmp[P[i].t + j] = aa
 *                         aa *= g             # <<<<<<<<<<<<<<
 *             aa = tmp.dot(tmp)
 *             bb = res.dot(tmp)
 */
            __pyx_v_aa = (__pyx_v_aa * __pyx_cur_scope->__pyx_v_g);
          }
        }
        __pyx_L13:;
      }

      /* "oasis.pyx":821
 *                         tmp[P[i].t + j] = aa
 *                         aa *= g
 *             aa = tmp.dot(tmp)             # <<<<<<<<<<<<<<
 *             bb = res.dot(tmp)
 *             cc = RSS - thresh
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_tmp), __pyx_n_s_dot); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 821, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      if (!__pyx_t_4) {
        __pyx_t_16 = __Pyx_PyObject_CallOneArg(__pyx_t_5, ((PyObject *)__pyx_v_tmp)); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 821, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
      } else {
        __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 821, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_INCREF(((PyObject *)__pyx_v_tmp));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_tmp));
        PyTuple_SET_ITEM(__pyx_t_3, 0+1, ((PyObject *)__pyx_v_tmp));
        __pyx_t_16 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_3, NULL); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 821, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_20 = __pyx_PyFloat_AsFloat(__pyx_t_16); if (unlikely((__pyx_t_20 == (npy_float32)-1) && PyErr_Occurred())) __PYX_ERR(0, 821, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      __pyx_v_aa = __pyx_t_20;

      /* "oasis.pyx":822
 *                         aa *= g
 *             aa = tmp.dot(tmp)
 *             bb = res.dot(tmp)             # <<<<<<<<<<<<<<
 *             cc = RSS - thresh
 *             dlam = (-bb + sqrt(bb * bb - aa * cc)) / aa
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_res), __pyx_n_s_dot); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 822, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      if (!__pyx_t_3) {
        __pyx_t_16 = __Pyx_PyObject_CallOneArg(__pyx_t_5, ((PyObject *)__pyx_v_tmp)); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 822, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
      } else {
        __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 822, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
        __Pyx_INCREF(((PyObject *)__pyx_v_tmp));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_tmp));
        PyTuple_SET_ITEM(__pyx_t_4, 0+1, ((PyObject *)__pyx_v_tmp));
        __pyx_t_16 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_4, NULL); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 822, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_20 = __pyx_PyFloat_AsFloat(__pyx_t_16); if (unlikely((__pyx_t_20 == (npy_float32)-1) && PyErr_Occurred())) __PYX_ERR(0, 822, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      __pyx_v_bb = __pyx_t_20;

      /* "oasis.pyx":823
 *             aa = tmp.dot(tmp)
 *             bb = res.dot(tmp)
 *             cc = RSS - thresh             # <<<<<<<<<<<<<<
 *             dlam = (-bb + sqrt(bb * bb - aa * cc)) / aa
 *             lam += dlam
 */
      __pyx_v_cc = (__pyx_v_RSS - __pyx_v_thresh);

      /* "oasis.pyx":824
 *             bb = res.dot(tmp)
 *             cc = RSS - thresh
 *             dlam = (-bb + sqrt(bb * bb - aa * cc)) / aa             # <<<<<<<<<<<<<<
 *             lam += dlam
 *             for i in range(P.size() - 1):  # perform shift
 */
      __pyx_v_dlam = (((-__pyx_v_bb) + sqrt(((__pyx_v_bb * __pyx_v_bb) - (__pyx_v_aa * __pyx_v_cc)))) / __pyx_v_aa);

      /* "oasis.pyx":825
 *             cc = RSS - thresh
 *             dlam = (-bb + sqrt(bb * bb - aa * cc)) / aa
 *             lam += dlam             # <<<<<<<<<<<<<<
 *             for i in range(P.size() - 1):  # perform shift
 *                 P[i].v -= dlam * (1 - g**P[i].l)
 */
      __pyx_cur_scope->__pyx_v_lam = (__pyx_cur_scope->__pyx_v_lam + __pyx_v_dlam);

      /* "oasis.pyx":826
 *             dlam = (-bb + sqrt(bb * bb - aa * cc)) / aa
 *             lam += dlam
 *             for i in range(P.size() - 1):  # perform shift             # <<<<<<<<<<<<<<
 *                 P[i].v -= dlam * (1 - g**P[i].l)
 *             P[P.size() - 1].v -= dlam  # correct last pool; |s|_1 instead |c|_1
 */
      __pyx_t_21 = (__pyx_cur_scope->__pyx_v_P.size() - 1);
      for (__pyx_t_1 = 0; __pyx_t_1 < __pyx_t_21; __pyx_t_1+=1) {
        __pyx_v_i = __pyx_t_1;

        /* "oasis.pyx":827
 *             lam += dlam
 *             for i in range(P.size() - 1):  # perform shift
 *                 P[i].v -= dlam * (1 - g**P[i].l)             # <<<<<<<<<<<<<<
 *             P[P.size() - 1].v -= dlam  # correct last pool; |s|_1 instead |c|_1
 *             c, P = oasis(P, g, c)
 */
        __pyx_t_22 = __pyx_v_i;
        (__pyx_cur_scope->__pyx_v_P[__pyx_t_22]).v = ((__pyx_cur_scope->__pyx_v_P[__pyx_t_22]).v - (__pyx_v_dlam * (1.0 - powf(__pyx_cur_scope->__pyx_v_g, ((__pyx_t_5oasis_SINGLE)(__pyx_cur_scope->__pyx_v_P[__pyx_v_i]).l)))));
      }

      /* "oasis.pyx":828
 *             for i in range(P.size() - 1):  # perform shift
 *                 P[i].v -= dlam * (1 - g**P[i].l)
 *             P[P.size() - 1].v -= dlam  # correct last pool; |s|_1 instead |c|_1             # <<<<<<<<<<<<<<
 *             c, P = oasis(P, g, c)
 * 
 */
      __pyx_t_21 = (__pyx_cur_scope->__pyx_v_P.size() - 1);
      (__pyx_cur_scope->__pyx_v_P[__pyx_t_21]).v = ((__pyx_cur_scope->__pyx_v_P[__pyx_t_21]).v - __pyx_v_dlam);

      /* "oasis.pyx":829
 *                 P[i].v -= dlam * (1 - g**P[i].l)
 *             P[P.size() - 1].v -= dlam  # correct last pool; |s|_1 instead |c|_1
 *             c, P = oasis(P, g, c)             # <<<<<<<<<<<<<<
 * 
 *             # update g
 */
      __pyx_t_16 = __pyx_pf_5oasis_20constrained_oasisAR1_2oasis(__pyx_v_oasis, __pyx_cur_scope->__pyx_v_P, __pyx_cur_scope->__pyx_v_g, ((PyArrayObject *)__pyx_v_c)); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 829, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      if ((likely(PyTuple_CheckExact(__pyx_t_16))) || (PyList_CheckExact(__pyx_t_16))) {
        PyObject* sequence = __pyx_t_16;
        #if CYTHON_COMPILING_IN_CPYTHON
        Py_ssize_t size = Py_SIZE(sequence);
        #else
        Py_ssize_t size = PySequence_Size(sequence);
        #endif
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 829, __pyx_L1_error)
        }
        #if CYTHON_COMPILING_IN_CPYTHON
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_4);
        #else
        __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 829, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 829, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_3 = PyObject_GetIter(__pyx_t_16); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 829, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        __pyx_t_18 = Py_TYPE(__pyx_t_3)->tp_iternext;
        index = 0; __pyx_t_5 = __pyx_t_18(__pyx_t_3); if (unlikely(!__pyx_t_5)) goto __pyx_L20_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_5);
        index = 1; __pyx_t_4 = __pyx_t_18(__pyx_t_3); if (unlikely(!__pyx_t_4)) goto __pyx_L20_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_4);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_18(__pyx_t_3), 2) < 0) __PYX_ERR(0, 829, __pyx_L1_error)
        __pyx_t_18 = NULL;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        goto __pyx_L21_unpacking_done;
        __pyx_L20_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_18 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 829, __pyx_L1_error)
        __pyx_L21_unpacking_done:;
      }
      if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 829, __pyx_L1_error)
      __pyx_t_19 = __pyx_convert_vector_from_py_struct____pyx_t_5oasis_Pool(__pyx_t_4); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 829, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = ((PyArrayObject *)__pyx_t_5);
      {
        __Pyx_BufFmt_StackElem __pyx_stack[1];
        __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_c.rcbuffer->pybuffer);
        __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
        if (unlikely(__pyx_t_7 < 0)) {
          PyErr_Fetch(&__pyx_t_10, &__pyx_t_9, &__pyx_t_8);
          if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_v_c, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
            Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_8);
            __Pyx_RaiseBufferFallbackError();
          } else {
            PyErr_Restore(__pyx_t_10, __pyx_t_9, __pyx_t_8);
          }
        }
        __pyx_pybuffernd_c.diminfo[0].strides = __pyx_pybuffernd_c.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_c.diminfo[0].shape = __pyx_pybuffernd_c.rcbuffer->pybuffer.shape[0];
        if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 829, __pyx_L1_error)
      }
      __pyx_t_6 = 0;
      __Pyx_DECREF_SET(__pyx_v_c, ((PyArrayObject *)__pyx_t_5));
      __pyx_t_5 = 0;
      __pyx_cur_scope->__pyx_v_P = __pyx_t_19;

      /* "oasis.pyx":832
 * 
 *             # update g
 *             if optimize_g and count < max_iter - 1 and (not g_converged):             # <<<<<<<<<<<<<<
 *                 ma = max([P[i].l for i in range(P.size())])
 *                 idx = np.argsort([P[i].v for i in range(P.size())])
 */
      __pyx_t_2 = (__pyx_cur_scope->__pyx_v_optimize_g != 0);
      if (__pyx_t_2) {
      } else {
        __pyx_t_17 = __pyx_t_2;
        goto __pyx_L23_bool_binop_done;
      }
      __pyx_t_2 = ((__pyx_v_count < (__pyx_v_max_iter - 1)) != 0);
      if (__pyx_t_2) {
      } else {
        __pyx_t_17 = __pyx_t_2;
        goto __pyx_L23_bool_binop_done;
      }
      __pyx_t_2 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_g_converged)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 832, __pyx_L1_error)
      __pyx_t_26 = ((!__pyx_t_2) != 0);
      __pyx_t_17 = __pyx_t_26;
      __pyx_L23_bool_binop_done:;
      if (__pyx_t_17) {

        /* "oasis.pyx":833
 *             # update g
 *             if optimize_g and count < max_iter - 1 and (not g_converged):
 *                 ma = max([P[i].l for i in range(P.size())])             # <<<<<<<<<<<<<<
 *                 idx = np.argsort([P[i].v for i in range(P.size())])
 *                 Pt = [P[i].t for i in idx[-optimize_g:]]
 */
        __pyx_t_16 = PyList_New(0); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 833, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
        __pyx_t_21 = __pyx_cur_scope->__pyx_v_P.size();
        for (__pyx_t_1 = 0; __pyx_t_1 < __pyx_t_21; __pyx_t_1+=1) {
          __pyx_v_i = __pyx_t_1;
          __pyx_t_4 = PyInt_FromSsize_t((__pyx_cur_scope->__pyx_v_P[__pyx_v_i]).l); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 833, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_16, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 833, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        }
        __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 833, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_16);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_16);
        __pyx_t_16 = 0;
        __pyx_t_16 = __Pyx_PyObject_Call(__pyx_builtin_max, __pyx_t_4, NULL); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 833, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_27 = __Pyx_PyInt_As_unsigned_int(__pyx_t_16); if (unlikely((__pyx_t_27 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 833, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        __pyx_cur_scope->__pyx_v_ma = __pyx_t_27;

        /* "oasis.pyx":834
 *             if optimize_g and count < max_iter - 1 and (not g_converged):
 *                 ma = max([P[i].l for i in range(P.size())])
 *                 idx = np.argsort([P[i].v for i in range(P.size())])             # <<<<<<<<<<<<<<
 *                 Pt = [P[i].t for i in idx[-optimize_g:]]
 *                 Pl = [P[i].l for i in idx[-optimize_g:]]
 */
        __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 834, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_argsort); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 834, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 834, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_21 = __pyx_cur_scope->__pyx_v_P.size();
        for (__pyx_t_1 = 0; __pyx_t_1 < __pyx_t_21; __pyx_t_1+=1) {
          __pyx_v_i = __pyx_t_1;
          __pyx_t_3 = PyFloat_FromDouble((__pyx_cur_scope->__pyx_v_P[__pyx_v_i]).v); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 834, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_4, (PyObject*)__pyx_t_3))) __PYX_ERR(0, 834, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
        __pyx_t_3 = NULL;
        if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_5))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
          if (likely(__pyx_t_3)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_3);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_5, function);
          }
        }
        if (!__pyx_t_3) {
          __pyx_t_16 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 834, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_16);
        } else {
          __pyx_t_12 = PyTuple_New(1+1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 834, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_3); __pyx_t_3 = NULL;
          __Pyx_GIVEREF(__pyx_t_4);
          PyTuple_SET_ITEM(__pyx_t_12, 0+1, __pyx_t_4);
          __pyx_t_4 = 0;
          __pyx_t_16 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_12, NULL); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 834, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_16);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        }
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_XDECREF_SET(__pyx_v_idx, __pyx_t_16);
        __pyx_t_16 = 0;

        /* "oasis.pyx":835
 *                 ma = max([P[i].l for i in range(P.size())])
 *                 idx = np.argsort([P[i].v for i in range(P.size())])
 *                 Pt = [P[i].t for i in idx[-optimize_g:]]             # <<<<<<<<<<<<<<
 *                 Pl = [P[i].l for i in idx[-optimize_g:]]
 * 
 */
        __pyx_t_16 = PyList_New(0); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 835, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
        __pyx_t_5 = __Pyx_PyObject_GetSlice(__pyx_v_idx, (-__pyx_cur_scope->__pyx_v_optimize_g), 0, NULL, NULL, NULL, 1, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 835, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
          __pyx_t_12 = __pyx_t_5; __Pyx_INCREF(__pyx_t_12); __pyx_t_1 = 0;
          __pyx_t_28 = NULL;
        } else {
          __pyx_t_1 = -1; __pyx_t_12 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 835, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __pyx_t_28 = Py_TYPE(__pyx_t_12)->tp_iternext; if (unlikely(!__pyx_t_28)) __PYX_ERR(0, 835, __pyx_L1_error)
        }
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        for (;;) {
          if (likely(!__pyx_t_28)) {
            if (likely(PyList_CheckExact(__pyx_t_12))) {
              if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_12)) break;
              #if CYTHON_COMPILING_IN_CPYTHON
              __pyx_t_5 = PyList_GET_ITEM(__pyx_t_12, __pyx_t_1); __Pyx_INCREF(__pyx_t_5); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 835, __pyx_L1_error)
              #else
              __pyx_t_5 = PySequence_ITEM(__pyx_t_12, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 835, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_5);
              #endif
            } else {
              if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_12)) break;
              #if CYTHON_COMPILING_IN_CPYTHON
              __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_12, __pyx_t_1); __Pyx_INCREF(__pyx_t_5); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 835, __pyx_L1_error)
              #else
              __pyx_t_5 = PySequence_ITEM(__pyx_t_12, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 835, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_5);
              #endif
            }
          } else {
            __pyx_t_5 = __pyx_t_28(__pyx_t_12);
            if (unlikely(!__pyx_t_5)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 835, __pyx_L1_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_5);
          }
          __pyx_t_22 = __Pyx_PyIndex_AsSsize_t(__pyx_t_5); if (unlikely((__pyx_t_22 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 835, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_v_i = __pyx_t_22;
          __pyx_t_5 = PyInt_FromSsize_t((__pyx_cur_scope->__pyx_v_P[__pyx_v_i]).t); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 835, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_16, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 835, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        }
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_XDECREF_SET(__pyx_v_Pt, ((PyObject*)__pyx_t_16));
        __pyx_t_16 = 0;

        /* "oasis.pyx":836
 *                 idx = np.argsort([P[i].v for i in range(P.size())])
 *                 Pt = [P[i].t for i in idx[-optimize_g:]]
 *                 Pl = [P[i].l for i in idx[-optimize_g:]]             # <<<<<<<<<<<<<<
 * 
 *                 def bar(y, g, Pt, Pl):
 */
        __pyx_t_16 = PyList_New(0); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 836, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
        __pyx_t_12 = __Pyx_PyObject_GetSlice(__pyx_v_idx, (-__pyx_cur_scope->__pyx_v_optimize_g), 0, NULL, NULL, NULL, 1, 0, 1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 836, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        if (likely(PyList_CheckExact(__pyx_t_12)) || PyTuple_CheckExact(__pyx_t_12)) {
          __pyx_t_5 = __pyx_t_12; __Pyx_INCREF(__pyx_t_5); __pyx_t_1 = 0;
          __pyx_t_28 = NULL;
        } else {
          __pyx_t_1 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_12); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 836, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_28 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_28)) __PYX_ERR(0, 836, __pyx_L1_error)
        }
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        for (;;) {
          if (likely(!__pyx_t_28)) {
            if (likely(PyList_CheckExact(__pyx_t_5))) {
              if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_5)) break;
              #if CYTHON_COMPILING_IN_CPYTHON
              __pyx_t_12 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_1); __Pyx_INCREF(__pyx_t_12); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 836, __pyx_L1_error)
              #else
              __pyx_t_12 = PySequence_ITEM(__pyx_t_5, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 836, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_12);
              #endif
            } else {
              if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
              #if CYTHON_COMPILING_IN_CPYTHON
              __pyx_t_12 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_1); __Pyx_INCREF(__pyx_t_12); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 836, __pyx_L1_error)
              #else
              __pyx_t_12 = PySequence_ITEM(__pyx_t_5, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 836, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_12);
              #endif
            }
          } else {
            __pyx_t_12 = __pyx_t_28(__pyx_t_5);
            if (unlikely(!__pyx_t_12)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 836, __pyx_L1_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_12);
          }
          __pyx_t_22 = __Pyx_PyIndex_AsSsize_t(__pyx_t_12); if (unlikely((__pyx_t_22 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 836, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __pyx_v_i = __pyx_t_22;
          __pyx_t_12 = PyInt_FromSsize_t((__pyx_cur_scope->__pyx_v_P[__pyx_v_i]).l); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 836, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_16, (PyObject*)__pyx_t_12))) __PYX_ERR(0, 836, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        }
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_XDECREF_SET(__pyx_v_Pl, ((PyObject*)__pyx_t_16));
        __pyx_t_16 = 0;

        /* "oasis.pyx":838
 *                 Pl = [P[i].l for i in idx[-optimize_g:]]
 * 
 *                 def bar(y, g, Pt, Pl):             # <<<<<<<<<<<<<<
 *                     h = np.exp(log(g) * np.arange(ma, dtype=np.float32))
 * 
 */
        __pyx_t_16 = __Pyx_CyFunction_NewEx(&__pyx_mdef_5oasis_20constrained_oasisAR1_5bar, 0, __pyx_n_s_constrained_oasisAR1_locals_bar_2, ((PyObject*)__pyx_cur_scope), __pyx_n_s_oasis, __pyx_d, ((PyObject *)__pyx_codeobj__14)); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 838, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
        __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_bar);
        __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_bar, __pyx_t_16);
        __Pyx_GIVEREF(__pyx_t_16);
        __pyx_t_16 = 0;

        /* "oasis.pyx":853
 *                                 for i in range(optimize_g)])
 * 
 *                 def baz(y, Pt, Pl):             # <<<<<<<<<<<<<<
 *                     # minimizes residual
 *                     return fminbound(lambda x: bar(y, x, Pt, Pl), 0, 1, xtol=1e-4, maxfun=50)
 */
        __pyx_t_16 = __Pyx_CyFunction_NewEx(&__pyx_mdef_5oasis_20constrained_oasisAR1_7baz, 0, __pyx_n_s_constrained_oasisAR1_locals_baz_2, ((PyObject*)__pyx_cur_scope), __pyx_n_s_oasis, __pyx_d, ((PyObject *)__pyx_codeobj__16)); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 853, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
        __Pyx_XDECREF_SET(__pyx_v_baz, __pyx_t_16);
        __pyx_t_16 = 0;

        /* "oasis.pyx":856
 *                     # minimizes residual
 *                     return fminbound(lambda x: bar(y, x, Pt, Pl), 0, 1, xtol=1e-4, maxfun=50)
 *                 aa = baz(y, Pt, Pl)             # <<<<<<<<<<<<<<
 *                 if abs(aa - g) < 1e-4:
 *                     g_converged = True
 */
        __pyx_t_16 = PyTuple_New(3); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 856, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
        __Pyx_INCREF(((PyObject *)__pyx_v_y));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_y));
        PyTuple_SET_ITEM(__pyx_t_16, 0, ((PyObject *)__pyx_v_y));
        __Pyx_INCREF(__pyx_v_Pt);
        __Pyx_GIVEREF(__pyx_v_Pt);
        PyTuple_SET_ITEM(__pyx_t_16, 1, __pyx_v_Pt);
        __Pyx_INCREF(__pyx_v_Pl);
        __Pyx_GIVEREF(__pyx_v_Pl);
        PyTuple_SET_ITEM(__pyx_t_16, 2, __pyx_v_Pl);
        __pyx_t_5 = __Pyx_PyObject_Call(__pyx_v_baz, __pyx_t_16, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 856, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        __pyx_t_20 = __pyx_PyFloat_AsFloat(__pyx_t_5); if (unlikely((__pyx_t_20 == (npy_float32)-1) && PyErr_Occurred())) __PYX_ERR(0, 856, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_v_aa = __pyx_t_20;

        /* "oasis.pyx":857
 *                     return fminbound(lambda x: bar(y, x, Pt, Pl), 0, 1, xtol=1e-4, maxfun=50)
 *                 aa = baz(y, Pt, Pl)
 *                 if abs(aa - g) < 1e-4:             # <<<<<<<<<<<<<<
 *                     g_converged = True
 *                 g = aa
 */
        __pyx_t_17 = ((fabsf((__pyx_v_aa - __pyx_cur_scope->__pyx_v_g)) < 1e-4) != 0);
        if (__pyx_t_17) {

          /* "oasis.pyx":858
 *                 aa = baz(y, Pt, Pl)
 *                 if abs(aa - g) < 1e-4:
 *                     g_converged = True             # <<<<<<<<<<<<<<
 *                 g = aa
 *                 # explicit kernel, useful for constructing c
 */
          __Pyx_INCREF(Py_True);
          __Pyx_DECREF_SET(__pyx_v_g_converged, ((PyBoolObject *)Py_True));

          /* "oasis.pyx":857
 *                     return fminbound(lambda x: bar(y, x, Pt, Pl), 0, 1, xtol=1e-4, maxfun=50)
 *                 aa = baz(y, Pt, Pl)
 *                 if abs(aa - g) < 1e-4:             # <<<<<<<<<<<<<<
 *                     g_converged = True
 *                 g = aa
 */
        }

        /* "oasis.pyx":859
 *                 if abs(aa - g) < 1e-4:
 *                     g_converged = True
 *                 g = aa             # <<<<<<<<<<<<<<
 *                 # explicit kernel, useful for constructing c
 *                 h = np.exp(log(g) * np.arange(T, dtype=np.float32))
 */
        __pyx_cur_scope->__pyx_v_g = __pyx_v_aa;

        /* "oasis.pyx":861
 *                 g = aa
 *                 # explicit kernel, useful for constructing c
 *                 h = np.exp(log(g) * np.arange(T, dtype=np.float32))             # <<<<<<<<<<<<<<
 *                 for i in range(P.size()):
 *                     q = h[:P[i].l]
 */
        __pyx_t_16 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 861, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
        __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_16, __pyx_n_s_exp); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 861, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        __pyx_t_16 = PyFloat_FromDouble(log(__pyx_cur_scope->__pyx_v_g)); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 861, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
        __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 861, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_arange); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 861, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = __Pyx_PyInt_From_unsigned_int(__pyx_cur_scope->__pyx_v_T); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 861, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_14 = PyTuple_New(1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 861, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_4);
        __pyx_t_4 = 0;
        __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 861, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_11 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 861, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_float32); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 861, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_15);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_15) < 0) __PYX_ERR(0, 861, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        __pyx_t_15 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_14, __pyx_t_4); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 861, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_15);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = PyNumber_Multiply(__pyx_t_16, __pyx_t_15); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 861, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        __pyx_t_15 = NULL;
        if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_12))) {
          __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_12);
          if (likely(__pyx_t_15)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
            __Pyx_INCREF(__pyx_t_15);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_12, function);
          }
        }
        if (!__pyx_t_15) {
          __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_12, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 861, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_GOTREF(__pyx_t_5);
        } else {
          __pyx_t_16 = PyTuple_New(1+1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 861, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_16);
          __Pyx_GIVEREF(__pyx_t_15); PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_15); __pyx_t_15 = NULL;
          __Pyx_GIVEREF(__pyx_t_4);
          PyTuple_SET_ITEM(__pyx_t_16, 0+1, __pyx_t_4);
          __pyx_t_4 = 0;
          __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_t_16, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 861, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        }
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 861, __pyx_L1_error)
        __pyx_t_6 = ((PyArrayObject *)__pyx_t_5);
        {
          __Pyx_BufFmt_StackElem __pyx_stack[1];
          __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_h.rcbuffer->pybuffer);
          __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_h.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
          if (unlikely(__pyx_t_7 < 0)) {
            PyErr_Fetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
            if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_h.rcbuffer->pybuffer, (PyObject*)__pyx_v_h, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
              Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10);
              __Pyx_RaiseBufferFallbackError();
            } else {
              PyErr_Restore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
            }
          }
          __pyx_pybuffernd_h.diminfo[0].strides = __pyx_pybuffernd_h.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_h.diminfo[0].shape = __pyx_pybuffernd_h.rcbuffer->pybuffer.shape[0];
          if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 861, __pyx_L1_error)
        }
        __pyx_t_6 = 0;
        __Pyx_DECREF_SET(__pyx_v_h, ((PyArrayObject *)__pyx_t_5));
        __pyx_t_5 = 0;

        /* "oasis.pyx":862
 *                 # explicit kernel, useful for constructing c
 *                 h = np.exp(log(g) * np.arange(T, dtype=np.float32))
 *                 for i in range(P.size()):             # <<<<<<<<<<<<<<
 *                     q = h[:P[i].l]
 *                     P[i].v = q.dot(y[P[i].t:P[i].t + P[i].l]) - lam * (1 - g**P[i].l)
 */
        __pyx_t_21 = __pyx_cur_scope->__pyx_v_P.size();
        for (__pyx_t_1 = 0; __pyx_t_1 < __pyx_t_21; __pyx_t_1+=1) {
          __pyx_v_i = __pyx_t_1;

          /* "oasis.pyx":863
 *                 h = np.exp(log(g) * np.arange(T, dtype=np.float32))
 *                 for i in range(P.size()):
 *                     q = h[:P[i].l]             # <<<<<<<<<<<<<<
 *                     P[i].v = q.dot(y[P[i].t:P[i].t + P[i].l]) - lam * (1 - g**P[i].l)
 *                     P[i].w = q.dot(q)
 */
          __pyx_t_5 = __Pyx_PyObject_GetSlice(((PyObject *)__pyx_v_h), 0, (__pyx_cur_scope->__pyx_v_P[__pyx_v_i]).l, NULL, NULL, NULL, 0, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 863, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_XDECREF_SET(__pyx_v_q, __pyx_t_5);
          __pyx_t_5 = 0;

          /* "oasis.pyx":864
 *                 for i in range(P.size()):
 *                     q = h[:P[i].l]
 *                     P[i].v = q.dot(y[P[i].t:P[i].t + P[i].l]) - lam * (1 - g**P[i].l)             # <<<<<<<<<<<<<<
 *                     P[i].w = q.dot(q)
 *                 P[P.size() - 1].v -= lam * g**P[P.size() - 1].l  # |s|_1 instead |c|_1
 */
          __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_q, __pyx_n_s_dot); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 864, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __pyx_t_16 = __Pyx_PyObject_GetSlice(((PyObject *)__pyx_v_y), (__pyx_cur_scope->__pyx_v_P[__pyx_v_i]).t, ((__pyx_cur_scope->__pyx_v_P[__pyx_v_i]).t + (__pyx_cur_scope->__pyx_v_P[__pyx_v_i]).l), NULL, NULL, NULL, 1, 1, 1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 864, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_16);
          __pyx_t_4 = NULL;
          if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_12))) {
            __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_12);
            if (likely(__pyx_t_4)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
              __Pyx_INCREF(__pyx_t_4);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_12, function);
            }
          }
          if (!__pyx_t_4) {
            __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_12, __pyx_t_16); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 864, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
            __Pyx_GOTREF(__pyx_t_5);
          } else {
            __pyx_t_15 = PyTuple_New(1+1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 864, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_15);
            __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_t_4); __pyx_t_4 = NULL;
            __Pyx_GIVEREF(__pyx_t_16);
            PyTuple_SET_ITEM(__pyx_t_15, 0+1, __pyx_t_16);
            __pyx_t_16 = 0;
            __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_t_15, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 864, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          }
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __pyx_t_12 = PyFloat_FromDouble((__pyx_cur_scope->__pyx_v_lam * (1.0 - powf(__pyx_cur_scope->__pyx_v_g, ((__pyx_t_5oasis_SINGLE)(__pyx_cur_scope->__pyx_v_P[__pyx_v_i]).l))))); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 864, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __pyx_t_15 = PyNumber_Subtract(__pyx_t_5, __pyx_t_12); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 864, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_15);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __pyx_t_20 = __pyx_PyFloat_AsFloat(__pyx_t_15); if (unlikely((__pyx_t_20 == (npy_float32)-1) && PyErr_Occurred())) __PYX_ERR(0, 864, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          (__pyx_cur_scope->__pyx_v_P[__pyx_v_i]).v = __pyx_t_20;

          /* "oasis.pyx":865
 *                     q = h[:P[i].l]
 *                     P[i].v = q.dot(y[P[i].t:P[i].t + P[i].l]) - lam * (1 - g**P[i].l)
 *                     P[i].w = q.dot(q)             # <<<<<<<<<<<<<<
 *                 P[P.size() - 1].v -= lam * g**P[P.size() - 1].l  # |s|_1 instead |c|_1
 *                 c, P = oasis(P, g, c)
 */
          __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_q, __pyx_n_s_dot); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 865, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __pyx_t_5 = NULL;
          if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_12))) {
            __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_12);
            if (likely(__pyx_t_5)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
              __Pyx_INCREF(__pyx_t_5);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_12, function);
            }
          }
          if (!__pyx_t_5) {
            __pyx_t_15 = __Pyx_PyObject_CallOneArg(__pyx_t_12, __pyx_v_q); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 865, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_15);
          } else {
            __pyx_t_16 = PyTuple_New(1+1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 865, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_16);
            __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_5); __pyx_t_5 = NULL;
            __Pyx_INCREF(__pyx_v_q);
            __Pyx_GIVEREF(__pyx_v_q);
            PyTuple_SET_ITEM(__pyx_t_16, 0+1, __pyx_v_q);
            __pyx_t_15 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_t_16, NULL); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 865, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_15);
            __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
          }
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __pyx_t_20 = __pyx_PyFloat_AsFloat(__pyx_t_15); if (unlikely((__pyx_t_20 == (npy_float32)-1) && PyErr_Occurred())) __PYX_ERR(0, 865, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          (__pyx_cur_scope->__pyx_v_P[__pyx_v_i]).w = __pyx_t_20;
        }

        /* "oasis.pyx":866
 *                     P[i].v = q.dot(y[P[i].t:P[i].t + P[i].l]) - lam * (1 - g**P[i].l)
 *                     P[i].w = q.dot(q)
 *                 P[P.size() - 1].v -= lam * g**P[P.size() - 1].l  # |s|_1 instead |c|_1             # <<<<<<<<<<<<<<
 *                 c, P = oasis(P, g, c)
 *             # calc RSS
 */
        __pyx_t_21 = (__pyx_cur_scope->__pyx_v_P.size() - 1);
        (__pyx_cur_scope->__pyx_v_P[__pyx_t_21]).v = ((__pyx_cur_scope->__pyx_v_P[__pyx_t_21]).v - (__pyx_cur_scope->__pyx_v_lam * powf(__pyx_cur_scope->__pyx_v_g, ((__pyx_t_5oasis_SINGLE)(__pyx_cur_scope->__pyx_v_P[(__pyx_cur_scope->__pyx_v_P.size() - 1)]).l))));

        /* "oasis.pyx":867
 *                     P[i].w = q.dot(q)
 *                 P[P.size() - 1].v -= lam * g**P[P.size() - 1].l  # |s|_1 instead |c|_1
 *                 c, P = oasis(P, g, c)             # <<<<<<<<<<<<<<
 *             # calc RSS
 *             res = y - c
 */
        __pyx_t_15 = __pyx_pf_5oasis_20constrained_oasisAR1_2oasis(__pyx_v_oasis, __pyx_cur_scope->__pyx_v_P, __pyx_cur_scope->__pyx_v_g, ((PyArrayObject *)__pyx_v_c)); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 867, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_15);
        if ((likely(PyTuple_CheckExact(__pyx_t_15))) || (PyList_CheckExact(__pyx_t_15))) {
          PyObject* sequence = __pyx_t_15;
          #if CYTHON_COMPILING_IN_CPYTHON
          Py_ssize_t size = Py_SIZE(sequence);
          #else
          Py_ssize_t size = PySequence_Size(sequence);
          #endif
          if (unlikely(size != 2)) {
            if (size > 2) __Pyx_RaiseTooManyValuesError(2);
            else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
            __PYX_ERR(0, 867, __pyx_L1_error)
          }
          #if CYTHON_COMPILING_IN_CPYTHON
          if (likely(PyTuple_CheckExact(sequence))) {
            __pyx_t_12 = PyTuple_GET_ITEM(sequence, 0); 
            __pyx_t_16 = PyTuple_GET_ITEM(sequence, 1); 
          } else {
            __pyx_t_12 = PyList_GET_ITEM(sequence, 0); 
            __pyx_t_16 = PyList_GET_ITEM(sequence, 1); 
          }
          __Pyx_INCREF(__pyx_t_12);
          __Pyx_INCREF(__pyx_t_16);
          #else
          __pyx_t_12 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 867, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __pyx_t_16 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 867, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_16);
          #endif
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        } else {
          Py_ssize_t index = -1;
          __pyx_t_5 = PyObject_GetIter(__pyx_t_15); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 867, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          __pyx_t_18 = Py_TYPE(__pyx_t_5)->tp_iternext;
          index = 0; __pyx_t_12 = __pyx_t_18(__pyx_t_5); if (unlikely(!__pyx_t_12)) goto __pyx_L37_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_12);
          index = 1; __pyx_t_16 = __pyx_t_18(__pyx_t_5); if (unlikely(!__pyx_t_16)) goto __pyx_L37_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_16);
          if (__Pyx_IternextUnpackEndCheck(__pyx_t_18(__pyx_t_5), 2) < 0) __PYX_ERR(0, 867, __pyx_L1_error)
          __pyx_t_18 = NULL;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          goto __pyx_L38_unpacking_done;
          __pyx_L37_unpacking_failed:;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_18 = NULL;
          if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
          __PYX_ERR(0, 867, __pyx_L1_error)
          __pyx_L38_unpacking_done:;
        }
        if (!(likely(((__pyx_t_12) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_12, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 867, __pyx_L1_error)
        __pyx_t_19 = __pyx_convert_vector_from_py_struct____pyx_t_5oasis_Pool(__pyx_t_16); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 867, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        __pyx_t_6 = ((PyArrayObject *)__pyx_t_12);
        {
          __Pyx_BufFmt_StackElem __pyx_stack[1];
          __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_c.rcbuffer->pybuffer);
          __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
          if (unlikely(__pyx_t_7 < 0)) {
            PyErr_Fetch(&__pyx_t_10, &__pyx_t_9, &__pyx_t_8);
            if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_v_c, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
              Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_8);
              __Pyx_RaiseBufferFallbackError();
            } else {
              PyErr_Restore(__pyx_t_10, __pyx_t_9, __pyx_t_8);
            }
          }
          __pyx_pybuffernd_c.diminfo[0].strides = __pyx_pybuffernd_c.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_c.diminfo[0].shape = __pyx_pybuffernd_c.rcbuffer->pybuffer.shape[0];
          if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 867, __pyx_L1_error)
        }
        __pyx_t_6 = 0;
        __Pyx_DECREF_SET(__pyx_v_c, ((PyArrayObject *)__pyx_t_12));
        __pyx_t_12 = 0;
        __pyx_cur_scope->__pyx_v_P = __pyx_t_19;

        /* "oasis.pyx":832
 * 
 *             # update g
 *             if optimize_g and count < max_iter - 1 and (not g_converged):             # <<<<<<<<<<<<<<
 *                 ma = max([P[i].l for i in range(P.size())])
 *                 idx = np.argsort([P[i].v for i in range(P.size())])
 */
      }

      /* "oasis.pyx":869
 *                 c, P = oasis(P, g, c)
 *             # calc RSS
 *             res = y - c             # <<<<<<<<<<<<<<
 *             RSS = res.dot(res)
 * 
 */
      __pyx_t_15 = PyNumber_Subtract(((PyObject *)__pyx_v_y), ((PyObject *)__pyx_v_c)); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 869, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      if (!(likely(((__pyx_t_15) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_15, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 869, __pyx_L1_error)
      __pyx_t_6 = ((PyArrayObject *)__pyx_t_15);
      {
        __Pyx_BufFmt_StackElem __pyx_stack[1];
        __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_res.rcbuffer->pybuffer);
        __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_res.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
        if (unlikely(__pyx_t_7 < 0)) {
          PyErr_Fetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
          if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_res.rcbuffer->pybuffer, (PyObject*)__pyx_v_res, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
            Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10);
            __Pyx_RaiseBufferFallbackError();
          } else {
            PyErr_Restore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
          }
        }
        __pyx_pybuffernd_res.diminfo[0].strides = __pyx_pybuffernd_res.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_res.diminfo[0].shape = __pyx_pybuffernd_res.rcbuffer->pybuffer.shape[0];
        if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 869, __pyx_L1_error)
      }
      __pyx_t_6 = 0;
      __Pyx_DECREF_SET(__pyx_v_res, ((PyArrayObject *)__pyx_t_15));
      __pyx_t_15 = 0;

      /* "oasis.pyx":870
 *             # calc RSS
 *             res = y - c
 *             RSS = res.dot(res)             # <<<<<<<<<<<<<<
 * 
 *     else:  # optimize b and dependent on optimize_g g too
 */
      __pyx_t_16 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_res), __pyx_n_s_dot); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 870, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __pyx_t_12 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_16))) {
        __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_16);
        if (likely(__pyx_t_12)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
          __Pyx_INCREF(__pyx_t_12);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_16, function);
        }
      }
      if (!__pyx_t_12) {
        __pyx_t_15 = __Pyx_PyObject_CallOneArg(__pyx_t_16, ((PyObject *)__pyx_v_res)); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 870, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_15);
      } else {
        __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 870, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_12); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_12); __pyx_t_12 = NULL;
        __Pyx_INCREF(((PyObject *)__pyx_v_res));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_res));
        PyTuple_SET_ITEM(__pyx_t_5, 0+1, ((PyObject *)__pyx_v_res));
        __pyx_t_15 = __Pyx_PyObject_Call(__pyx_t_16, __pyx_t_5, NULL); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 870, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_15);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      __pyx_t_20 = __pyx_PyFloat_AsFloat(__pyx_t_15); if (unlikely((__pyx_t_20 == (npy_float32)-1) && PyErr_Occurred())) __PYX_ERR(0, 870, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      __pyx_v_RSS = __pyx_t_20;
    }

    /* "oasis.pyx":800
 *     g_converged = False
 *     count = 0
 *     if not optimize_b:  # don't optimize b, just the dual variable lambda and g if optimize_g>0             # <<<<<<<<<<<<<<
 *         c, P = oasis1strun(y, g, c)
 *         tmp = np.empty(T, dtype=np.float32)
 */
    goto __pyx_L4;
  }

  /* "oasis.pyx":873
 * 
 *     else:  # optimize b and dependent on optimize_g g too
 *         b = np.percentile(y, 15)  # initial estimate of baseline             # <<<<<<<<<<<<<<
 *         if b_nonneg:
 *             b = fmax(b, 0)
 */
  /*else*/ {
    __pyx_t_16 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 873, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_16, __pyx_n_s_percentile); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 873, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __pyx_t_16 = NULL;
    __pyx_t_1 = 0;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_16)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_16);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_1 = 1;
      }
    }
    __pyx_t_12 = PyTuple_New(2+__pyx_t_1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 873, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    if (__pyx_t_16) {
      __Pyx_GIVEREF(__pyx_t_16); PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_16); __pyx_t_16 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_y));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_y));
    PyTuple_SET_ITEM(__pyx_t_12, 0+__pyx_t_1, ((PyObject *)__pyx_v_y));
    __Pyx_INCREF(__pyx_int_15);
    __Pyx_GIVEREF(__pyx_int_15);
    PyTuple_SET_ITEM(__pyx_t_12, 1+__pyx_t_1, __pyx_int_15);
    __pyx_t_15 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_12, NULL); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 873, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_20 = __pyx_PyFloat_AsFloat(__pyx_t_15); if (unlikely((__pyx_t_20 == (npy_float32)-1) && PyErr_Occurred())) __PYX_ERR(0, 873, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __pyx_cur_scope->__pyx_v_b = __pyx_t_20;

    /* "oasis.pyx":874
 *     else:  # optimize b and dependent on optimize_g g too
 *         b = np.percentile(y, 15)  # initial estimate of baseline
 *         if b_nonneg:             # <<<<<<<<<<<<<<
 *             b = fmax(b, 0)
 *         c, P = oasis1strun(y - b, g, c)
 */
    __pyx_t_17 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_cur_scope->__pyx_v_b_nonneg)); if (unlikely(__pyx_t_17 < 0)) __PYX_ERR(0, 874, __pyx_L1_error)
    if (__pyx_t_17) {

      /* "oasis.pyx":875
 *         b = np.percentile(y, 15)  # initial estimate of baseline
 *         if b_nonneg:
 *             b = fmax(b, 0)             # <<<<<<<<<<<<<<
 *         c, P = oasis1strun(y - b, g, c)
 *         # update b and lam
 */
      __pyx_cur_scope->__pyx_v_b = fmax(__pyx_cur_scope->__pyx_v_b, 0.0);

      /* "oasis.pyx":874
 *     else:  # optimize b and dependent on optimize_g g too
 *         b = np.percentile(y, 15)  # initial estimate of baseline
 *         if b_nonneg:             # <<<<<<<<<<<<<<
 *             b = fmax(b, 0)
 *         c, P = oasis1strun(y - b, g, c)
 */
    }

    /* "oasis.pyx":876
 *         if b_nonneg:
 *             b = fmax(b, 0)
 *         c, P = oasis1strun(y - b, g, c)             # <<<<<<<<<<<<<<
 *         # update b and lam
 *         db = fmax(np.mean(y - c), 0 if b_nonneg else -np.inf) - b
 */
    __pyx_t_15 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_b); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 876, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __pyx_t_5 = PyNumber_Subtract(((PyObject *)__pyx_v_y), __pyx_t_15); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 876, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 876, __pyx_L1_error)
    __pyx_t_15 = __pyx_pf_5oasis_20constrained_oasisAR1_oasis1strun(__pyx_v_oasis1strun, ((PyArrayObject *)__pyx_t_5), __pyx_cur_scope->__pyx_v_g, ((PyArrayObject *)__pyx_v_c)); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 876, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if ((likely(PyTuple_CheckExact(__pyx_t_15))) || (PyList_CheckExact(__pyx_t_15))) {
      PyObject* sequence = __pyx_t_15;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 876, __pyx_L1_error)
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_12 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_12 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_12);
      #else
      __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 876, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_12 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 876, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      #endif
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_16 = PyObject_GetIter(__pyx_t_15); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 876, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      __pyx_t_18 = Py_TYPE(__pyx_t_16)->tp_iternext;
      index = 0; __pyx_t_5 = __pyx_t_18(__pyx_t_16); if (unlikely(!__pyx_t_5)) goto __pyx_L40_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      index = 1; __pyx_t_12 = __pyx_t_18(__pyx_t_16); if (unlikely(!__pyx_t_12)) goto __pyx_L40_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_12);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_18(__pyx_t_16), 2) < 0) __PYX_ERR(0, 876, __pyx_L1_error)
      __pyx_t_18 = NULL;
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      goto __pyx_L41_unpacking_done;
      __pyx_L40_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      __pyx_t_18 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 876, __pyx_L1_error)
      __pyx_L41_unpacking_done:;
    }
    if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 876, __pyx_L1_error)
    __pyx_t_19 = __pyx_convert_vector_from_py_struct____pyx_t_5oasis_Pool(__pyx_t_12); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 876, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __pyx_t_6 = ((PyArrayObject *)__pyx_t_5);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_c.rcbuffer->pybuffer);
      __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
      if (unlikely(__pyx_t_7 < 0)) {
        PyErr_Fetch(&__pyx_t_10, &__pyx_t_9, &__pyx_t_8);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_v_c, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_8);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_10, __pyx_t_9, __pyx_t_8);
        }
      }
      __pyx_pybuffernd_c.diminfo[0].strides = __pyx_pybuffernd_c.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_c.diminfo[0].shape = __pyx_pybuffernd_c.rcbuffer->pybuffer.shape[0];
      if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 876, __pyx_L1_error)
    }
    __pyx_t_6 = 0;
    __Pyx_DECREF_SET(__pyx_v_c, ((PyArrayObject *)__pyx_t_5));
    __pyx_t_5 = 0;
    __pyx_cur_scope->__pyx_v_P = __pyx_t_19;

    /* "oasis.pyx":878
 *         c, P = oasis1strun(y - b, g, c)
 *         # update b and lam
 *         db = fmax(np.mean(y - c), 0 if b_nonneg else -np.inf) - b             # <<<<<<<<<<<<<<
 *         b += db
 *         lam -= db / (1 - g)
 */
    __pyx_t_12 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 878, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_mean); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 878, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __pyx_t_12 = PyNumber_Subtract(((PyObject *)__pyx_v_y), ((PyObject *)__pyx_v_c)); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 878, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_16 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_16)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_16);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_16) {
      __pyx_t_15 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_12); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 878, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_GOTREF(__pyx_t_15);
    } else {
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 878, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_16); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_16); __pyx_t_16 = NULL;
      __Pyx_GIVEREF(__pyx_t_12);
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_12);
      __pyx_t_12 = 0;
      __pyx_t_15 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_4, NULL); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 878, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_29 = __pyx_PyFloat_AsDouble(__pyx_t_15); if (unlikely((__pyx_t_29 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 878, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __pyx_t_17 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_cur_scope->__pyx_v_b_nonneg)); if (unlikely(__pyx_t_17 < 0)) __PYX_ERR(0, 878, __pyx_L1_error)
    if (__pyx_t_17) {
      __pyx_t_30 = 0.0;
    } else {
      __pyx_t_15 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 878, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_inf); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 878, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      __pyx_t_15 = PyNumber_Negative(__pyx_t_5); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 878, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_31 = __pyx_PyFloat_AsDouble(__pyx_t_15); if (unlikely((__pyx_t_31 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 878, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      __pyx_t_30 = __pyx_t_31;
    }
    __pyx_v_db = (fmax(__pyx_t_29, __pyx_t_30) - __pyx_cur_scope->__pyx_v_b);

    /* "oasis.pyx":879
 *         # update b and lam
 *         db = fmax(np.mean(y - c), 0 if b_nonneg else -np.inf) - b
 *         b += db             # <<<<<<<<<<<<<<
 *         lam -= db / (1 - g)
 *         # correct last pool
 */
    __pyx_cur_scope->__pyx_v_b = (__pyx_cur_scope->__pyx_v_b + __pyx_v_db);

    /* "oasis.pyx":880
 *         db = fmax(np.mean(y - c), 0 if b_nonneg else -np.inf) - b
 *         b += db
 *         lam -= db / (1 - g)             # <<<<<<<<<<<<<<
 *         # correct last pool
 *         i = P.size() - 1
 */
    __pyx_cur_scope->__pyx_v_lam = (__pyx_cur_scope->__pyx_v_lam - (__pyx_v_db / (1.0 - __pyx_cur_scope->__pyx_v_g)));

    /* "oasis.pyx":882
 *         lam -= db / (1 - g)
 *         # correct last pool
 *         i = P.size() - 1             # <<<<<<<<<<<<<<
 *         P[i].v -= lam * g**P[i].l  # |s|_1 instead |c|_1
 *         c[P[i].t:P[i].t + P[i].l] = fmax(0, P[i].v) / P[i].w * h[:P[i].l]
 */
    __pyx_v_i = (__pyx_cur_scope->__pyx_v_P.size() - 1);

    /* "oasis.pyx":883
 *         # correct last pool
 *         i = P.size() - 1
 *         P[i].v -= lam * g**P[i].l  # |s|_1 instead |c|_1             # <<<<<<<<<<<<<<
 *         c[P[i].t:P[i].t + P[i].l] = fmax(0, P[i].v) / P[i].w * h[:P[i].l]
 *         # calc RSS
 */
    __pyx_t_1 = __pyx_v_i;
    (__pyx_cur_scope->__pyx_v_P[__pyx_t_1]).v = ((__pyx_cur_scope->__pyx_v_P[__pyx_t_1]).v - (__pyx_cur_scope->__pyx_v_lam * powf(__pyx_cur_scope->__pyx_v_g, ((__pyx_t_5oasis_SINGLE)(__pyx_cur_scope->__pyx_v_P[__pyx_v_i]).l))));

    /* "oasis.pyx":884
 *         i = P.size() - 1
 *         P[i].v -= lam * g**P[i].l  # |s|_1 instead |c|_1
 *         c[P[i].t:P[i].t + P[i].l] = fmax(0, P[i].v) / P[i].w * h[:P[i].l]             # <<<<<<<<<<<<<<
 *         # calc RSS
 *         res = y - b - c
 */
    __pyx_t_15 = PyFloat_FromDouble((fmax(0.0, (__pyx_cur_scope->__pyx_v_P[__pyx_v_i]).v) / (__pyx_cur_scope->__pyx_v_P[__pyx_v_i]).w)); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 884, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __pyx_t_5 = __Pyx_PyObject_GetSlice(((PyObject *)__pyx_v_h), 0, (__pyx_cur_scope->__pyx_v_P[__pyx_v_i]).l, NULL, NULL, NULL, 0, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 884, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = PyNumber_Multiply(__pyx_t_15, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 884, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__Pyx_PyObject_SetSlice(((PyObject *)__pyx_v_c), __pyx_t_4, (__pyx_cur_scope->__pyx_v_P[__pyx_v_i]).t, ((__pyx_cur_scope->__pyx_v_P[__pyx_v_i]).t + (__pyx_cur_scope->__pyx_v_P[__pyx_v_i]).l), NULL, NULL, NULL, 1, 1, 1) < 0) __PYX_ERR(0, 884, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "oasis.pyx":886
 *         c[P[i].t:P[i].t + P[i].l] = fmax(0, P[i].v) / P[i].w * h[:P[i].l]
 *         # calc RSS
 *         res = y - b - c             # <<<<<<<<<<<<<<
 *         RSS = res.dot(res)
 *         tmp = np.empty(T, dtype=np.float32)
 */
    __pyx_t_4 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_b); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 886, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyNumber_Subtract(((PyObject *)__pyx_v_y), __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 886, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Subtract(__pyx_t_5, ((PyObject *)__pyx_v_c)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 886, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 886, __pyx_L1_error)
    __pyx_t_6 = ((PyArrayObject *)__pyx_t_4);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_res.rcbuffer->pybuffer);
      __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_res.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
      if (unlikely(__pyx_t_7 < 0)) {
        PyErr_Fetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_res.rcbuffer->pybuffer, (PyObject*)__pyx_v_res, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
        }
      }
      __pyx_pybuffernd_res.diminfo[0].strides = __pyx_pybuffernd_res.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_res.diminfo[0].shape = __pyx_pybuffernd_res.rcbuffer->pybuffer.shape[0];
      if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 886, __pyx_L1_error)
    }
    __pyx_t_6 = 0;
    __pyx_v_res = ((PyArrayObject *)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "oasis.pyx":887
 *         # calc RSS
 *         res = y - b - c
 *         RSS = res.dot(res)             # <<<<<<<<<<<<<<
 *         tmp = np.empty(T, dtype=np.float32)
 *         # until noise constraint is tight or spike train is empty or max_iter reached
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_res), __pyx_n_s_dot); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 887, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_15 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_15)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_15);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_15) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, ((PyObject *)__pyx_v_res)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 887, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
    } else {
      __pyx_t_12 = PyTuple_New(1+1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 887, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_GIVEREF(__pyx_t_15); PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_15); __pyx_t_15 = NULL;
      __Pyx_INCREF(((PyObject *)__pyx_v_res));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_res));
      PyTuple_SET_ITEM(__pyx_t_12, 0+1, ((PyObject *)__pyx_v_res));
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_12, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 887, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_20 = __pyx_PyFloat_AsFloat(__pyx_t_4); if (unlikely((__pyx_t_20 == (npy_float32)-1) && PyErr_Occurred())) __PYX_ERR(0, 887, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_RSS = __pyx_t_20;

    /* "oasis.pyx":888
 *         res = y - b - c
 *         RSS = res.dot(res)
 *         tmp = np.empty(T, dtype=np.float32)             # <<<<<<<<<<<<<<
 *         # until noise constraint is tight or spike train is empty or max_iter reached
 *         while fabs(RSS - thresh) > thresh * 1e-4 and c.sum() > 1e-9 and count < max_iter:
 */
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 888, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_empty); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 888, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyInt_From_unsigned_int(__pyx_cur_scope->__pyx_v_T); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 888, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_12 = PyTuple_New(1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 888, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 888, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_15 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 888, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_float32); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 888, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_16) < 0) __PYX_ERR(0, 888, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __pyx_t_16 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_12, __pyx_t_4); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 888, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (!(likely(((__pyx_t_16) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_16, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 888, __pyx_L1_error)
    __pyx_t_6 = ((PyArrayObject *)__pyx_t_16);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_tmp.rcbuffer->pybuffer);
      __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_tmp.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack);
      if (unlikely(__pyx_t_7 < 0)) {
        PyErr_Fetch(&__pyx_t_10, &__pyx_t_9, &__pyx_t_8);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_tmp.rcbuffer->pybuffer, (PyObject*)__pyx_v_tmp, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_8);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_10, __pyx_t_9, __pyx_t_8);
        }
      }
      __pyx_pybuffernd_tmp.diminfo[0].strides = __pyx_pybuffernd_tmp.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_tmp.diminfo[0].shape = __pyx_pybuffernd_tmp.rcbuffer->pybuffer.shape[0];
      if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 888, __pyx_L1_error)
    }
    __pyx_t_6 = 0;
    __pyx_v_tmp = ((PyArrayObject *)__pyx_t_16);
    __pyx_t_16 = 0;

    /* "oasis.pyx":890
 *         tmp = np.empty(T, dtype=np.float32)
 *         # until noise constraint is tight or spike train is empty or max_iter reached
 *         while fabs(RSS - thresh) > thresh * 1e-4 and c.sum() > 1e-9 and count < max_iter:             # <<<<<<<<<<<<<<
 *             count += 1
 *             # update lam and b
 */
    while (1) {
      __pyx_t_26 = ((fabs((__pyx_v_RSS - __pyx_v_thresh)) > (__pyx_v_thresh * 1e-4)) != 0);
      if (__pyx_t_26) {
      } else {
        __pyx_t_17 = __pyx_t_26;
        goto __pyx_L44_bool_binop_done;
      }
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_c), __pyx_n_s_sum); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 890, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_12 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_12)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_12);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      if (__pyx_t_12) {
        __pyx_t_16 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_12); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 890, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      } else {
        __pyx_t_16 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 890, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_16);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyObject_RichCompare(__pyx_t_16, __pyx_float_1eneg_9, Py_GT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 890, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      __pyx_t_26 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_26 < 0)) __PYX_ERR(0, 890, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_26) {
      } else {
        __pyx_t_17 = __pyx_t_26;
        goto __pyx_L44_bool_binop_done;
      }
      __pyx_t_26 = ((__pyx_v_count < __pyx_v_max_iter) != 0);
      __pyx_t_17 = __pyx_t_26;
      __pyx_L44_bool_binop_done:;
      if (!__pyx_t_17) break;

      /* "oasis.pyx":891
 *         # until noise constraint is tight or spike train is empty or max_iter reached
 *         while fabs(RSS - thresh) > thresh * 1e-4 and c.sum() > 1e-9 and count < max_iter:
 *             count += 1             # <<<<<<<<<<<<<<
 *             # update lam and b
 *             # calc total shift dphi due to contribution of baseline and lambda
 */
      __pyx_v_count = (__pyx_v_count + 1);

      /* "oasis.pyx":894
 *             # update lam and b
 *             # calc total shift dphi due to contribution of baseline and lambda
 *             for i in range(P.size()):             # <<<<<<<<<<<<<<
 *                 if i == P.size() - 1:  # for |s|_1 instead |c|_1 sparsity
 *                     aa = 1 / P[i].w
 */
      __pyx_t_21 = __pyx_cur_scope->__pyx_v_P.size();
      for (__pyx_t_1 = 0; __pyx_t_1 < __pyx_t_21; __pyx_t_1+=1) {
        __pyx_v_i = __pyx_t_1;

        /* "oasis.pyx":895
 *             # calc total shift dphi due to contribution of baseline and lambda
 *             for i in range(P.size()):
 *                 if i == P.size() - 1:  # for |s|_1 instead |c|_1 sparsity             # <<<<<<<<<<<<<<
 *                     aa = 1 / P[i].w
 *                     for j in range(P[i].l):
 */
        __pyx_t_17 = ((__pyx_v_i == (__pyx_cur_scope->__pyx_v_P.size() - 1)) != 0);
        if (__pyx_t_17) {

          /* "oasis.pyx":896
 *             for i in range(P.size()):
 *                 if i == P.size() - 1:  # for |s|_1 instead |c|_1 sparsity
 *                     aa = 1 / P[i].w             # <<<<<<<<<<<<<<
 *                     for j in range(P[i].l):
 *                         tmp[P[i].t + j] = aa
 */
          __pyx_v_aa = (1.0 / (__pyx_cur_scope->__pyx_v_P[__pyx_v_i]).w);

          /* "oasis.pyx":897
 *                 if i == P.size() - 1:  # for |s|_1 instead |c|_1 sparsity
 *                     aa = 1 / P[i].w
 *                     for j in range(P[i].l):             # <<<<<<<<<<<<<<
 *                         tmp[P[i].t + j] = aa
 *                         aa *= g
 */
          __pyx_t_22 = (__pyx_cur_scope->__pyx_v_P[__pyx_v_i]).l;
          for (__pyx_t_23 = 0; __pyx_t_23 < __pyx_t_22; __pyx_t_23+=1) {
            __pyx_v_j = __pyx_t_23;

            /* "oasis.pyx":898
 *                     aa = 1 / P[i].w
 *                     for j in range(P[i].l):
 *                         tmp[P[i].t + j] = aa             # <<<<<<<<<<<<<<
 *                         aa *= g
 *                 else:
 */
            __pyx_t_32 = ((__pyx_cur_scope->__pyx_v_P[__pyx_v_i]).t + __pyx_v_j);
            __pyx_t_7 = -1;
            if (__pyx_t_32 < 0) {
              __pyx_t_32 += __pyx_pybuffernd_tmp.diminfo[0].shape;
              if (unlikely(__pyx_t_32 < 0)) __pyx_t_7 = 0;
            } else if (unlikely(__pyx_t_32 >= __pyx_pybuffernd_tmp.diminfo[0].shape)) __pyx_t_7 = 0;
            if (unlikely(__pyx_t_7 != -1)) {
              __Pyx_RaiseBufferIndexError(__pyx_t_7);
              __PYX_ERR(0, 898, __pyx_L1_error)
            }
            *__Pyx_BufPtrStrided1d(__pyx_t_5oasis_SINGLE *, __pyx_pybuffernd_tmp.rcbuffer->pybuffer.buf, __pyx_t_32, __pyx_pybuffernd_tmp.diminfo[0].strides) = __pyx_v_aa;

            /* "oasis.pyx":899
 *                     for j in range(P[i].l):
 *                         tmp[P[i].t + j] = aa
 *                         aa *= g             # <<<<<<<<<<<<<<
 *                 else:
 *                     aa = (1 - g**P[i].l) / P[i].w
 */
            __pyx_v_aa = (__pyx_v_aa * __pyx_cur_scope->__pyx_v_g);
          }

          /* "oasis.pyx":895
 *             # calc total shift dphi due to contribution of baseline and lambda
 *             for i in range(P.size()):
 *                 if i == P.size() - 1:  # for |s|_1 instead |c|_1 sparsity             # <<<<<<<<<<<<<<
 *                     aa = 1 / P[i].w
 *                     for j in range(P[i].l):
 */
          goto __pyx_L49;
        }

        /* "oasis.pyx":901
 *                         aa *= g
 *                 else:
 *                     aa = (1 - g**P[i].l) / P[i].w             # <<<<<<<<<<<<<<
 *                     for j in range(P[i].l):
 *                         tmp[P[i].t + j] = aa
 */
        /*else*/ {
          __pyx_v_aa = ((1.0 - powf(__pyx_cur_scope->__pyx_v_g, ((__pyx_t_5oasis_SINGLE)(__pyx_cur_scope->__pyx_v_P[__pyx_v_i]).l))) / (__pyx_cur_scope->__pyx_v_P[__pyx_v_i]).w);

          /* "oasis.pyx":902
 *                 else:
 *                     aa = (1 - g**P[i].l) / P[i].w
 *                     for j in range(P[i].l):             # <<<<<<<<<<<<<<
 *                         tmp[P[i].t + j] = aa
 *                         aa *= g
 */
          __pyx_t_22 = (__pyx_cur_scope->__pyx_v_P[__pyx_v_i]).l;
          for (__pyx_t_23 = 0; __pyx_t_23 < __pyx_t_22; __pyx_t_23+=1) {
            __pyx_v_j = __pyx_t_23;

            /* "oasis.pyx":903
 *                     aa = (1 - g**P[i].l) / P[i].w
 *                     for j in range(P[i].l):
 *                         tmp[P[i].t + j] = aa             # <<<<<<<<<<<<<<
 *                         aa *= g
 *             tmp -= 1. / T / (1 - g) * np.sum([(1 - g**P[i].l) ** 2 / P[i].w
 */
            __pyx_t_33 = ((__pyx_cur_scope->__pyx_v_P[__pyx_v_i]).t + __pyx_v_j);
            __pyx_t_7 = -1;
            if (__pyx_t_33 < 0) {
              __pyx_t_33 += __pyx_pybuffernd_tmp.diminfo[0].shape;
              if (unlikely(__pyx_t_33 < 0)) __pyx_t_7 = 0;
            } else if (unlikely(__pyx_t_33 >= __pyx_pybuffernd_tmp.diminfo[0].shape)) __pyx_t_7 = 0;
            if (unlikely(__pyx_t_7 != -1)) {
              __Pyx_RaiseBufferIndexError(__pyx_t_7);
              __PYX_ERR(0, 903, __pyx_L1_error)
            }
            *__Pyx_BufPtrStrided1d(__pyx_t_5oasis_SINGLE *, __pyx_pybuffernd_tmp.rcbuffer->pybuffer.buf, __pyx_t_33, __pyx_pybuffernd_tmp.diminfo[0].strides) = __pyx_v_aa;

            /* "oasis.pyx":904
 *                     for j in range(P[i].l):
 *                         tmp[P[i].t + j] = aa
 *                         aa *= g             # <<<<<<<<<<<<<<
 *             tmp -= 1. / T / (1 - g) * np.sum([(1 - g**P[i].l) ** 2 / P[i].w
 *                                               for i in range(P.size())])
 */
            __pyx_v_aa = (__pyx_v_aa * __pyx_cur_scope->__pyx_v_g);
          }
        }
        __pyx_L49:;
      }

      /* "oasis.pyx":905
 *                         tmp[P[i].t + j] = aa
 *                         aa *= g
 *             tmp -= 1. / T / (1 - g) * np.sum([(1 - g**P[i].l) ** 2 / P[i].w             # <<<<<<<<<<<<<<
 *                                               for i in range(P.size())])
 *             aa = tmp.dot(tmp)
 */
      __pyx_t_4 = PyFloat_FromDouble(((1. / __pyx_cur_scope->__pyx_v_T) / (1.0 - __pyx_cur_scope->__pyx_v_g))); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 905, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_12 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 905, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_sum); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 905, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_t_12 = PyList_New(0); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 905, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);

      /* "oasis.pyx":906
 *                         aa *= g
 *             tmp -= 1. / T / (1 - g) * np.sum([(1 - g**P[i].l) ** 2 / P[i].w
 *                                               for i in range(P.size())])             # <<<<<<<<<<<<<<
 *             aa = tmp.dot(tmp)
 *             bb = res.dot(tmp)
 */
      __pyx_t_21 = __pyx_cur_scope->__pyx_v_P.size();
      for (__pyx_t_1 = 0; __pyx_t_1 < __pyx_t_21; __pyx_t_1+=1) {
        __pyx_v_i = __pyx_t_1;

        /* "oasis.pyx":905
 *                         tmp[P[i].t + j] = aa
 *                         aa *= g
 *             tmp -= 1. / T / (1 - g) * np.sum([(1 - g**P[i].l) ** 2 / P[i].w             # <<<<<<<<<<<<<<
 *                                               for i in range(P.size())])
 *             aa = tmp.dot(tmp)
 */
        __pyx_t_15 = PyFloat_FromDouble((powf((1.0 - powf(__pyx_cur_scope->__pyx_v_g, ((__pyx_t_5oasis_SINGLE)(__pyx_cur_scope->__pyx_v_P[__pyx_v_i]).l))), 2.0) / (__pyx_cur_scope->__pyx_v_P[__pyx_v_i]).w)); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 905, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_15);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_12, (PyObject*)__pyx_t_15))) __PYX_ERR(0, 905, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      }
      __pyx_t_15 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_15)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_15);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      if (!__pyx_t_15) {
        __pyx_t_16 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_12); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 905, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_GOTREF(__pyx_t_16);
      } else {
        __pyx_t_14 = PyTuple_New(1+1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 905, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_GIVEREF(__pyx_t_15); PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_15); __pyx_t_15 = NULL;
        __Pyx_GIVEREF(__pyx_t_12);
        PyTuple_SET_ITEM(__pyx_t_14, 0+1, __pyx_t_12);
        __pyx_t_12 = 0;
        __pyx_t_16 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_14, NULL); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 905, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = PyNumber_Multiply(__pyx_t_4, __pyx_t_16); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 905, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      __pyx_t_16 = PyNumber_InPlaceSubtract(((PyObject *)__pyx_v_tmp), __pyx_t_5); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 905, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (!(likely(((__pyx_t_16) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_16, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 905, __pyx_L1_error)
      __pyx_t_6 = ((PyArrayObject *)__pyx_t_16);
      {
        __Pyx_BufFmt_StackElem __pyx_stack[1];
        __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_tmp.rcbuffer->pybuffer);
        __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_tmp.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack);
        if (unlikely(__pyx_t_7 < 0)) {
          PyErr_Fetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
          if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_tmp.rcbuffer->pybuffer, (PyObject*)__pyx_v_tmp, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
            Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10);
            __Pyx_RaiseBufferFallbackError();
          } else {
            PyErr_Restore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
          }
        }
        __pyx_pybuffernd_tmp.diminfo[0].strides = __pyx_pybuffernd_tmp.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_tmp.diminfo[0].shape = __pyx_pybuffernd_tmp.rcbuffer->pybuffer.shape[0];
        if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 905, __pyx_L1_error)
      }
      __pyx_t_6 = 0;
      __Pyx_DECREF_SET(__pyx_v_tmp, ((PyArrayObject *)__pyx_t_16));
      __pyx_t_16 = 0;

      /* "oasis.pyx":907
 *             tmp -= 1. / T / (1 - g) * np.sum([(1 - g**P[i].l) ** 2 / P[i].w
 *                                               for i in range(P.size())])
 *             aa = tmp.dot(tmp)             # <<<<<<<<<<<<<<
 *             bb = res.dot(tmp)
 *             cc = RSS - thresh
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_tmp), __pyx_n_s_dot); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 907, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      if (!__pyx_t_4) {
        __pyx_t_16 = __Pyx_PyObject_CallOneArg(__pyx_t_5, ((PyObject *)__pyx_v_tmp)); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 907, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
      } else {
        __pyx_t_14 = PyTuple_New(1+1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 907, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_INCREF(((PyObject *)__pyx_v_tmp));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_tmp));
        PyTuple_SET_ITEM(__pyx_t_14, 0+1, ((PyObject *)__pyx_v_tmp));
        __pyx_t_16 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_14, NULL); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 907, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_20 = __pyx_PyFloat_AsFloat(__pyx_t_16); if (unlikely((__pyx_t_20 == (npy_float32)-1) && PyErr_Occurred())) __PYX_ERR(0, 907, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      __pyx_v_aa = __pyx_t_20;

      /* "oasis.pyx":908
 *                                               for i in range(P.size())])
 *             aa = tmp.dot(tmp)
 *             bb = res.dot(tmp)             # <<<<<<<<<<<<<<
 *             cc = RSS - thresh
 *             if bb * bb - aa * cc > 0:
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_res), __pyx_n_s_dot); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 908, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_14 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_14)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_14);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      if (!__pyx_t_14) {
        __pyx_t_16 = __Pyx_PyObject_CallOneArg(__pyx_t_5, ((PyObject *)__pyx_v_tmp)); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 908, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
      } else {
        __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 908, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_14); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_14); __pyx_t_14 = NULL;
        __Pyx_INCREF(((PyObject *)__pyx_v_tmp));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_tmp));
        PyTuple_SET_ITEM(__pyx_t_4, 0+1, ((PyObject *)__pyx_v_tmp));
        __pyx_t_16 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_4, NULL); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 908, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_20 = __pyx_PyFloat_AsFloat(__pyx_t_16); if (unlikely((__pyx_t_20 == (npy_float32)-1) && PyErr_Occurred())) __PYX_ERR(0, 908, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      __pyx_v_bb = __pyx_t_20;

      /* "oasis.pyx":909
 *             aa = tmp.dot(tmp)
 *             bb = res.dot(tmp)
 *             cc = RSS - thresh             # <<<<<<<<<<<<<<
 *             if bb * bb - aa * cc > 0:
 *                 dphi = (-bb + sqrt(bb * bb - aa * cc)) / aa
 */
      __pyx_v_cc = (__pyx_v_RSS - __pyx_v_thresh);

      /* "oasis.pyx":910
 *             bb = res.dot(tmp)
 *             cc = RSS - thresh
 *             if bb * bb - aa * cc > 0:             # <<<<<<<<<<<<<<
 *                 dphi = (-bb + sqrt(bb * bb - aa * cc)) / aa
 *             else:
 */
      __pyx_t_17 = ((((__pyx_v_bb * __pyx_v_bb) - (__pyx_v_aa * __pyx_v_cc)) > 0.0) != 0);
      if (__pyx_t_17) {

        /* "oasis.pyx":911
 *             cc = RSS - thresh
 *             if bb * bb - aa * cc > 0:
 *                 dphi = (-bb + sqrt(bb * bb - aa * cc)) / aa             # <<<<<<<<<<<<<<
 *             else:
 *                 dphi = -bb / aa
 */
        __pyx_v_dphi = (((-__pyx_v_bb) + sqrt(((__pyx_v_bb * __pyx_v_bb) - (__pyx_v_aa * __pyx_v_cc)))) / __pyx_v_aa);

        /* "oasis.pyx":910
 *             bb = res.dot(tmp)
 *             cc = RSS - thresh
 *             if bb * bb - aa * cc > 0:             # <<<<<<<<<<<<<<
 *                 dphi = (-bb + sqrt(bb * bb - aa * cc)) / aa
 *             else:
 */
        goto __pyx_L56;
      }

      /* "oasis.pyx":913
 *                 dphi = (-bb + sqrt(bb * bb - aa * cc)) / aa
 *             else:
 *                 dphi = -bb / aa             # <<<<<<<<<<<<<<
 *             if b_nonneg:
 *                 dphi = fmax(dphi, -b / (1 - g))
 */
      /*else*/ {
        __pyx_v_dphi = ((-__pyx_v_bb) / __pyx_v_aa);
      }
      __pyx_L56:;

      /* "oasis.pyx":914
 *             else:
 *                 dphi = -bb / aa
 *             if b_nonneg:             # <<<<<<<<<<<<<<
 *                 dphi = fmax(dphi, -b / (1 - g))
 *             b += dphi * (1 - g)
 */
      __pyx_t_17 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_cur_scope->__pyx_v_b_nonneg)); if (unlikely(__pyx_t_17 < 0)) __PYX_ERR(0, 914, __pyx_L1_error)
      if (__pyx_t_17) {

        /* "oasis.pyx":915
 *                 dphi = -bb / aa
 *             if b_nonneg:
 *                 dphi = fmax(dphi, -b / (1 - g))             # <<<<<<<<<<<<<<
 *             b += dphi * (1 - g)
 *             for i in range(P.size()):  # perform shift
 */
        __pyx_v_dphi = fmax(__pyx_v_dphi, ((-__pyx_cur_scope->__pyx_v_b) / (1.0 - __pyx_cur_scope->__pyx_v_g)));

        /* "oasis.pyx":914
 *             else:
 *                 dphi = -bb / aa
 *             if b_nonneg:             # <<<<<<<<<<<<<<
 *                 dphi = fmax(dphi, -b / (1 - g))
 *             b += dphi * (1 - g)
 */
      }

      /* "oasis.pyx":916
 *             if b_nonneg:
 *                 dphi = fmax(dphi, -b / (1 - g))
 *             b += dphi * (1 - g)             # <<<<<<<<<<<<<<
 *             for i in range(P.size()):  # perform shift
 *                 P[i].v -= dphi * (1 - g**P[i].l)
 */
      __pyx_cur_scope->__pyx_v_b = (__pyx_cur_scope->__pyx_v_b + (__pyx_v_dphi * (1.0 - __pyx_cur_scope->__pyx_v_g)));

      /* "oasis.pyx":917
 *                 dphi = fmax(dphi, -b / (1 - g))
 *             b += dphi * (1 - g)
 *             for i in range(P.size()):  # perform shift             # <<<<<<<<<<<<<<
 *                 P[i].v -= dphi * (1 - g**P[i].l)
 *             c, P = oasis(P, g, c)
 */
      __pyx_t_21 = __pyx_cur_scope->__pyx_v_P.size();
      for (__pyx_t_1 = 0; __pyx_t_1 < __pyx_t_21; __pyx_t_1+=1) {
        __pyx_v_i = __pyx_t_1;

        /* "oasis.pyx":918
 *             b += dphi * (1 - g)
 *             for i in range(P.size()):  # perform shift
 *                 P[i].v -= dphi * (1 - g**P[i].l)             # <<<<<<<<<<<<<<
 *             c, P = oasis(P, g, c)
 *             # update b and lam
 */
        __pyx_t_22 = __pyx_v_i;
        (__pyx_cur_scope->__pyx_v_P[__pyx_t_22]).v = ((__pyx_cur_scope->__pyx_v_P[__pyx_t_22]).v - (__pyx_v_dphi * (1.0 - powf(__pyx_cur_scope->__pyx_v_g, ((__pyx_t_5oasis_SINGLE)(__pyx_cur_scope->__pyx_v_P[__pyx_v_i]).l)))));
      }

      /* "oasis.pyx":919
 *             for i in range(P.size()):  # perform shift
 *                 P[i].v -= dphi * (1 - g**P[i].l)
 *             c, P = oasis(P, g, c)             # <<<<<<<<<<<<<<
 *             # update b and lam
 *             db = fmax(np.mean(y - c), 0 if b_nonneg else -np.inf) - b
 */
      __pyx_t_16 = __pyx_pf_5oasis_20constrained_oasisAR1_2oasis(__pyx_v_oasis, __pyx_cur_scope->__pyx_v_P, __pyx_cur_scope->__pyx_v_g, ((PyArrayObject *)__pyx_v_c)); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 919, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      if ((likely(PyTuple_CheckExact(__pyx_t_16))) || (PyList_CheckExact(__pyx_t_16))) {
        PyObject* sequence = __pyx_t_16;
        #if CYTHON_COMPILING_IN_CPYTHON
        Py_ssize_t size = Py_SIZE(sequence);
        #else
        Py_ssize_t size = PySequence_Size(sequence);
        #endif
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 919, __pyx_L1_error)
        }
        #if CYTHON_COMPILING_IN_CPYTHON
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_4);
        #else
        __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 919, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 919, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_14 = PyObject_GetIter(__pyx_t_16); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 919, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        __pyx_t_18 = Py_TYPE(__pyx_t_14)->tp_iternext;
        index = 0; __pyx_t_5 = __pyx_t_18(__pyx_t_14); if (unlikely(!__pyx_t_5)) goto __pyx_L60_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_5);
        index = 1; __pyx_t_4 = __pyx_t_18(__pyx_t_14); if (unlikely(!__pyx_t_4)) goto __pyx_L60_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_4);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_18(__pyx_t_14), 2) < 0) __PYX_ERR(0, 919, __pyx_L1_error)
        __pyx_t_18 = NULL;
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        goto __pyx_L61_unpacking_done;
        __pyx_L60_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        __pyx_t_18 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 919, __pyx_L1_error)
        __pyx_L61_unpacking_done:;
      }
      if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 919, __pyx_L1_error)
      __pyx_t_19 = __pyx_convert_vector_from_py_struct____pyx_t_5oasis_Pool(__pyx_t_4); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 919, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = ((PyArrayObject *)__pyx_t_5);
      {
        __Pyx_BufFmt_StackElem __pyx_stack[1];
        __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_c.rcbuffer->pybuffer);
        __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
        if (unlikely(__pyx_t_7 < 0)) {
          PyErr_Fetch(&__pyx_t_10, &__pyx_t_9, &__pyx_t_8);
          if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_v_c, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
            Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_8);
            __Pyx_RaiseBufferFallbackError();
          } else {
            PyErr_Restore(__pyx_t_10, __pyx_t_9, __pyx_t_8);
          }
        }
        __pyx_pybuffernd_c.diminfo[0].strides = __pyx_pybuffernd_c.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_c.diminfo[0].shape = __pyx_pybuffernd_c.rcbuffer->pybuffer.shape[0];
        if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 919, __pyx_L1_error)
      }
      __pyx_t_6 = 0;
      __Pyx_DECREF_SET(__pyx_v_c, ((PyArrayObject *)__pyx_t_5));
      __pyx_t_5 = 0;
      __pyx_cur_scope->__pyx_v_P = __pyx_t_19;

      /* "oasis.pyx":921
 *             c, P = oasis(P, g, c)
 *             # update b and lam
 *             db = fmax(np.mean(y - c), 0 if b_nonneg else -np.inf) - b             # <<<<<<<<<<<<<<
 *             b += db
 *             dlam = -db / (1 - g)
 */
      __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 921, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_mean); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 921, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyNumber_Subtract(((PyObject *)__pyx_v_y), ((PyObject *)__pyx_v_c)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 921, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_14 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_14)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_14);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      if (!__pyx_t_14) {
        __pyx_t_16 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 921, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_16);
      } else {
        __pyx_t_12 = PyTuple_New(1+1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 921, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_GIVEREF(__pyx_t_14); PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_14); __pyx_t_14 = NULL;
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_12, 0+1, __pyx_t_4);
        __pyx_t_4 = 0;
        __pyx_t_16 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_12, NULL); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 921, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_30 = __pyx_PyFloat_AsDouble(__pyx_t_16); if (unlikely((__pyx_t_30 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 921, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      __pyx_t_17 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_cur_scope->__pyx_v_b_nonneg)); if (unlikely(__pyx_t_17 < 0)) __PYX_ERR(0, 921, __pyx_L1_error)
      if (__pyx_t_17) {
        __pyx_t_29 = 0.0;
      } else {
        __pyx_t_16 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 921, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_16, __pyx_n_s_inf); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 921, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        __pyx_t_16 = PyNumber_Negative(__pyx_t_5); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 921, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_31 = __pyx_PyFloat_AsDouble(__pyx_t_16); if (unlikely((__pyx_t_31 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 921, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        __pyx_t_29 = __pyx_t_31;
      }
      __pyx_v_db = (fmax(__pyx_t_30, __pyx_t_29) - __pyx_cur_scope->__pyx_v_b);

      /* "oasis.pyx":922
 *             # update b and lam
 *             db = fmax(np.mean(y - c), 0 if b_nonneg else -np.inf) - b
 *             b += db             # <<<<<<<<<<<<<<
 *             dlam = -db / (1 - g)
 *             lam += dlam
 */
      __pyx_cur_scope->__pyx_v_b = (__pyx_cur_scope->__pyx_v_b + __pyx_v_db);

      /* "oasis.pyx":923
 *             db = fmax(np.mean(y - c), 0 if b_nonneg else -np.inf) - b
 *             b += db
 *             dlam = -db / (1 - g)             # <<<<<<<<<<<<<<
 *             lam += dlam
 *             # correct last pool
 */
      __pyx_v_dlam = ((-__pyx_v_db) / (1.0 - __pyx_cur_scope->__pyx_v_g));

      /* "oasis.pyx":924
 *             b += db
 *             dlam = -db / (1 - g)
 *             lam += dlam             # <<<<<<<<<<<<<<
 *             # correct last pool
 *             i = P.size() - 1
 */
      __pyx_cur_scope->__pyx_v_lam = (__pyx_cur_scope->__pyx_v_lam + __pyx_v_dlam);

      /* "oasis.pyx":926
 *             lam += dlam
 *             # correct last pool
 *             i = P.size() - 1             # <<<<<<<<<<<<<<
 *             P[i].v -= dlam * g**P[i].l  # |s|_1 instead |c|_1
 *             c[P[i].t:P[i].t + P[i].l] = fmax(0, P[i].v) / P[i].w * h[:P[i].l]
 */
      __pyx_v_i = (__pyx_cur_scope->__pyx_v_P.size() - 1);

      /* "oasis.pyx":927
 *             # correct last pool
 *             i = P.size() - 1
 *             P[i].v -= dlam * g**P[i].l  # |s|_1 instead |c|_1             # <<<<<<<<<<<<<<
 *             c[P[i].t:P[i].t + P[i].l] = fmax(0, P[i].v) / P[i].w * h[:P[i].l]
 * 
 */
      __pyx_t_1 = __pyx_v_i;
      (__pyx_cur_scope->__pyx_v_P[__pyx_t_1]).v = ((__pyx_cur_scope->__pyx_v_P[__pyx_t_1]).v - (__pyx_v_dlam * powf(__pyx_cur_scope->__pyx_v_g, ((__pyx_t_5oasis_SINGLE)(__pyx_cur_scope->__pyx_v_P[__pyx_v_i]).l))));

      /* "oasis.pyx":928
 *             i = P.size() - 1
 *             P[i].v -= dlam * g**P[i].l  # |s|_1 instead |c|_1
 *             c[P[i].t:P[i].t + P[i].l] = fmax(0, P[i].v) / P[i].w * h[:P[i].l]             # <<<<<<<<<<<<<<
 * 
 *             # update g and b
 */
      __pyx_t_16 = PyFloat_FromDouble((fmax(0.0, (__pyx_cur_scope->__pyx_v_P[__pyx_v_i]).v) / (__pyx_cur_scope->__pyx_v_P[__pyx_v_i]).w)); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 928, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __pyx_t_5 = __Pyx_PyObject_GetSlice(((PyObject *)__pyx_v_h), 0, (__pyx_cur_scope->__pyx_v_P[__pyx_v_i]).l, NULL, NULL, NULL, 0, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 928, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_12 = PyNumber_Multiply(__pyx_t_16, __pyx_t_5); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 928, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__Pyx_PyObject_SetSlice(((PyObject *)__pyx_v_c), __pyx_t_12, (__pyx_cur_scope->__pyx_v_P[__pyx_v_i]).t, ((__pyx_cur_scope->__pyx_v_P[__pyx_v_i]).t + (__pyx_cur_scope->__pyx_v_P[__pyx_v_i]).l), NULL, NULL, NULL, 1, 1, 1) < 0) __PYX_ERR(0, 928, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

      /* "oasis.pyx":931
 * 
 *             # update g and b
 *             if optimize_g and count < max_iter - 1 and (not g_converged):             # <<<<<<<<<<<<<<
 *                 ma = max([P[i].l for i in range(P.size())])
 *                 idx = np.argsort([P[i].v for i in range(P.size())])
 */
      __pyx_t_26 = (__pyx_cur_scope->__pyx_v_optimize_g != 0);
      if (__pyx_t_26) {
      } else {
        __pyx_t_17 = __pyx_t_26;
        goto __pyx_L63_bool_binop_done;
      }
      __pyx_t_26 = ((__pyx_v_count < (__pyx_v_max_iter - 1)) != 0);
      if (__pyx_t_26) {
      } else {
        __pyx_t_17 = __pyx_t_26;
        goto __pyx_L63_bool_binop_done;
      }
      __pyx_t_26 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_g_converged)); if (unlikely(__pyx_t_26 < 0)) __PYX_ERR(0, 931, __pyx_L1_error)
      __pyx_t_2 = ((!__pyx_t_26) != 0);
      __pyx_t_17 = __pyx_t_2;
      __pyx_L63_bool_binop_done:;
      if (__pyx_t_17) {

        /* "oasis.pyx":932
 *             # update g and b
 *             if optimize_g and count < max_iter - 1 and (not g_converged):
 *                 ma = max([P[i].l for i in range(P.size())])             # <<<<<<<<<<<<<<
 *                 idx = np.argsort([P[i].v for i in range(P.size())])
 *                 Pt = [P[i].t for i in idx[-optimize_g:]]
 */
        __pyx_t_12 = PyList_New(0); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 932, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_21 = __pyx_cur_scope->__pyx_v_P.size();
        for (__pyx_t_1 = 0; __pyx_t_1 < __pyx_t_21; __pyx_t_1+=1) {
          __pyx_v_i = __pyx_t_1;
          __pyx_t_5 = PyInt_FromSsize_t((__pyx_cur_scope->__pyx_v_P[__pyx_v_i]).l); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 932, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_12, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 932, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        }
        __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 932, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_12);
        PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_12);
        __pyx_t_12 = 0;
        __pyx_t_12 = __Pyx_PyObject_Call(__pyx_builtin_max, __pyx_t_5, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 932, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_27 = __Pyx_PyInt_As_unsigned_int(__pyx_t_12); if (unlikely((__pyx_t_27 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 932, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_cur_scope->__pyx_v_ma = __pyx_t_27;

        /* "oasis.pyx":933
 *             if optimize_g and count < max_iter - 1 and (not g_converged):
 *                 ma = max([P[i].l for i in range(P.size())])
 *                 idx = np.argsort([P[i].v for i in range(P.size())])             # <<<<<<<<<<<<<<
 *                 Pt = [P[i].t for i in idx[-optimize_g:]]
 *                 Pl = [P[i].l for i in idx[-optimize_g:]]
 */
        __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 933, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_argsort); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 933, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 933, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_21 = __pyx_cur_scope->__pyx_v_P.size();
        for (__pyx_t_1 = 0; __pyx_t_1 < __pyx_t_21; __pyx_t_1+=1) {
          __pyx_v_i = __pyx_t_1;
          __pyx_t_4 = PyFloat_FromDouble((__pyx_cur_scope->__pyx_v_P[__pyx_v_i]).v); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 933, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_5, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 933, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        }
        __pyx_t_4 = NULL;
        if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_16))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_16);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_16, function);
          }
        }
        if (!__pyx_t_4) {
          __pyx_t_12 = __Pyx_PyObject_CallOneArg(__pyx_t_16, __pyx_t_5); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 933, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_GOTREF(__pyx_t_12);
        } else {
          __pyx_t_14 = PyTuple_New(1+1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 933, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_14);
          __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_4); __pyx_t_4 = NULL;
          __Pyx_GIVEREF(__pyx_t_5);
          PyTuple_SET_ITEM(__pyx_t_14, 0+1, __pyx_t_5);
          __pyx_t_5 = 0;
          __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_16, __pyx_t_14, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 933, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        }
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        __Pyx_XDECREF_SET(__pyx_v_idx, __pyx_t_12);
        __pyx_t_12 = 0;

        /* "oasis.pyx":934
 *                 ma = max([P[i].l for i in range(P.size())])
 *                 idx = np.argsort([P[i].v for i in range(P.size())])
 *                 Pt = [P[i].t for i in idx[-optimize_g:]]             # <<<<<<<<<<<<<<
 *                 Pl = [P[i].l for i in idx[-optimize_g:]]
 * 
 */
        __pyx_t_12 = PyList_New(0); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 934, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_16 = __Pyx_PyObject_GetSlice(__pyx_v_idx, (-__pyx_cur_scope->__pyx_v_optimize_g), 0, NULL, NULL, NULL, 1, 0, 1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 934, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
        if (likely(PyList_CheckExact(__pyx_t_16)) || PyTuple_CheckExact(__pyx_t_16)) {
          __pyx_t_14 = __pyx_t_16; __Pyx_INCREF(__pyx_t_14); __pyx_t_1 = 0;
          __pyx_t_28 = NULL;
        } else {
          __pyx_t_1 = -1; __pyx_t_14 = PyObject_GetIter(__pyx_t_16); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 934, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_14);
          __pyx_t_28 = Py_TYPE(__pyx_t_14)->tp_iternext; if (unlikely(!__pyx_t_28)) __PYX_ERR(0, 934, __pyx_L1_error)
        }
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        for (;;) {
          if (likely(!__pyx_t_28)) {
            if (likely(PyList_CheckExact(__pyx_t_14))) {
              if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_14)) break;
              #if CYTHON_COMPILING_IN_CPYTHON
              __pyx_t_16 = PyList_GET_ITEM(__pyx_t_14, __pyx_t_1); __Pyx_INCREF(__pyx_t_16); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 934, __pyx_L1_error)
              #else
              __pyx_t_16 = PySequence_ITEM(__pyx_t_14, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 934, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_16);
              #endif
            } else {
              if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_14)) break;
              #if CYTHON_COMPILING_IN_CPYTHON
              __pyx_t_16 = PyTuple_GET_ITEM(__pyx_t_14, __pyx_t_1); __Pyx_INCREF(__pyx_t_16); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 934, __pyx_L1_error)
              #else
              __pyx_t_16 = PySequence_ITEM(__pyx_t_14, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 934, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_16);
              #endif
            }
          } else {
            __pyx_t_16 = __pyx_t_28(__pyx_t_14);
            if (unlikely(!__pyx_t_16)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 934, __pyx_L1_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_16);
          }
          __pyx_t_22 = __Pyx_PyIndex_AsSsize_t(__pyx_t_16); if (unlikely((__pyx_t_22 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 934, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
          __pyx_v_i = __pyx_t_22;
          __pyx_t_16 = PyInt_FromSsize_t((__pyx_cur_scope->__pyx_v_P[__pyx_v_i]).t); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 934, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_16);
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_12, (PyObject*)__pyx_t_16))) __PYX_ERR(0, 934, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        }
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_XDECREF_SET(__pyx_v_Pt, ((PyObject*)__pyx_t_12));
        __pyx_t_12 = 0;

        /* "oasis.pyx":935
 *                 idx = np.argsort([P[i].v for i in range(P.size())])
 *                 Pt = [P[i].t for i in idx[-optimize_g:]]
 *                 Pl = [P[i].l for i in idx[-optimize_g:]]             # <<<<<<<<<<<<<<
 * 
 *                 def bar(y, opt, Pt, Pl):
 */
        __pyx_t_12 = PyList_New(0); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 935, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_14 = __Pyx_PyObject_GetSlice(__pyx_v_idx, (-__pyx_cur_scope->__pyx_v_optimize_g), 0, NULL, NULL, NULL, 1, 0, 1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 935, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        if (likely(PyList_CheckExact(__pyx_t_14)) || PyTuple_CheckExact(__pyx_t_14)) {
          __pyx_t_16 = __pyx_t_14; __Pyx_INCREF(__pyx_t_16); __pyx_t_1 = 0;
          __pyx_t_28 = NULL;
        } else {
          __pyx_t_1 = -1; __pyx_t_16 = PyObject_GetIter(__pyx_t_14); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 935, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_16);
          __pyx_t_28 = Py_TYPE(__pyx_t_16)->tp_iternext; if (unlikely(!__pyx_t_28)) __PYX_ERR(0, 935, __pyx_L1_error)
        }
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        for (;;) {
          if (likely(!__pyx_t_28)) {
            if (likely(PyList_CheckExact(__pyx_t_16))) {
              if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_16)) break;
              #if CYTHON_COMPILING_IN_CPYTHON
              __pyx_t_14 = PyList_GET_ITEM(__pyx_t_16, __pyx_t_1); __Pyx_INCREF(__pyx_t_14); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 935, __pyx_L1_error)
              #else
              __pyx_t_14 = PySequence_ITEM(__pyx_t_16, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 935, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_14);
              #endif
            } else {
              if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_16)) break;
              #if CYTHON_COMPILING_IN_CPYTHON
              __pyx_t_14 = PyTuple_GET_ITEM(__pyx_t_16, __pyx_t_1); __Pyx_INCREF(__pyx_t_14); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 935, __pyx_L1_error)
              #else
              __pyx_t_14 = PySequence_ITEM(__pyx_t_16, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 935, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_14);
              #endif
            }
          } else {
            __pyx_t_14 = __pyx_t_28(__pyx_t_16);
            if (unlikely(!__pyx_t_14)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 935, __pyx_L1_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_14);
          }
          __pyx_t_22 = __Pyx_PyIndex_AsSsize_t(__pyx_t_14); if (unlikely((__pyx_t_22 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 935, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          __pyx_v_i = __pyx_t_22;
          __pyx_t_14 = PyInt_FromSsize_t((__pyx_cur_scope->__pyx_v_P[__pyx_v_i]).l); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 935, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_14);
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_12, (PyObject*)__pyx_t_14))) __PYX_ERR(0, 935, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        }
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        __Pyx_XDECREF_SET(__pyx_v_Pl, ((PyObject*)__pyx_t_12));
        __pyx_t_12 = 0;

        /* "oasis.pyx":937
 *                 Pl = [P[i].l for i in idx[-optimize_g:]]
 * 
 *                 def bar(y, opt, Pt, Pl):             # <<<<<<<<<<<<<<
 *                     b, g = opt
 *                     h = np.exp(log(g) * np.arange(ma, dtype=np.float32))
 */
        __pyx_t_12 = __Pyx_CyFunction_NewEx(&__pyx_mdef_5oasis_20constrained_oasisAR1_9bar, 0, __pyx_n_s_constrained_oasisAR1_locals_bar_2, ((PyObject*)__pyx_cur_scope), __pyx_n_s_oasis, __pyx_d, ((PyObject *)__pyx_codeobj__18)); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 937, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_bar);
        __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_bar, __pyx_t_12);
        __Pyx_GIVEREF(__pyx_t_12);
        __pyx_t_12 = 0;

        /* "oasis.pyx":953
 *                                 for i in range(P.size() if P.size() < optimize_g else optimize_g)])
 * 
 *                 def baz(y, Pt, Pl):             # <<<<<<<<<<<<<<
 *                     return minimize(lambda x: bar(y, x, Pt, Pl), (b, g),
 *                                     bounds=((0 if b_nonneg else None, None), (.001, .999)),
 */
        __pyx_t_12 = __Pyx_CyFunction_NewEx(&__pyx_mdef_5oasis_20constrained_oasisAR1_11baz, 0, __pyx_n_s_constrained_oasisAR1_locals_baz_2, ((PyObject*)__pyx_cur_scope), __pyx_n_s_oasis, __pyx_d, ((PyObject *)__pyx_codeobj__20)); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 953, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_XDECREF_SET(__pyx_v_baz, __pyx_t_12);
        __pyx_t_12 = 0;

        /* "oasis.pyx":958
 *                                     method='L-BFGS-B',
 *                                     options={'gtol': 1e-04, 'maxiter': 3, 'ftol': 1e-05})
 *                 result = baz(y, Pt, Pl)             # <<<<<<<<<<<<<<
 *                 if fabs(result['x'][1] - g) < 1e-3:
 *                     g_converged = True
 */
        __pyx_t_12 = PyTuple_New(3); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 958, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_INCREF(((PyObject *)__pyx_v_y));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_y));
        PyTuple_SET_ITEM(__pyx_t_12, 0, ((PyObject *)__pyx_v_y));
        __Pyx_INCREF(__pyx_v_Pt);
        __Pyx_GIVEREF(__pyx_v_Pt);
        PyTuple_SET_ITEM(__pyx_t_12, 1, __pyx_v_Pt);
        __Pyx_INCREF(__pyx_v_Pl);
        __Pyx_GIVEREF(__pyx_v_Pl);
        PyTuple_SET_ITEM(__pyx_t_12, 2, __pyx_v_Pl);
        __pyx_t_16 = __Pyx_PyObject_Call(__pyx_v_baz, __pyx_t_12, NULL); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 958, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_XDECREF_SET(__pyx_v_result, __pyx_t_16);
        __pyx_t_16 = 0;

        /* "oasis.pyx":959
 *                                     options={'gtol': 1e-04, 'maxiter': 3, 'ftol': 1e-05})
 *                 result = baz(y, Pt, Pl)
 *                 if fabs(result['x'][1] - g) < 1e-3:             # <<<<<<<<<<<<<<
 *                     g_converged = True
 *                 b, g = result['x']
 */
        __pyx_t_16 = PyObject_GetItem(__pyx_v_result, __pyx_n_s_x); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 959, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
        __pyx_t_12 = __Pyx_GetItemInt(__pyx_t_16, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 959, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        __pyx_t_16 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_g); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 959, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
        __pyx_t_14 = PyNumber_Subtract(__pyx_t_12, __pyx_t_16); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 959, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        __pyx_t_29 = __pyx_PyFloat_AsDouble(__pyx_t_14); if (unlikely((__pyx_t_29 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 959, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        __pyx_t_17 = ((fabs(__pyx_t_29) < 1e-3) != 0);
        if (__pyx_t_17) {

          /* "oasis.pyx":960
 *                 result = baz(y, Pt, Pl)
 *                 if fabs(result['x'][1] - g) < 1e-3:
 *                     g_converged = True             # <<<<<<<<<<<<<<
 *                 b, g = result['x']
 *                 # explicit kernel, useful for constructing c
 */
          __Pyx_INCREF(Py_True);
          __Pyx_DECREF_SET(__pyx_v_g_converged, ((PyBoolObject *)Py_True));

          /* "oasis.pyx":959
 *                                     options={'gtol': 1e-04, 'maxiter': 3, 'ftol': 1e-05})
 *                 result = baz(y, Pt, Pl)
 *                 if fabs(result['x'][1] - g) < 1e-3:             # <<<<<<<<<<<<<<
 *                     g_converged = True
 *                 b, g = result['x']
 */
        }

        /* "oasis.pyx":961
 *                 if fabs(result['x'][1] - g) < 1e-3:
 *                     g_converged = True
 *                 b, g = result['x']             # <<<<<<<<<<<<<<
 *                 # explicit kernel, useful for constructing c
 *                 h = np.exp(log(g) * np.arange(T, dtype=np.float32))
 */
        __pyx_t_14 = PyObject_GetItem(__pyx_v_result, __pyx_n_s_x); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 961, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        if ((likely(PyTuple_CheckExact(__pyx_t_14))) || (PyList_CheckExact(__pyx_t_14))) {
          PyObject* sequence = __pyx_t_14;
          #if CYTHON_COMPILING_IN_CPYTHON
          Py_ssize_t size = Py_SIZE(sequence);
          #else
          Py_ssize_t size = PySequence_Size(sequence);
          #endif
          if (unlikely(size != 2)) {
            if (size > 2) __Pyx_RaiseTooManyValuesError(2);
            else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
            __PYX_ERR(0, 961, __pyx_L1_error)
          }
          #if CYTHON_COMPILING_IN_CPYTHON
          if (likely(PyTuple_CheckExact(sequence))) {
            __pyx_t_16 = PyTuple_GET_ITEM(sequence, 0); 
            __pyx_t_12 = PyTuple_GET_ITEM(sequence, 1); 
          } else {
            __pyx_t_16 = PyList_GET_ITEM(sequence, 0); 
            __pyx_t_12 = PyList_GET_ITEM(sequence, 1); 
          }
          __Pyx_INCREF(__pyx_t_16);
          __Pyx_INCREF(__pyx_t_12);
          #else
          __pyx_t_16 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 961, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_16);
          __pyx_t_12 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 961, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          #endif
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        } else {
          Py_ssize_t index = -1;
          __pyx_t_5 = PyObject_GetIter(__pyx_t_14); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 961, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          __pyx_t_18 = Py_TYPE(__pyx_t_5)->tp_iternext;
          index = 0; __pyx_t_16 = __pyx_t_18(__pyx_t_5); if (unlikely(!__pyx_t_16)) goto __pyx_L75_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_16);
          index = 1; __pyx_t_12 = __pyx_t_18(__pyx_t_5); if (unlikely(!__pyx_t_12)) goto __pyx_L75_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_12);
          if (__Pyx_IternextUnpackEndCheck(__pyx_t_18(__pyx_t_5), 2) < 0) __PYX_ERR(0, 961, __pyx_L1_error)
          __pyx_t_18 = NULL;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          goto __pyx_L76_unpacking_done;
          __pyx_L75_unpacking_failed:;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_18 = NULL;
          if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
          __PYX_ERR(0, 961, __pyx_L1_error)
          __pyx_L76_unpacking_done:;
        }
        __pyx_t_20 = __pyx_PyFloat_AsFloat(__pyx_t_16); if (unlikely((__pyx_t_20 == (npy_float32)-1) && PyErr_Occurred())) __PYX_ERR(0, 961, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        __pyx_t_34 = __pyx_PyFloat_AsFloat(__pyx_t_12); if (unlikely((__pyx_t_34 == (npy_float32)-1) && PyErr_Occurred())) __PYX_ERR(0, 961, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_cur_scope->__pyx_v_b = __pyx_t_20;
        __pyx_cur_scope->__pyx_v_g = __pyx_t_34;

        /* "oasis.pyx":963
 *                 b, g = result['x']
 *                 # explicit kernel, useful for constructing c
 *                 h = np.exp(log(g) * np.arange(T, dtype=np.float32))             # <<<<<<<<<<<<<<
 *                 for i in range(P.size()):
 *                     q = h[:P[i].l]
 */
        __pyx_t_12 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 963, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_exp); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 963, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_12 = PyFloat_FromDouble(log(__pyx_cur_scope->__pyx_v_g)); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 963, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 963, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_arange); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 963, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = __Pyx_PyInt_From_unsigned_int(__pyx_cur_scope->__pyx_v_T); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 963, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_15 = PyTuple_New(1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 963, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_15);
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_t_5);
        __pyx_t_5 = 0;
        __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 963, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 963, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_float32); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 963, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_11) < 0) __PYX_ERR(0, 963, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_15, __pyx_t_5); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 963, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = PyNumber_Multiply(__pyx_t_12, __pyx_t_11); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 963, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = NULL;
        if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_16))) {
          __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_16);
          if (likely(__pyx_t_11)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
            __Pyx_INCREF(__pyx_t_11);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_16, function);
          }
        }
        if (!__pyx_t_11) {
          __pyx_t_14 = __Pyx_PyObject_CallOneArg(__pyx_t_16, __pyx_t_5); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 963, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_GOTREF(__pyx_t_14);
        } else {
          __pyx_t_12 = PyTuple_New(1+1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 963, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_GIVEREF(__pyx_t_11); PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_11); __pyx_t_11 = NULL;
          __Pyx_GIVEREF(__pyx_t_5);
          PyTuple_SET_ITEM(__pyx_t_12, 0+1, __pyx_t_5);
          __pyx_t_5 = 0;
          __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_16, __pyx_t_12, NULL); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 963, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_14);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        }
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        if (!(likely(((__pyx_t_14) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_14, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 963, __pyx_L1_error)
        __pyx_t_6 = ((PyArrayObject *)__pyx_t_14);
        {
          __Pyx_BufFmt_StackElem __pyx_stack[1];
          __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_h.rcbuffer->pybuffer);
          __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_h.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
          if (unlikely(__pyx_t_7 < 0)) {
            PyErr_Fetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
            if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_h.rcbuffer->pybuffer, (PyObject*)__pyx_v_h, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
              Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10);
              __Pyx_RaiseBufferFallbackError();
            } else {
              PyErr_Restore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
            }
          }
          __pyx_pybuffernd_h.diminfo[0].strides = __pyx_pybuffernd_h.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_h.diminfo[0].shape = __pyx_pybuffernd_h.rcbuffer->pybuffer.shape[0];
          if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 963, __pyx_L1_error)
        }
        __pyx_t_6 = 0;
        __Pyx_DECREF_SET(__pyx_v_h, ((PyArrayObject *)__pyx_t_14));
        __pyx_t_14 = 0;

        /* "oasis.pyx":964
 *                 # explicit kernel, useful for constructing c
 *                 h = np.exp(log(g) * np.arange(T, dtype=np.float32))
 *                 for i in range(P.size()):             # <<<<<<<<<<<<<<
 *                     q = h[:P[i].l]
 *                     P[i].v = q.dot(y[P[i].t:P[i].t + P[i].l]) - \
 */
        __pyx_t_21 = __pyx_cur_scope->__pyx_v_P.size();
        for (__pyx_t_1 = 0; __pyx_t_1 < __pyx_t_21; __pyx_t_1+=1) {
          __pyx_v_i = __pyx_t_1;

          /* "oasis.pyx":965
 *                 h = np.exp(log(g) * np.arange(T, dtype=np.float32))
 *                 for i in range(P.size()):
 *                     q = h[:P[i].l]             # <<<<<<<<<<<<<<
 *                     P[i].v = q.dot(y[P[i].t:P[i].t + P[i].l]) - \
 *                         (b / (1 - g) + lam) * (1 - g**P[i].l)
 */
          __pyx_t_14 = __Pyx_PyObject_GetSlice(((PyObject *)__pyx_v_h), 0, (__pyx_cur_scope->__pyx_v_P[__pyx_v_i]).l, NULL, NULL, NULL, 0, 1, 1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 965, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_14);
          __Pyx_XDECREF_SET(__pyx_v_q, __pyx_t_14);
          __pyx_t_14 = 0;

          /* "oasis.pyx":966
 *                 for i in range(P.size()):
 *                     q = h[:P[i].l]
 *                     P[i].v = q.dot(y[P[i].t:P[i].t + P[i].l]) - \             # <<<<<<<<<<<<<<
 *                         (b / (1 - g) + lam) * (1 - g**P[i].l)
 *                     P[i].w = q.dot(q)
 */
          __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_v_q, __pyx_n_s_dot); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 966, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_16);
          __pyx_t_12 = __Pyx_PyObject_GetSlice(((PyObject *)__pyx_v_y), (__pyx_cur_scope->__pyx_v_P[__pyx_v_i]).t, ((__pyx_cur_scope->__pyx_v_P[__pyx_v_i]).t + (__pyx_cur_scope->__pyx_v_P[__pyx_v_i]).l), NULL, NULL, NULL, 1, 1, 1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 966, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __pyx_t_5 = NULL;
          if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_16))) {
            __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_16);
            if (likely(__pyx_t_5)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
              __Pyx_INCREF(__pyx_t_5);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_16, function);
            }
          }
          if (!__pyx_t_5) {
            __pyx_t_14 = __Pyx_PyObject_CallOneArg(__pyx_t_16, __pyx_t_12); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 966, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            __Pyx_GOTREF(__pyx_t_14);
          } else {
            __pyx_t_11 = PyTuple_New(1+1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 966, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_11);
            __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_5); __pyx_t_5 = NULL;
            __Pyx_GIVEREF(__pyx_t_12);
            PyTuple_SET_ITEM(__pyx_t_11, 0+1, __pyx_t_12);
            __pyx_t_12 = 0;
            __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_16, __pyx_t_11, NULL); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 966, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_14);
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          }
          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

          /* "oasis.pyx":967
 *                     q = h[:P[i].l]
 *                     P[i].v = q.dot(y[P[i].t:P[i].t + P[i].l]) - \
 *                         (b / (1 - g) + lam) * (1 - g**P[i].l)             # <<<<<<<<<<<<<<
 *                     P[i].w = q.dot(q)
 *                 P[P.size() - 1].v -= lam * g**P[P.size() - 1].l  # |s|_1 instead |c|_1
 */
          __pyx_t_16 = PyFloat_FromDouble((((__pyx_cur_scope->__pyx_v_b / (1.0 - __pyx_cur_scope->__pyx_v_g)) + __pyx_cur_scope->__pyx_v_lam) * (1.0 - powf(__pyx_cur_scope->__pyx_v_g, ((__pyx_t_5oasis_SINGLE)(__pyx_cur_scope->__pyx_v_P[__pyx_v_i]).l))))); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 967, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_16);

          /* "oasis.pyx":966
 *                 for i in range(P.size()):
 *                     q = h[:P[i].l]
 *                     P[i].v = q.dot(y[P[i].t:P[i].t + P[i].l]) - \             # <<<<<<<<<<<<<<
 *                         (b / (1 - g) + lam) * (1 - g**P[i].l)
 *                     P[i].w = q.dot(q)
 */
          __pyx_t_11 = PyNumber_Subtract(__pyx_t_14, __pyx_t_16); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 966, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
          __pyx_t_34 = __pyx_PyFloat_AsFloat(__pyx_t_11); if (unlikely((__pyx_t_34 == (npy_float32)-1) && PyErr_Occurred())) __PYX_ERR(0, 966, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          (__pyx_cur_scope->__pyx_v_P[__pyx_v_i]).v = __pyx_t_34;

          /* "oasis.pyx":968
 *                     P[i].v = q.dot(y[P[i].t:P[i].t + P[i].l]) - \
 *                         (b / (1 - g) + lam) * (1 - g**P[i].l)
 *                     P[i].w = q.dot(q)             # <<<<<<<<<<<<<<
 *                 P[P.size() - 1].v -= lam * g**P[P.size() - 1].l  # |s|_1 instead |c|_1
 *                 c, P = oasis(P, g, c)
 */
          __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_v_q, __pyx_n_s_dot); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 968, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_16);
          __pyx_t_14 = NULL;
          if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_16))) {
            __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_16);
            if (likely(__pyx_t_14)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
              __Pyx_INCREF(__pyx_t_14);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_16, function);
            }
          }
          if (!__pyx_t_14) {
            __pyx_t_11 = __Pyx_PyObject_CallOneArg(__pyx_t_16, __pyx_v_q); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 968, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_11);
          } else {
            __pyx_t_12 = PyTuple_New(1+1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 968, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_12);
            __Pyx_GIVEREF(__pyx_t_14); PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_14); __pyx_t_14 = NULL;
            __Pyx_INCREF(__pyx_v_q);
            __Pyx_GIVEREF(__pyx_v_q);
            PyTuple_SET_ITEM(__pyx_t_12, 0+1, __pyx_v_q);
            __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_16, __pyx_t_12, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 968, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_11);
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          }
          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
          __pyx_t_34 = __pyx_PyFloat_AsFloat(__pyx_t_11); if (unlikely((__pyx_t_34 == (npy_float32)-1) && PyErr_Occurred())) __PYX_ERR(0, 968, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          (__pyx_cur_scope->__pyx_v_P[__pyx_v_i]).w = __pyx_t_34;
        }

        /* "oasis.pyx":969
 *                         (b / (1 - g) + lam) * (1 - g**P[i].l)
 *                     P[i].w = q.dot(q)
 *                 P[P.size() - 1].v -= lam * g**P[P.size() - 1].l  # |s|_1 instead |c|_1             # <<<<<<<<<<<<<<
 *                 c, P = oasis(P, g, c)
 *                 # update b and lam
 */
        __pyx_t_21 = (__pyx_cur_scope->__pyx_v_P.size() - 1);
        (__pyx_cur_scope->__pyx_v_P[__pyx_t_21]).v = ((__pyx_cur_scope->__pyx_v_P[__pyx_t_21]).v - (__pyx_cur_scope->__pyx_v_lam * powf(__pyx_cur_scope->__pyx_v_g, ((__pyx_t_5oasis_SINGLE)(__pyx_cur_scope->__pyx_v_P[(__pyx_cur_scope->__pyx_v_P.size() - 1)]).l))));

        /* "oasis.pyx":970
 *                     P[i].w = q.dot(q)
 *                 P[P.size() - 1].v -= lam * g**P[P.size() - 1].l  # |s|_1 instead |c|_1
 *                 c, P = oasis(P, g, c)             # <<<<<<<<<<<<<<
 *                 # update b and lam
 *                 db = fmax(np.mean(y - c), 0 if b_nonneg else -np.inf) - b
 */
        __pyx_t_11 = __pyx_pf_5oasis_20constrained_oasisAR1_2oasis(__pyx_v_oasis, __pyx_cur_scope->__pyx_v_P, __pyx_cur_scope->__pyx_v_g, ((PyArrayObject *)__pyx_v_c)); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 970, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        if ((likely(PyTuple_CheckExact(__pyx_t_11))) || (PyList_CheckExact(__pyx_t_11))) {
          PyObject* sequence = __pyx_t_11;
          #if CYTHON_COMPILING_IN_CPYTHON
          Py_ssize_t size = Py_SIZE(sequence);
          #else
          Py_ssize_t size = PySequence_Size(sequence);
          #endif
          if (unlikely(size != 2)) {
            if (size > 2) __Pyx_RaiseTooManyValuesError(2);
            else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
            __PYX_ERR(0, 970, __pyx_L1_error)
          }
          #if CYTHON_COMPILING_IN_CPYTHON
          if (likely(PyTuple_CheckExact(sequence))) {
            __pyx_t_16 = PyTuple_GET_ITEM(sequence, 0); 
            __pyx_t_12 = PyTuple_GET_ITEM(sequence, 1); 
          } else {
            __pyx_t_16 = PyList_GET_ITEM(sequence, 0); 
            __pyx_t_12 = PyList_GET_ITEM(sequence, 1); 
          }
          __Pyx_INCREF(__pyx_t_16);
          __Pyx_INCREF(__pyx_t_12);
          #else
          __pyx_t_16 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 970, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_16);
          __pyx_t_12 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 970, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          #endif
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        } else {
          Py_ssize_t index = -1;
          __pyx_t_14 = PyObject_GetIter(__pyx_t_11); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 970, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_14);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __pyx_t_18 = Py_TYPE(__pyx_t_14)->tp_iternext;
          index = 0; __pyx_t_16 = __pyx_t_18(__pyx_t_14); if (unlikely(!__pyx_t_16)) goto __pyx_L79_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_16);
          index = 1; __pyx_t_12 = __pyx_t_18(__pyx_t_14); if (unlikely(!__pyx_t_12)) goto __pyx_L79_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_12);
          if (__Pyx_IternextUnpackEndCheck(__pyx_t_18(__pyx_t_14), 2) < 0) __PYX_ERR(0, 970, __pyx_L1_error)
          __pyx_t_18 = NULL;
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          goto __pyx_L80_unpacking_done;
          __pyx_L79_unpacking_failed:;
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          __pyx_t_18 = NULL;
          if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
          __PYX_ERR(0, 970, __pyx_L1_error)
          __pyx_L80_unpacking_done:;
        }
        if (!(likely(((__pyx_t_16) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_16, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 970, __pyx_L1_error)
        __pyx_t_19 = __pyx_convert_vector_from_py_struct____pyx_t_5oasis_Pool(__pyx_t_12); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 970, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_6 = ((PyArrayObject *)__pyx_t_16);
        {
          __Pyx_BufFmt_StackElem __pyx_stack[1];
          __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_c.rcbuffer->pybuffer);
          __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
          if (unlikely(__pyx_t_7 < 0)) {
            PyErr_Fetch(&__pyx_t_10, &__pyx_t_9, &__pyx_t_8);
            if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_v_c, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
              Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_8);
              __Pyx_RaiseBufferFallbackError();
            } else {
              PyErr_Restore(__pyx_t_10, __pyx_t_9, __pyx_t_8);
            }
          }
          __pyx_pybuffernd_c.diminfo[0].strides = __pyx_pybuffernd_c.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_c.diminfo[0].shape = __pyx_pybuffernd_c.rcbuffer->pybuffer.shape[0];
          if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 970, __pyx_L1_error)
        }
        __pyx_t_6 = 0;
        __Pyx_DECREF_SET(__pyx_v_c, ((PyArrayObject *)__pyx_t_16));
        __pyx_t_16 = 0;
        __pyx_cur_scope->__pyx_v_P = __pyx_t_19;

        /* "oasis.pyx":972
 *                 c, P = oasis(P, g, c)
 *                 # update b and lam
 *                 db = fmax(np.mean(y - c), 0 if b_nonneg else -np.inf) - b             # <<<<<<<<<<<<<<
 *                 b += db
 *                 dlam = -db / (1 - g)
 */
        __pyx_t_12 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 972, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_mean); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 972, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_12 = PyNumber_Subtract(((PyObject *)__pyx_v_y), ((PyObject *)__pyx_v_c)); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 972, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_14 = NULL;
        if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_16))) {
          __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_16);
          if (likely(__pyx_t_14)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
            __Pyx_INCREF(__pyx_t_14);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_16, function);
          }
        }
        if (!__pyx_t_14) {
          __pyx_t_11 = __Pyx_PyObject_CallOneArg(__pyx_t_16, __pyx_t_12); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 972, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __Pyx_GOTREF(__pyx_t_11);
        } else {
          __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 972, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_GIVEREF(__pyx_t_14); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_14); __pyx_t_14 = NULL;
          __Pyx_GIVEREF(__pyx_t_12);
          PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_12);
          __pyx_t_12 = 0;
          __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_16, __pyx_t_5, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 972, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        }
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        __pyx_t_29 = __pyx_PyFloat_AsDouble(__pyx_t_11); if (unlikely((__pyx_t_29 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 972, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_17 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_cur_scope->__pyx_v_b_nonneg)); if (unlikely(__pyx_t_17 < 0)) __PYX_ERR(0, 972, __pyx_L1_error)
        if (__pyx_t_17) {
          __pyx_t_30 = 0.0;
        } else {
          __pyx_t_11 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 972, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_inf); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 972, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_16);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __pyx_t_11 = PyNumber_Negative(__pyx_t_16); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 972, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
          __pyx_t_31 = __pyx_PyFloat_AsDouble(__pyx_t_11); if (unlikely((__pyx_t_31 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 972, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __pyx_t_30 = __pyx_t_31;
        }
        __pyx_v_db = (fmax(__pyx_t_29, __pyx_t_30) - __pyx_cur_scope->__pyx_v_b);

        /* "oasis.pyx":973
 *                 # update b and lam
 *                 db = fmax(np.mean(y - c), 0 if b_nonneg else -np.inf) - b
 *                 b += db             # <<<<<<<<<<<<<<
 *                 dlam = -db / (1 - g)
 *                 lam += dlam
 */
        __pyx_cur_scope->__pyx_v_b = (__pyx_cur_scope->__pyx_v_b + __pyx_v_db);

        /* "oasis.pyx":974
 *                 db = fmax(np.mean(y - c), 0 if b_nonneg else -np.inf) - b
 *                 b += db
 *                 dlam = -db / (1 - g)             # <<<<<<<<<<<<<<
 *                 lam += dlam
 *                 # correct last pool
 */
        __pyx_v_dlam = ((-__pyx_v_db) / (1.0 - __pyx_cur_scope->__pyx_v_g));

        /* "oasis.pyx":975
 *                 b += db
 *                 dlam = -db / (1 - g)
 *                 lam += dlam             # <<<<<<<<<<<<<<
 *                 # correct last pool
 *                 i = P.size() - 1
 */
        __pyx_cur_scope->__pyx_v_lam = (__pyx_cur_scope->__pyx_v_lam + __pyx_v_dlam);

        /* "oasis.pyx":977
 *                 lam += dlam
 *                 # correct last pool
 *                 i = P.size() - 1             # <<<<<<<<<<<<<<
 *                 P[i].v -= dlam * g**P[i].l  # |s|_1 instead |c|_1
 *                 c[P[i].t:P[i].t + P[i].l] = fmax(0, P[i].v) / P[i].w * h[:P[i].l]
 */
        __pyx_v_i = (__pyx_cur_scope->__pyx_v_P.size() - 1);

        /* "oasis.pyx":978
 *                 # correct last pool
 *                 i = P.size() - 1
 *                 P[i].v -= dlam * g**P[i].l  # |s|_1 instead |c|_1             # <<<<<<<<<<<<<<
 *                 c[P[i].t:P[i].t + P[i].l] = fmax(0, P[i].v) / P[i].w * h[:P[i].l]
 * 
 */
        __pyx_t_1 = __pyx_v_i;
        (__pyx_cur_scope->__pyx_v_P[__pyx_t_1]).v = ((__pyx_cur_scope->__pyx_v_P[__pyx_t_1]).v - (__pyx_v_dlam * powf(__pyx_cur_scope->__pyx_v_g, ((__pyx_t_5oasis_SINGLE)(__pyx_cur_scope->__pyx_v_P[__pyx_v_i]).l))));

        /* "oasis.pyx":979
 *                 i = P.size() - 1
 *                 P[i].v -= dlam * g**P[i].l  # |s|_1 instead |c|_1
 *                 c[P[i].t:P[i].t + P[i].l] = fmax(0, P[i].v) / P[i].w * h[:P[i].l]             # <<<<<<<<<<<<<<
 * 
 *             # calc RSS
 */
        __pyx_t_11 = PyFloat_FromDouble((fmax(0.0, (__pyx_cur_scope->__pyx_v_P[__pyx_v_i]).v) / (__pyx_cur_scope->__pyx_v_P[__pyx_v_i]).w)); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 979, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_16 = __Pyx_PyObject_GetSlice(((PyObject *)__pyx_v_h), 0, (__pyx_cur_scope->__pyx_v_P[__pyx_v_i]).l, NULL, NULL, NULL, 0, 1, 1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 979, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
        __pyx_t_5 = PyNumber_Multiply(__pyx_t_11, __pyx_t_16); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 979, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        if (__Pyx_PyObject_SetSlice(((PyObject *)__pyx_v_c), __pyx_t_5, (__pyx_cur_scope->__pyx_v_P[__pyx_v_i]).t, ((__pyx_cur_scope->__pyx_v_P[__pyx_v_i]).t + (__pyx_cur_scope->__pyx_v_P[__pyx_v_i]).l), NULL, NULL, NULL, 1, 1, 1) < 0) __PYX_ERR(0, 979, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

        /* "oasis.pyx":931
 * 
 *             # update g and b
 *             if optimize_g and count < max_iter - 1 and (not g_converged):             # <<<<<<<<<<<<<<
 *                 ma = max([P[i].l for i in range(P.size())])
 *                 idx = np.argsort([P[i].v for i in range(P.size())])
 */
      }

      /* "oasis.pyx":982
 * 
 *             # calc RSS
 *             res = y - c - b             # <<<<<<<<<<<<<<
 *             RSS = res.dot(res)
 * 
 */
      __pyx_t_5 = PyNumber_Subtract(((PyObject *)__pyx_v_y), ((PyObject *)__pyx_v_c)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 982, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_16 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_b); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 982, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __pyx_t_11 = PyNumber_Subtract(__pyx_t_5, __pyx_t_16); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 982, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      if (!(likely(((__pyx_t_11) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_11, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 982, __pyx_L1_error)
      __pyx_t_6 = ((PyArrayObject *)__pyx_t_11);
      {
        __Pyx_BufFmt_StackElem __pyx_stack[1];
        __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_res.rcbuffer->pybuffer);
        __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_res.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
        if (unlikely(__pyx_t_7 < 0)) {
          PyErr_Fetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
          if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_res.rcbuffer->pybuffer, (PyObject*)__pyx_v_res, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
            Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10);
            __Pyx_RaiseBufferFallbackError();
          } else {
            PyErr_Restore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
          }
        }
        __pyx_pybuffernd_res.diminfo[0].strides = __pyx_pybuffernd_res.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_res.diminfo[0].shape = __pyx_pybuffernd_res.rcbuffer->pybuffer.shape[0];
        if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 982, __pyx_L1_error)
      }
      __pyx_t_6 = 0;
      __Pyx_DECREF_SET(__pyx_v_res, ((PyArrayObject *)__pyx_t_11));
      __pyx_t_11 = 0;

      /* "oasis.pyx":983
 *             # calc RSS
 *             res = y - c - b
 *             RSS = res.dot(res)             # <<<<<<<<<<<<<<
 * 
 *     if decimate > 1:  # deal with full data
 */
      __pyx_t_16 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_res), __pyx_n_s_dot); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 983, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __pyx_t_5 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_16))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_16);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_16, function);
        }
      }
      if (!__pyx_t_5) {
        __pyx_t_11 = __Pyx_PyObject_CallOneArg(__pyx_t_16, ((PyObject *)__pyx_v_res)); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 983, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
      } else {
        __pyx_t_12 = PyTuple_New(1+1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 983, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_INCREF(((PyObject *)__pyx_v_res));
        __Pyx_GIVEREF(((PyObject *)__pyx_v_res));
        PyTuple_SET_ITEM(__pyx_t_12, 0+1, ((PyObject *)__pyx_v_res));
        __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_16, __pyx_t_12, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 983, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      }
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      __pyx_t_34 = __pyx_PyFloat_AsFloat(__pyx_t_11); if (unlikely((__pyx_t_34 == (npy_float32)-1) && PyErr_Occurred())) __PYX_ERR(0, 983, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_v_RSS = __pyx_t_34;
    }
  }
  __pyx_L4:;

  /* "oasis.pyx":985
 *             RSS = res.dot(res)
 * 
 *     if decimate > 1:  # deal with full data             # <<<<<<<<<<<<<<
 *         y = fluor
 *         lam *= (1 - g)
 */
  __pyx_t_17 = ((__pyx_v_decimate > 1) != 0);
  if (__pyx_t_17) {

    /* "oasis.pyx":986
 * 
 *     if decimate > 1:  # deal with full data
 *         y = fluor             # <<<<<<<<<<<<<<
 *         lam *= (1 - g)
 *         g = g**(1. / decimate)
 */
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_y.rcbuffer->pybuffer);
      __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_y.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_v_fluor), &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
      if (unlikely(__pyx_t_7 < 0)) {
        PyErr_Fetch(&__pyx_t_10, &__pyx_t_9, &__pyx_t_8);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_y.rcbuffer->pybuffer, (PyObject*)__pyx_v_y, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_8);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_10, __pyx_t_9, __pyx_t_8);
        }
      }
      __pyx_pybuffernd_y.diminfo[0].strides = __pyx_pybuffernd_y.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_y.diminfo[0].shape = __pyx_pybuffernd_y.rcbuffer->pybuffer.shape[0];
      if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 986, __pyx_L1_error)
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_fluor));
    __Pyx_DECREF_SET(__pyx_v_y, ((PyArrayObject *)__pyx_v_fluor));

    /* "oasis.pyx":987
 *     if decimate > 1:  # deal with full data
 *         y = fluor
 *         lam *= (1 - g)             # <<<<<<<<<<<<<<
 *         g = g**(1. / decimate)
 *         lam /= (1 - g)
 */
    __pyx_cur_scope->__pyx_v_lam = (__pyx_cur_scope->__pyx_v_lam * (1.0 - __pyx_cur_scope->__pyx_v_g));

    /* "oasis.pyx":988
 *         y = fluor
 *         lam *= (1 - g)
 *         g = g**(1. / decimate)             # <<<<<<<<<<<<<<
 *         lam /= (1 - g)
 *         thresh = thresh * decimate * decimate
 */
    __pyx_cur_scope->__pyx_v_g = pow(((double)__pyx_cur_scope->__pyx_v_g), (1. / __pyx_v_decimate));

    /* "oasis.pyx":989
 *         lam *= (1 - g)
 *         g = g**(1. / decimate)
 *         lam /= (1 - g)             # <<<<<<<<<<<<<<
 *         thresh = thresh * decimate * decimate
 *         T = len(fluor)
 */
    __pyx_cur_scope->__pyx_v_lam = (__pyx_cur_scope->__pyx_v_lam / (1.0 - __pyx_cur_scope->__pyx_v_g));

    /* "oasis.pyx":990
 *         g = g**(1. / decimate)
 *         lam /= (1 - g)
 *         thresh = thresh * decimate * decimate             # <<<<<<<<<<<<<<
 *         T = len(fluor)
 *         # warm-start active set
 */
    __pyx_v_thresh = ((__pyx_v_thresh * __pyx_v_decimate) * __pyx_v_decimate);

    /* "oasis.pyx":991
 *         lam /= (1 - g)
 *         thresh = thresh * decimate * decimate
 *         T = len(fluor)             # <<<<<<<<<<<<<<
 *         # warm-start active set
 *         ff = np.ravel([P[i].t * decimate + np.arange(-decimate, 3 * decimate / 2)
 */
    __pyx_t_1 = PyObject_Length(((PyObject *)__pyx_v_fluor)); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 991, __pyx_L1_error)
    __pyx_cur_scope->__pyx_v_T = __pyx_t_1;

    /* "oasis.pyx":993
 *         T = len(fluor)
 *         # warm-start active set
 *         ff = np.ravel([P[i].t * decimate + np.arange(-decimate, 3 * decimate / 2)             # <<<<<<<<<<<<<<
 *                        for i in range(P.size())])  # this window size seems necessary and sufficient
 *         ff = np.unique(ff[(ff >= 0) * (ff < T)])
 */
    __pyx_t_16 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 993, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_16, __pyx_n_s_ravel); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 993, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __pyx_t_16 = PyList_New(0); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 993, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);

    /* "oasis.pyx":994
 *         # warm-start active set
 *         ff = np.ravel([P[i].t * decimate + np.arange(-decimate, 3 * decimate / 2)
 *                        for i in range(P.size())])  # this window size seems necessary and sufficient             # <<<<<<<<<<<<<<
 *         ff = np.unique(ff[(ff >= 0) * (ff < T)])
 *         ll = np.append(ff[1:] - ff[:-1], T - ff[-1])
 */
    __pyx_t_21 = __pyx_cur_scope->__pyx_v_P.size();
    for (__pyx_t_1 = 0; __pyx_t_1 < __pyx_t_21; __pyx_t_1+=1) {
      __pyx_v_i = __pyx_t_1;

      /* "oasis.pyx":993
 *         T = len(fluor)
 *         # warm-start active set
 *         ff = np.ravel([P[i].t * decimate + np.arange(-decimate, 3 * decimate / 2)             # <<<<<<<<<<<<<<
 *                        for i in range(P.size())])  # this window size seems necessary and sufficient
 *         ff = np.unique(ff[(ff >= 0) * (ff < T)])
 */
      __pyx_t_5 = PyInt_FromSsize_t(((__pyx_cur_scope->__pyx_v_P[__pyx_v_i]).t * __pyx_v_decimate)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 993, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_15 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 993, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_arange); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 993, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      __pyx_t_15 = __Pyx_PyInt_From_int((-__pyx_v_decimate)); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 993, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      __pyx_t_3 = __Pyx_PyInt_From_long(((3 * __pyx_v_decimate) / 2)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 993, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_35 = NULL;
      __pyx_t_22 = 0;
      if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_35 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_35)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_35);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
          __pyx_t_22 = 1;
        }
      }
      __pyx_t_36 = PyTuple_New(2+__pyx_t_22); if (unlikely(!__pyx_t_36)) __PYX_ERR(0, 993, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_36);
      if (__pyx_t_35) {
        __Pyx_GIVEREF(__pyx_t_35); PyTuple_SET_ITEM(__pyx_t_36, 0, __pyx_t_35); __pyx_t_35 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_15);
      PyTuple_SET_ITEM(__pyx_t_36, 0+__pyx_t_22, __pyx_t_15);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_36, 1+__pyx_t_22, __pyx_t_3);
      __pyx_t_15 = 0;
      __pyx_t_3 = 0;
      __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_36, NULL); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 993, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_DECREF(__pyx_t_36); __pyx_t_36 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyNumber_Add(__pyx_t_5, __pyx_t_14); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 993, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_16, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 993, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __pyx_t_4 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_12))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_12);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_12, function);
      }
    }
    if (!__pyx_t_4) {
      __pyx_t_11 = __Pyx_PyObject_CallOneArg(__pyx_t_12, __pyx_t_16); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 993, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      __Pyx_GOTREF(__pyx_t_11);
    } else {
      __pyx_t_14 = PyTuple_New(1+1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 993, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_GIVEREF(__pyx_t_16);
      PyTuple_SET_ITEM(__pyx_t_14, 0+1, __pyx_t_16);
      __pyx_t_16 = 0;
      __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_t_14, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 993, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    }
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    if (!(likely(((__pyx_t_11) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_11, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 993, __pyx_L1_error)
    __pyx_t_37 = ((PyArrayObject *)__pyx_t_11);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_ff.rcbuffer->pybuffer);
      __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_ff.rcbuffer->pybuffer, (PyObject*)__pyx_t_37, &__Pyx_TypeInfo_long, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
      if (unlikely(__pyx_t_7 < 0)) {
        PyErr_Fetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_ff.rcbuffer->pybuffer, (PyObject*)__pyx_v_ff, &__Pyx_TypeInfo_long, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
        }
      }
      __pyx_pybuffernd_ff.diminfo[0].strides = __pyx_pybuffernd_ff.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_ff.diminfo[0].shape = __pyx_pybuffernd_ff.rcbuffer->pybuffer.shape[0];
      if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 993, __pyx_L1_error)
    }
    __pyx_t_37 = 0;
    __pyx_v_ff = ((PyArrayObject *)__pyx_t_11);
    __pyx_t_11 = 0;

    /* "oasis.pyx":995
 *         ff = np.ravel([P[i].t * decimate + np.arange(-decimate, 3 * decimate / 2)
 *                        for i in range(P.size())])  # this window size seems necessary and sufficient
 *         ff = np.unique(ff[(ff >= 0) * (ff < T)])             # <<<<<<<<<<<<<<
 *         ll = np.append(ff[1:] - ff[:-1], T - ff[-1])
 *         h = np.exp(log(g) * np.arange(T, dtype=np.float32))
 */
    __pyx_t_12 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 995, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_unique); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 995, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __pyx_t_12 = PyObject_RichCompare(((PyObject *)__pyx_v_ff), __pyx_int_0, Py_GE); __Pyx_XGOTREF(__pyx_t_12); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 995, __pyx_L1_error)
    __pyx_t_16 = __Pyx_PyInt_From_unsigned_int(__pyx_cur_scope->__pyx_v_T); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 995, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __pyx_t_4 = PyObject_RichCompare(((PyObject *)__pyx_v_ff), __pyx_t_16, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 995, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __pyx_t_16 = PyNumber_Multiply(__pyx_t_12, __pyx_t_4); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 995, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyObject_GetItem(((PyObject *)__pyx_v_ff), __pyx_t_16); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 995, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __pyx_t_16 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_14))) {
      __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_14);
      if (likely(__pyx_t_16)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
        __Pyx_INCREF(__pyx_t_16);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_14, function);
      }
    }
    if (!__pyx_t_16) {
      __pyx_t_11 = __Pyx_PyObject_CallOneArg(__pyx_t_14, __pyx_t_4); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 995, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_11);
    } else {
      __pyx_t_12 = PyTuple_New(1+1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 995, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_GIVEREF(__pyx_t_16); PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_16); __pyx_t_16 = NULL;
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_12, 0+1, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_14, __pyx_t_12, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 995, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    }
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    if (!(likely(((__pyx_t_11) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_11, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 995, __pyx_L1_error)
    __pyx_t_37 = ((PyArrayObject *)__pyx_t_11);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_ff.rcbuffer->pybuffer);
      __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_ff.rcbuffer->pybuffer, (PyObject*)__pyx_t_37, &__Pyx_TypeInfo_long, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
      if (unlikely(__pyx_t_7 < 0)) {
        PyErr_Fetch(&__pyx_t_10, &__pyx_t_9, &__pyx_t_8);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_ff.rcbuffer->pybuffer, (PyObject*)__pyx_v_ff, &__Pyx_TypeInfo_long, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_8);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_10, __pyx_t_9, __pyx_t_8);
        }
      }
      __pyx_pybuffernd_ff.diminfo[0].strides = __pyx_pybuffernd_ff.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_ff.diminfo[0].shape = __pyx_pybuffernd_ff.rcbuffer->pybuffer.shape[0];
      if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 995, __pyx_L1_error)
    }
    __pyx_t_37 = 0;
    __Pyx_DECREF_SET(__pyx_v_ff, ((PyArrayObject *)__pyx_t_11));
    __pyx_t_11 = 0;

    /* "oasis.pyx":996
 *                        for i in range(P.size())])  # this window size seems necessary and sufficient
 *         ff = np.unique(ff[(ff >= 0) * (ff < T)])
 *         ll = np.append(ff[1:] - ff[:-1], T - ff[-1])             # <<<<<<<<<<<<<<
 *         h = np.exp(log(g) * np.arange(T, dtype=np.float32))
 *         P.resize(0)
 */
    __pyx_t_14 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 996, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_append); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 996, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __pyx_t_14 = __Pyx_PyObject_GetSlice(((PyObject *)__pyx_v_ff), 1, 0, NULL, NULL, &__pyx_slice__21, 1, 0, 1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 996, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_4 = __Pyx_PyObject_GetSlice(((PyObject *)__pyx_v_ff), 0, -1L, NULL, NULL, &__pyx_slice__22, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 996, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_16 = PyNumber_Subtract(__pyx_t_14, __pyx_t_4); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 996, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_38 = -1L;
    __pyx_t_7 = -1;
    if (__pyx_t_38 < 0) {
      __pyx_t_38 += __pyx_pybuffernd_ff.diminfo[0].shape;
      if (unlikely(__pyx_t_38 < 0)) __pyx_t_7 = 0;
    } else if (unlikely(__pyx_t_38 >= __pyx_pybuffernd_ff.diminfo[0].shape)) __pyx_t_7 = 0;
    if (unlikely(__pyx_t_7 != -1)) {
      __Pyx_RaiseBufferIndexError(__pyx_t_7);
      __PYX_ERR(0, 996, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_PyInt_From_long((__pyx_cur_scope->__pyx_v_T - (*__Pyx_BufPtrStrided1d(long *, __pyx_pybuffernd_ff.rcbuffer->pybuffer.buf, __pyx_t_38, __pyx_pybuffernd_ff.diminfo[0].strides)))); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 996, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_14 = NULL;
    __pyx_t_1 = 0;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_12))) {
      __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_12);
      if (likely(__pyx_t_14)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
        __Pyx_INCREF(__pyx_t_14);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_12, function);
        __pyx_t_1 = 1;
      }
    }
    __pyx_t_5 = PyTuple_New(2+__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 996, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_14) {
      __Pyx_GIVEREF(__pyx_t_14); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_14); __pyx_t_14 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_16);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_1, __pyx_t_16);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_1, __pyx_t_4);
    __pyx_t_16 = 0;
    __pyx_t_4 = 0;
    __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_t_5, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 996, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    if (!(likely(((__pyx_t_11) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_11, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 996, __pyx_L1_error)
    __pyx_t_37 = ((PyArrayObject *)__pyx_t_11);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_ll.rcbuffer->pybuffer);
      __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_ll.rcbuffer->pybuffer, (PyObject*)__pyx_t_37, &__Pyx_TypeInfo_long, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
      if (unlikely(__pyx_t_7 < 0)) {
        PyErr_Fetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_ll.rcbuffer->pybuffer, (PyObject*)__pyx_v_ll, &__Pyx_TypeInfo_long, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
        }
      }
      __pyx_pybuffernd_ll.diminfo[0].strides = __pyx_pybuffernd_ll.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_ll.diminfo[0].shape = __pyx_pybuffernd_ll.rcbuffer->pybuffer.shape[0];
      if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 996, __pyx_L1_error)
    }
    __pyx_t_37 = 0;
    __pyx_v_ll = ((PyArrayObject *)__pyx_t_11);
    __pyx_t_11 = 0;

    /* "oasis.pyx":997
 *         ff = np.unique(ff[(ff >= 0) * (ff < T)])
 *         ll = np.append(ff[1:] - ff[:-1], T - ff[-1])
 *         h = np.exp(log(g) * np.arange(T, dtype=np.float32))             # <<<<<<<<<<<<<<
 *         P.resize(0)
 *         for i in range(len(ff)):
 */
    __pyx_t_12 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 997, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_exp); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 997, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __pyx_t_12 = PyFloat_FromDouble(log(__pyx_cur_scope->__pyx_v_g)); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 997, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 997, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_arange); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 997, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyInt_From_unsigned_int(__pyx_cur_scope->__pyx_v_T); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 997, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_14 = PyTuple_New(1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 997, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 997, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_36 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_36)) __PYX_ERR(0, 997, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_36);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_36, __pyx_n_s_float32); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 997, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_36); __pyx_t_36 = 0;
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_3) < 0) __PYX_ERR(0, 997, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_16, __pyx_t_14, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 997, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Multiply(__pyx_t_12, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 997, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_3) {
      __pyx_t_11 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 997, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_11);
    } else {
      __pyx_t_12 = PyTuple_New(1+1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 997, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_12, 0+1, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_12, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 997, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (!(likely(((__pyx_t_11) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_11, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 997, __pyx_L1_error)
    __pyx_t_6 = ((PyArrayObject *)__pyx_t_11);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_h.rcbuffer->pybuffer);
      __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_h.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
      if (unlikely(__pyx_t_7 < 0)) {
        PyErr_Fetch(&__pyx_t_10, &__pyx_t_9, &__pyx_t_8);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_h.rcbuffer->pybuffer, (PyObject*)__pyx_v_h, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_8);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_10, __pyx_t_9, __pyx_t_8);
        }
      }
      __pyx_pybuffernd_h.diminfo[0].strides = __pyx_pybuffernd_h.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_h.diminfo[0].shape = __pyx_pybuffernd_h.rcbuffer->pybuffer.shape[0];
      if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 997, __pyx_L1_error)
    }
    __pyx_t_6 = 0;
    __Pyx_DECREF_SET(__pyx_v_h, ((PyArrayObject *)__pyx_t_11));
    __pyx_t_11 = 0;

    /* "oasis.pyx":998
 *         ll = np.append(ff[1:] - ff[:-1], T - ff[-1])
 *         h = np.exp(log(g) * np.arange(T, dtype=np.float32))
 *         P.resize(0)             # <<<<<<<<<<<<<<
 *         for i in range(len(ff)):
 *             q = h[:ll[i]]
 */
    try {
      __pyx_cur_scope->__pyx_v_P.resize(0);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 998, __pyx_L1_error)
    }

    /* "oasis.pyx":999
 *         h = np.exp(log(g) * np.arange(T, dtype=np.float32))
 *         P.resize(0)
 *         for i in range(len(ff)):             # <<<<<<<<<<<<<<
 *             q = h[:ll[i]]
 *             newpool.v = q.dot(fluor[ff[i]:ff[i] + ll[i]]) - (b / (1 - g) + lam) * (1 - g**ll[i])
 */
    __pyx_t_1 = PyObject_Length(((PyObject *)__pyx_v_ff)); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(0, 999, __pyx_L1_error)
    for (__pyx_t_22 = 0; __pyx_t_22 < __pyx_t_1; __pyx_t_22+=1) {
      __pyx_v_i = __pyx_t_22;

      /* "oasis.pyx":1000
 *         P.resize(0)
 *         for i in range(len(ff)):
 *             q = h[:ll[i]]             # <<<<<<<<<<<<<<
 *             newpool.v = q.dot(fluor[ff[i]:ff[i] + ll[i]]) - (b / (1 - g) + lam) * (1 - g**ll[i])
 *             newpool.w = q.dot(q)
 */
      __pyx_t_39 = __pyx_v_i;
      __pyx_t_7 = -1;
      if (__pyx_t_39 < 0) {
        __pyx_t_39 += __pyx_pybuffernd_ll.diminfo[0].shape;
        if (unlikely(__pyx_t_39 < 0)) __pyx_t_7 = 0;
      } else if (unlikely(__pyx_t_39 >= __pyx_pybuffernd_ll.diminfo[0].shape)) __pyx_t_7 = 0;
      if (unlikely(__pyx_t_7 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_7);
        __PYX_ERR(0, 1000, __pyx_L1_error)
      }
      __pyx_t_11 = __Pyx_PyObject_GetSlice(((PyObject *)__pyx_v_h), 0, (*__Pyx_BufPtrStrided1d(long *, __pyx_pybuffernd_ll.rcbuffer->pybuffer.buf, __pyx_t_39, __pyx_pybuffernd_ll.diminfo[0].strides)), NULL, NULL, NULL, 0, 1, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1000, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_XDECREF_SET(__pyx_v_q, __pyx_t_11);
      __pyx_t_11 = 0;

      /* "oasis.pyx":1001
 *         for i in range(len(ff)):
 *             q = h[:ll[i]]
 *             newpool.v = q.dot(fluor[ff[i]:ff[i] + ll[i]]) - (b / (1 - g) + lam) * (1 - g**ll[i])             # <<<<<<<<<<<<<<
 *             newpool.w = q.dot(q)
 *             newpool.t = ff[i]
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_q, __pyx_n_s_dot); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1001, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_40 = __pyx_v_i;
      __pyx_t_7 = -1;
      if (__pyx_t_40 < 0) {
        __pyx_t_40 += __pyx_pybuffernd_ff.diminfo[0].shape;
        if (unlikely(__pyx_t_40 < 0)) __pyx_t_7 = 0;
      } else if (unlikely(__pyx_t_40 >= __pyx_pybuffernd_ff.diminfo[0].shape)) __pyx_t_7 = 0;
      if (unlikely(__pyx_t_7 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_7);
        __PYX_ERR(0, 1001, __pyx_L1_error)
      }
      __pyx_t_41 = __pyx_v_i;
      __pyx_t_7 = -1;
      if (__pyx_t_41 < 0) {
        __pyx_t_41 += __pyx_pybuffernd_ff.diminfo[0].shape;
        if (unlikely(__pyx_t_41 < 0)) __pyx_t_7 = 0;
      } else if (unlikely(__pyx_t_41 >= __pyx_pybuffernd_ff.diminfo[0].shape)) __pyx_t_7 = 0;
      if (unlikely(__pyx_t_7 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_7);
        __PYX_ERR(0, 1001, __pyx_L1_error)
      }
      __pyx_t_42 = __pyx_v_i;
      __pyx_t_7 = -1;
      if (__pyx_t_42 < 0) {
        __pyx_t_42 += __pyx_pybuffernd_ll.diminfo[0].shape;
        if (unlikely(__pyx_t_42 < 0)) __pyx_t_7 = 0;
      } else if (unlikely(__pyx_t_42 >= __pyx_pybuffernd_ll.diminfo[0].shape)) __pyx_t_7 = 0;
      if (unlikely(__pyx_t_7 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_7);
        __PYX_ERR(0, 1001, __pyx_L1_error)
      }
      __pyx_t_12 = __Pyx_PyObject_GetSlice(((PyObject *)__pyx_v_fluor), (*__Pyx_BufPtrStrided1d(long *, __pyx_pybuffernd_ff.rcbuffer->pybuffer.buf, __pyx_t_40, __pyx_pybuffernd_ff.diminfo[0].strides)), ((*__Pyx_BufPtrStrided1d(long *, __pyx_pybuffernd_ff.rcbuffer->pybuffer.buf, __pyx_t_41, __pyx_pybuffernd_ff.diminfo[0].strides)) + (*__Pyx_BufPtrStrided1d(long *, __pyx_pybuffernd_ll.rcbuffer->pybuffer.buf, __pyx_t_42, __pyx_pybuffernd_ll.diminfo[0].strides))), NULL, NULL, NULL, 1, 1, 1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1001, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      if (!__pyx_t_4) {
        __pyx_t_11 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_12); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1001, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_GOTREF(__pyx_t_11);
      } else {
        __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1001, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_GIVEREF(__pyx_t_12);
        PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_t_12);
        __pyx_t_12 = 0;
        __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_3, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1001, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_43 = __pyx_v_i;
      __pyx_t_7 = -1;
      if (__pyx_t_43 < 0) {
        __pyx_t_43 += __pyx_pybuffernd_ll.diminfo[0].shape;
        if (unlikely(__pyx_t_43 < 0)) __pyx_t_7 = 0;
      } else if (unlikely(__pyx_t_43 >= __pyx_pybuffernd_ll.diminfo[0].shape)) __pyx_t_7 = 0;
      if (unlikely(__pyx_t_7 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_7);
        __PYX_ERR(0, 1001, __pyx_L1_error)
      }
      __pyx_t_5 = PyFloat_FromDouble((((__pyx_cur_scope->__pyx_v_b / (1.0 - __pyx_cur_scope->__pyx_v_g)) + __pyx_cur_scope->__pyx_v_lam) * (1.0 - powf(__pyx_cur_scope->__pyx_v_g, ((__pyx_t_5oasis_SINGLE)(*__Pyx_BufPtrStrided1d(long *, __pyx_pybuffernd_ll.rcbuffer->pybuffer.buf, __pyx_t_43, __pyx_pybuffernd_ll.diminfo[0].strides))))))); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1001, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = PyNumber_Subtract(__pyx_t_11, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1001, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_34 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_34 == (npy_float32)-1) && PyErr_Occurred())) __PYX_ERR(0, 1001, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_v_newpool.v = __pyx_t_34;

      /* "oasis.pyx":1002
 *             q = h[:ll[i]]
 *             newpool.v = q.dot(fluor[ff[i]:ff[i] + ll[i]]) - (b / (1 - g) + lam) * (1 - g**ll[i])
 *             newpool.w = q.dot(q)             # <<<<<<<<<<<<<<
 *             newpool.t = ff[i]
 *             newpool.l = ll[i]
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_q, __pyx_n_s_dot); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1002, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_11 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_11)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      if (!__pyx_t_11) {
        __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_q); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1002, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
      } else {
        __pyx_t_12 = PyTuple_New(1+1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1002, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_GIVEREF(__pyx_t_11); PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_11); __pyx_t_11 = NULL;
        __Pyx_INCREF(__pyx_v_q);
        __Pyx_GIVEREF(__pyx_v_q);
        PyTuple_SET_ITEM(__pyx_t_12, 0+1, __pyx_v_q);
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_12, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1002, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_34 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_34 == (npy_float32)-1) && PyErr_Occurred())) __PYX_ERR(0, 1002, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_v_newpool.w = __pyx_t_34;

      /* "oasis.pyx":1003
 *             newpool.v = q.dot(fluor[ff[i]:ff[i] + ll[i]]) - (b / (1 - g) + lam) * (1 - g**ll[i])
 *             newpool.w = q.dot(q)
 *             newpool.t = ff[i]             # <<<<<<<<<<<<<<
 *             newpool.l = ll[i]
 *             P.push_back(newpool)
 */
      __pyx_t_44 = __pyx_v_i;
      __pyx_t_7 = -1;
      if (__pyx_t_44 < 0) {
        __pyx_t_44 += __pyx_pybuffernd_ff.diminfo[0].shape;
        if (unlikely(__pyx_t_44 < 0)) __pyx_t_7 = 0;
      } else if (unlikely(__pyx_t_44 >= __pyx_pybuffernd_ff.diminfo[0].shape)) __pyx_t_7 = 0;
      if (unlikely(__pyx_t_7 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_7);
        __PYX_ERR(0, 1003, __pyx_L1_error)
      }
      __pyx_v_newpool.t = (*__Pyx_BufPtrStrided1d(long *, __pyx_pybuffernd_ff.rcbuffer->pybuffer.buf, __pyx_t_44, __pyx_pybuffernd_ff.diminfo[0].strides));

      /* "oasis.pyx":1004
 *             newpool.w = q.dot(q)
 *             newpool.t = ff[i]
 *             newpool.l = ll[i]             # <<<<<<<<<<<<<<
 *             P.push_back(newpool)
 *         P[P.size() - 1].v -= lam * g**P[P.size() - 1].l  # |s|_1 instead |c|_1
 */
      __pyx_t_45 = __pyx_v_i;
      __pyx_t_7 = -1;
      if (__pyx_t_45 < 0) {
        __pyx_t_45 += __pyx_pybuffernd_ll.diminfo[0].shape;
        if (unlikely(__pyx_t_45 < 0)) __pyx_t_7 = 0;
      } else if (unlikely(__pyx_t_45 >= __pyx_pybuffernd_ll.diminfo[0].shape)) __pyx_t_7 = 0;
      if (unlikely(__pyx_t_7 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_7);
        __PYX_ERR(0, 1004, __pyx_L1_error)
      }
      __pyx_v_newpool.l = (*__Pyx_BufPtrStrided1d(long *, __pyx_pybuffernd_ll.rcbuffer->pybuffer.buf, __pyx_t_45, __pyx_pybuffernd_ll.diminfo[0].strides));

      /* "oasis.pyx":1005
 *             newpool.t = ff[i]
 *             newpool.l = ll[i]
 *             P.push_back(newpool)             # <<<<<<<<<<<<<<
 *         P[P.size() - 1].v -= lam * g**P[P.size() - 1].l  # |s|_1 instead |c|_1
 *         c = np.empty(T, dtype=np.float32)
 */
      try {
        __pyx_cur_scope->__pyx_v_P.push_back(__pyx_v_newpool);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 1005, __pyx_L1_error)
      }
    }

    /* "oasis.pyx":1006
 *             newpool.l = ll[i]
 *             P.push_back(newpool)
 *         P[P.size() - 1].v -= lam * g**P[P.size() - 1].l  # |s|_1 instead |c|_1             # <<<<<<<<<<<<<<
 *         c = np.empty(T, dtype=np.float32)
 * 
 */
    __pyx_t_21 = (__pyx_cur_scope->__pyx_v_P.size() - 1);
    (__pyx_cur_scope->__pyx_v_P[__pyx_t_21]).v = ((__pyx_cur_scope->__pyx_v_P[__pyx_t_21]).v - (__pyx_cur_scope->__pyx_v_lam * powf(__pyx_cur_scope->__pyx_v_g, ((__pyx_t_5oasis_SINGLE)(__pyx_cur_scope->__pyx_v_P[(__pyx_cur_scope->__pyx_v_P.size() - 1)]).l))));

    /* "oasis.pyx":1007
 *             P.push_back(newpool)
 *         P[P.size() - 1].v -= lam * g**P[P.size() - 1].l  # |s|_1 instead |c|_1
 *         c = np.empty(T, dtype=np.float32)             # <<<<<<<<<<<<<<
 * 
 *         c, P = oasis(P, g, c)
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1007, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_empty); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1007, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyInt_From_unsigned_int(__pyx_cur_scope->__pyx_v_T); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1007, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_12 = PyTuple_New(1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1007, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1007, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_11 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1007, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_float32); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1007, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_4) < 0) __PYX_ERR(0, 1007, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_12, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1007, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1007, __pyx_L1_error)
    __pyx_t_6 = ((PyArrayObject *)__pyx_t_4);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_c.rcbuffer->pybuffer);
      __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
      if (unlikely(__pyx_t_7 < 0)) {
        PyErr_Fetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_v_c, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
        }
      }
      __pyx_pybuffernd_c.diminfo[0].strides = __pyx_pybuffernd_c.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_c.diminfo[0].shape = __pyx_pybuffernd_c.rcbuffer->pybuffer.shape[0];
      if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1007, __pyx_L1_error)
    }
    __pyx_t_6 = 0;
    __Pyx_DECREF_SET(__pyx_v_c, ((PyArrayObject *)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "oasis.pyx":1009
 *         c = np.empty(T, dtype=np.float32)
 * 
 *         c, P = oasis(P, g, c)             # <<<<<<<<<<<<<<
 * 
 *     if penalty == 0:  # get (locally optimal) L0 solution
 */
    __pyx_t_4 = __pyx_pf_5oasis_20constrained_oasisAR1_2oasis(__pyx_v_oasis, __pyx_cur_scope->__pyx_v_P, __pyx_cur_scope->__pyx_v_g, ((PyArrayObject *)__pyx_v_c)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1009, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
      PyObject* sequence = __pyx_t_4;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 1009, __pyx_L1_error)
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_12 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_12 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_12);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1009, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_12 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1009, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      #endif
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_5 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1009, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_18 = Py_TYPE(__pyx_t_5)->tp_iternext;
      index = 0; __pyx_t_3 = __pyx_t_18(__pyx_t_5); if (unlikely(!__pyx_t_3)) goto __pyx_L86_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_3);
      index = 1; __pyx_t_12 = __pyx_t_18(__pyx_t_5); if (unlikely(!__pyx_t_12)) goto __pyx_L86_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_12);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_18(__pyx_t_5), 2) < 0) __PYX_ERR(0, 1009, __pyx_L1_error)
      __pyx_t_18 = NULL;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L87_unpacking_done;
      __pyx_L86_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_18 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 1009, __pyx_L1_error)
      __pyx_L87_unpacking_done:;
    }
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1009, __pyx_L1_error)
    __pyx_t_19 = __pyx_convert_vector_from_py_struct____pyx_t_5oasis_Pool(__pyx_t_12); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1009, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __pyx_t_6 = ((PyArrayObject *)__pyx_t_3);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_c.rcbuffer->pybuffer);
      __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
      if (unlikely(__pyx_t_7 < 0)) {
        PyErr_Fetch(&__pyx_t_10, &__pyx_t_9, &__pyx_t_8);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_v_c, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_8);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_10, __pyx_t_9, __pyx_t_8);
        }
      }
      __pyx_pybuffernd_c.diminfo[0].strides = __pyx_pybuffernd_c.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_c.diminfo[0].shape = __pyx_pybuffernd_c.rcbuffer->pybuffer.shape[0];
      if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1009, __pyx_L1_error)
    }
    __pyx_t_6 = 0;
    __Pyx_DECREF_SET(__pyx_v_c, ((PyArrayObject *)__pyx_t_3));
    __pyx_t_3 = 0;
    __pyx_cur_scope->__pyx_v_P = __pyx_t_19;

    /* "oasis.pyx":985
 *             RSS = res.dot(res)
 * 
 *     if decimate > 1:  # deal with full data             # <<<<<<<<<<<<<<
 *         y = fluor
 *         lam *= (1 - g)
 */
  }

  /* "oasis.pyx":1011
 *         c, P = oasis(P, g, c)
 * 
 *     if penalty == 0:  # get (locally optimal) L0 solution             # <<<<<<<<<<<<<<
 *         lls = [(P[i + 1].v / P[i + 1].w - P[i].v / P[i].w * g**P[i].l)
 *                for i in range(P.size() - 1)]
 */
  __pyx_t_17 = ((__pyx_v_penalty == 0) != 0);
  if (__pyx_t_17) {

    /* "oasis.pyx":1012
 * 
 *     if penalty == 0:  # get (locally optimal) L0 solution
 *         lls = [(P[i + 1].v / P[i + 1].w - P[i].v / P[i].w * g**P[i].l)             # <<<<<<<<<<<<<<
 *                for i in range(P.size() - 1)]
 *         pos = [P[i + 1].t for i in np.argsort(lls)[::-1]]
 */
    __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1012, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);

    /* "oasis.pyx":1013
 *     if penalty == 0:  # get (locally optimal) L0 solution
 *         lls = [(P[i + 1].v / P[i + 1].w - P[i].v / P[i].w * g**P[i].l)
 *                for i in range(P.size() - 1)]             # <<<<<<<<<<<<<<
 *         pos = [P[i + 1].t for i in np.argsort(lls)[::-1]]
 *         y = y - b
 */
    __pyx_t_21 = (__pyx_cur_scope->__pyx_v_P.size() - 1);
    for (__pyx_t_1 = 0; __pyx_t_1 < __pyx_t_21; __pyx_t_1+=1) {
      __pyx_v_i = __pyx_t_1;

      /* "oasis.pyx":1012
 * 
 *     if penalty == 0:  # get (locally optimal) L0 solution
 *         lls = [(P[i + 1].v / P[i + 1].w - P[i].v / P[i].w * g**P[i].l)             # <<<<<<<<<<<<<<
 *                for i in range(P.size() - 1)]
 *         pos = [P[i + 1].t for i in np.argsort(lls)[::-1]]
 */
      __pyx_t_12 = PyFloat_FromDouble((((__pyx_cur_scope->__pyx_v_P[(__pyx_v_i + 1)]).v / (__pyx_cur_scope->__pyx_v_P[(__pyx_v_i + 1)]).w) - (((__pyx_cur_scope->__pyx_v_P[__pyx_v_i]).v / (__pyx_cur_scope->__pyx_v_P[__pyx_v_i]).w) * powf(__pyx_cur_scope->__pyx_v_g, ((__pyx_t_5oasis_SINGLE)(__pyx_cur_scope->__pyx_v_P[__pyx_v_i]).l))))); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1012, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_4, (PyObject*)__pyx_t_12))) __PYX_ERR(0, 1012, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    }
    __pyx_v_lls = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "oasis.pyx":1014
 *         lls = [(P[i + 1].v / P[i + 1].w - P[i].v / P[i].w * g**P[i].l)
 *                for i in range(P.size() - 1)]
 *         pos = [P[i + 1].t for i in np.argsort(lls)[::-1]]             # <<<<<<<<<<<<<<
 *         y = y - b
 *         res = -y
 */
    __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1014, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1014, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_argsort); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1014, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (!__pyx_t_3) {
      __pyx_t_12 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_lls); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1014, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
    } else {
      __pyx_t_11 = PyTuple_New(1+1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1014, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_3); __pyx_t_3 = NULL;
      __Pyx_INCREF(__pyx_v_lls);
      __Pyx_GIVEREF(__pyx_v_lls);
      PyTuple_SET_ITEM(__pyx_t_11, 0+1, __pyx_v_lls);
      __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_11, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1014, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyObject_GetItem(__pyx_t_12, __pyx_slice__23); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1014, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
      __pyx_t_12 = __pyx_t_5; __Pyx_INCREF(__pyx_t_12); __pyx_t_1 = 0;
      __pyx_t_28 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_12 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1014, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_28 = Py_TYPE(__pyx_t_12)->tp_iternext; if (unlikely(!__pyx_t_28)) __PYX_ERR(0, 1014, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    for (;;) {
      if (likely(!__pyx_t_28)) {
        if (likely(PyList_CheckExact(__pyx_t_12))) {
          if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_12)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_5 = PyList_GET_ITEM(__pyx_t_12, __pyx_t_1); __Pyx_INCREF(__pyx_t_5); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 1014, __pyx_L1_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_12, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1014, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        } else {
          if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_12)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_12, __pyx_t_1); __Pyx_INCREF(__pyx_t_5); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 1014, __pyx_L1_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_12, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1014, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        }
      } else {
        __pyx_t_5 = __pyx_t_28(__pyx_t_12);
        if (unlikely(!__pyx_t_5)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1014, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_5);
      }
      __pyx_t_22 = __Pyx_PyIndex_AsSsize_t(__pyx_t_5); if (unlikely((__pyx_t_22 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1014, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_v_i = __pyx_t_22;
      __pyx_t_5 = PyInt_FromSsize_t((__pyx_cur_scope->__pyx_v_P[(__pyx_v_i + 1)]).t); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1014, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_4, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 1014, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __pyx_v_pos = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "oasis.pyx":1015
 *                for i in range(P.size() - 1)]
 *         pos = [P[i + 1].t for i in np.argsort(lls)[::-1]]
 *         y = y - b             # <<<<<<<<<<<<<<
 *         res = -y
 *         RSS = y.dot(y)
 */
    __pyx_t_4 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_b); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1015, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_12 = PyNumber_Subtract(((PyObject *)__pyx_v_y), __pyx_t_4); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1015, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (!(likely(((__pyx_t_12) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_12, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1015, __pyx_L1_error)
    __pyx_t_13 = ((PyArrayObject *)__pyx_t_12);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_y.rcbuffer->pybuffer);
      __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_y.rcbuffer->pybuffer, (PyObject*)__pyx_t_13, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
      if (unlikely(__pyx_t_7 < 0)) {
        PyErr_Fetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_y.rcbuffer->pybuffer, (PyObject*)__pyx_v_y, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
        }
      }
      __pyx_pybuffernd_y.diminfo[0].strides = __pyx_pybuffernd_y.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_y.diminfo[0].shape = __pyx_pybuffernd_y.rcbuffer->pybuffer.shape[0];
      if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1015, __pyx_L1_error)
    }
    __pyx_t_13 = 0;
    __Pyx_DECREF_SET(__pyx_v_y, ((PyArrayObject *)__pyx_t_12));
    __pyx_t_12 = 0;

    /* "oasis.pyx":1016
 *         pos = [P[i + 1].t for i in np.argsort(lls)[::-1]]
 *         y = y - b
 *         res = -y             # <<<<<<<<<<<<<<
 *         RSS = y.dot(y)
 *         c = np.zeros_like(y)
 */
    __pyx_t_12 = PyNumber_Negative(((PyObject *)__pyx_v_y)); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1016, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    if (!(likely(((__pyx_t_12) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_12, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1016, __pyx_L1_error)
    __pyx_t_6 = ((PyArrayObject *)__pyx_t_12);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_res.rcbuffer->pybuffer);
      __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_res.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
      if (unlikely(__pyx_t_7 < 0)) {
        PyErr_Fetch(&__pyx_t_10, &__pyx_t_9, &__pyx_t_8);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_res.rcbuffer->pybuffer, (PyObject*)__pyx_v_res, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_8);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_10, __pyx_t_9, __pyx_t_8);
        }
      }
      __pyx_pybuffernd_res.diminfo[0].strides = __pyx_pybuffernd_res.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_res.diminfo[0].shape = __pyx_pybuffernd_res.rcbuffer->pybuffer.shape[0];
      if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1016, __pyx_L1_error)
    }
    __pyx_t_6 = 0;
    __Pyx_DECREF_SET(__pyx_v_res, ((PyArrayObject *)__pyx_t_12));
    __pyx_t_12 = 0;

    /* "oasis.pyx":1017
 *         y = y - b
 *         res = -y
 *         RSS = y.dot(y)             # <<<<<<<<<<<<<<
 *         c = np.zeros_like(y)
 *         P.resize(0)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_y), __pyx_n_s_dot); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1017, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_12 = __Pyx_PyObject_CallOneArg(__pyx_t_4, ((PyObject *)__pyx_v_y)); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1017, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
    } else {
      __pyx_t_11 = PyTuple_New(1+1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1017, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_INCREF(((PyObject *)__pyx_v_y));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_y));
      PyTuple_SET_ITEM(__pyx_t_11, 0+1, ((PyObject *)__pyx_v_y));
      __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_11, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1017, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_34 = __pyx_PyFloat_AsFloat(__pyx_t_12); if (unlikely((__pyx_t_34 == (npy_float32)-1) && PyErr_Occurred())) __PYX_ERR(0, 1017, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __pyx_v_RSS = __pyx_t_34;

    /* "oasis.pyx":1018
 *         res = -y
 *         RSS = y.dot(y)
 *         c = np.zeros_like(y)             # <<<<<<<<<<<<<<
 *         P.resize(0)
 *         newpool.v, newpool.w, newpool.t, newpool.l = 0, 1, 0, len(y)
 */
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1018, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_zeros_like); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1018, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_11))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_11);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_11, function);
      }
    }
    if (!__pyx_t_4) {
      __pyx_t_12 = __Pyx_PyObject_CallOneArg(__pyx_t_11, ((PyObject *)__pyx_v_y)); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1018, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
    } else {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1018, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_INCREF(((PyObject *)__pyx_v_y));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_y));
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, ((PyObject *)__pyx_v_y));
      __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_5, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1018, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    if (!(likely(((__pyx_t_12) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_12, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1018, __pyx_L1_error)
    __pyx_t_6 = ((PyArrayObject *)__pyx_t_12);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_c.rcbuffer->pybuffer);
      __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);
      if (unlikely(__pyx_t_7 < 0)) {
        PyErr_Fetch(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_c.rcbuffer->pybuffer, (PyObject*)__pyx_v_c, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_8); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_8, __pyx_t_9, __pyx_t_10);
        }
      }
      __pyx_pybuffernd_c.diminfo[0].strides = __pyx_pybuffernd_c.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_c.diminfo[0].shape = __pyx_pybuffernd_c.rcbuffer->pybuffer.shape[0];
      if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1018, __pyx_L1_error)
    }
    __pyx_t_6 = 0;
    __Pyx_DECREF_SET(__pyx_v_c, ((PyArrayObject *)__pyx_t_12));
    __pyx_t_12 = 0;

    /* "oasis.pyx":1019
 *         RSS = y.dot(y)
 *         c = np.zeros_like(y)
 *         P.resize(0)             # <<<<<<<<<<<<<<
 *         newpool.v, newpool.w, newpool.t, newpool.l = 0, 1, 0, len(y)
 *         P.push_back(newpool)
 */
    try {
      __pyx_cur_scope->__pyx_v_P.resize(0);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 1019, __pyx_L1_error)
    }

    /* "oasis.pyx":1020
 *         c = np.zeros_like(y)
 *         P.resize(0)
 *         newpool.v, newpool.w, newpool.t, newpool.l = 0, 1, 0, len(y)             # <<<<<<<<<<<<<<
 *         P.push_back(newpool)
 *         for p in pos:
 */
    __pyx_t_34 = 0.0;
    __pyx_t_20 = 1.0;
    __pyx_t_1 = 0;
    __pyx_t_22 = PyObject_Length(((PyObject *)__pyx_v_y)); if (unlikely(__pyx_t_22 == -1)) __PYX_ERR(0, 1020, __pyx_L1_error)
    __pyx_v_newpool.v = __pyx_t_34;
    __pyx_v_newpool.w = __pyx_t_20;
    __pyx_v_newpool.t = __pyx_t_1;
    __pyx_v_newpool.l = __pyx_t_22;

    /* "oasis.pyx":1021
 *         P.resize(0)
 *         newpool.v, newpool.w, newpool.t, newpool.l = 0, 1, 0, len(y)
 *         P.push_back(newpool)             # <<<<<<<<<<<<<<
 *         for p in pos:
 *             i = 0
 */
    try {
      __pyx_cur_scope->__pyx_v_P.push_back(__pyx_v_newpool);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 1021, __pyx_L1_error)
    }

    /* "oasis.pyx":1022
 *         newpool.v, newpool.w, newpool.t, newpool.l = 0, 1, 0, len(y)
 *         P.push_back(newpool)
 *         for p in pos:             # <<<<<<<<<<<<<<
 *             i = 0
 *             while P[i].t + P[i].l <= p:
 */
    __pyx_t_12 = __pyx_v_pos; __Pyx_INCREF(__pyx_t_12); __pyx_t_22 = 0;
    for (;;) {
      if (__pyx_t_22 >= PyList_GET_SIZE(__pyx_t_12)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_11 = PyList_GET_ITEM(__pyx_t_12, __pyx_t_22); __Pyx_INCREF(__pyx_t_11); __pyx_t_22++; if (unlikely(0 < 0)) __PYX_ERR(0, 1022, __pyx_L1_error)
      #else
      __pyx_t_11 = PySequence_ITEM(__pyx_t_12, __pyx_t_22); __pyx_t_22++; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1022, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      #endif
      __Pyx_XDECREF_SET(__pyx_v_p, __pyx_t_11);
      __pyx_t_11 = 0;

      /* "oasis.pyx":1023
 *         P.push_back(newpool)
 *         for p in pos:
 *             i = 0             # <<<<<<<<<<<<<<
 *             while P[i].t + P[i].l <= p:
 *                 i += 1
 */
      __pyx_v_i = 0;

      /* "oasis.pyx":1024
 *         for p in pos:
 *             i = 0
 *             while P[i].t + P[i].l <= p:             # <<<<<<<<<<<<<<
 *                 i += 1
 *             # split current pool at pos
 */
      while (1) {
        __pyx_t_11 = PyInt_FromSsize_t(((__pyx_cur_scope->__pyx_v_P[__pyx_v_i]).t + (__pyx_cur_scope->__pyx_v_P[__pyx_v_i]).l)); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1024, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_5 = PyObject_RichCompare(__pyx_t_11, __pyx_v_p, Py_LE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1024, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_17 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_17 < 0)) __PYX_ERR(0, 1024, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (!__pyx_t_17) break;

        /* "oasis.pyx":1025
 *             i = 0
 *             while P[i].t + P[i].l <= p:
 *                 i += 1             # <<<<<<<<<<<<<<
 *             # split current pool at pos
 *             j, k = P[i].t, P[i].l
 */
        __pyx_v_i = (__pyx_v_i + 1);
      }

      /* "oasis.pyx":1027
 *                 i += 1
 *             # split current pool at pos
 *             j, k = P[i].t, P[i].l             # <<<<<<<<<<<<<<
 *             q = h[:j - p + k]
 *             newpool.v = q.dot(y[p:j + k])
 */
      __pyx_t_1 = (__pyx_cur_scope->__pyx_v_P[__pyx_v_i]).t;
      __pyx_t_23 = (__pyx_cur_scope->__pyx_v_P[__pyx_v_i]).l;
      __pyx_v_j = __pyx_t_1;
      __pyx_v_k = __pyx_t_23;

      /* "oasis.pyx":1028
 *             # split current pool at pos
 *             j, k = P[i].t, P[i].l
 *             q = h[:j - p + k]             # <<<<<<<<<<<<<<
 *             newpool.v = q.dot(y[p:j + k])
 *             newpool.w, newpool.t, newpool.l = q.dot(q), p, j - p + k
 */
      __pyx_t_5 = PyInt_FromSsize_t(__pyx_v_j); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1028, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_11 = PyNumber_Subtract(__pyx_t_5, __pyx_v_p); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1028, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = PyInt_FromSsize_t(__pyx_v_k); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1028, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = PyNumber_Add(__pyx_t_11, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1028, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyObject_GetSlice(((PyObject *)__pyx_v_h), 0, 0, NULL, &__pyx_t_4, NULL, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1028, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF_SET(__pyx_v_q, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "oasis.pyx":1029
 *             j, k = P[i].t, P[i].l
 *             q = h[:j - p + k]
 *             newpool.v = q.dot(y[p:j + k])             # <<<<<<<<<<<<<<
 *             newpool.w, newpool.t, newpool.l = q.dot(q), p, j - p + k
 *             P.insert(P.begin() + i + 1, newpool)
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_q, __pyx_n_s_dot); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1029, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_11 = __Pyx_PyObject_GetSlice(((PyObject *)__pyx_v_y), 0, (__pyx_v_j + __pyx_v_k), &__pyx_v_p, NULL, NULL, 0, 1, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1029, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_3 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      if (!__pyx_t_3) {
        __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_11); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1029, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_GOTREF(__pyx_t_5);
      } else {
        __pyx_t_14 = PyTuple_New(1+1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1029, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_3); __pyx_t_3 = NULL;
        __Pyx_GIVEREF(__pyx_t_11);
        PyTuple_SET_ITEM(__pyx_t_14, 0+1, __pyx_t_11);
        __pyx_t_11 = 0;
        __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_14, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1029, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_20 = __pyx_PyFloat_AsFloat(__pyx_t_5); if (unlikely((__pyx_t_20 == (npy_float32)-1) && PyErr_Occurred())) __PYX_ERR(0, 1029, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_v_newpool.v = __pyx_t_20;

      /* "oasis.pyx":1030
 *             q = h[:j - p + k]
 *             newpool.v = q.dot(y[p:j + k])
 *             newpool.w, newpool.t, newpool.l = q.dot(q), p, j - p + k             # <<<<<<<<<<<<<<
 *             P.insert(P.begin() + i + 1, newpool)
 *             q = h[:p - j]
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_q, __pyx_n_s_dot); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1030, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_14 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_14)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_14);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      if (!__pyx_t_14) {
        __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_q); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1030, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
      } else {
        __pyx_t_11 = PyTuple_New(1+1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1030, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_GIVEREF(__pyx_t_14); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_14); __pyx_t_14 = NULL;
        __Pyx_INCREF(__pyx_v_q);
        __Pyx_GIVEREF(__pyx_v_q);
        PyTuple_SET_ITEM(__pyx_t_11, 0+1, __pyx_v_q);
        __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_11, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1030, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_20 = __pyx_PyFloat_AsFloat(__pyx_t_5); if (unlikely((__pyx_t_20 == (npy_float32)-1) && PyErr_Occurred())) __PYX_ERR(0, 1030, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_23 = __Pyx_PyIndex_AsSsize_t(__pyx_v_p); if (unlikely((__pyx_t_23 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1030, __pyx_L1_error)
      __pyx_t_5 = PyInt_FromSsize_t(__pyx_v_j); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1030, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = PyNumber_Subtract(__pyx_t_5, __pyx_v_p); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1030, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = PyInt_FromSsize_t(__pyx_v_k); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1030, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_11 = PyNumber_Add(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1030, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_1 = __Pyx_PyIndex_AsSsize_t(__pyx_t_11); if (unlikely((__pyx_t_1 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1030, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_v_newpool.w = __pyx_t_20;
      __pyx_v_newpool.t = __pyx_t_23;
      __pyx_v_newpool.l = __pyx_t_1;

      /* "oasis.pyx":1031
 *             newpool.v = q.dot(y[p:j + k])
 *             newpool.w, newpool.t, newpool.l = q.dot(q), p, j - p + k
 *             P.insert(P.begin() + i + 1, newpool)             # <<<<<<<<<<<<<<
 *             q = h[:p - j]
 *             P[i].v, P[i].w, P[i].t, P[i].l = q.dot(y[j:p]), q.dot(q), j, p - j
 */
      try {
        __pyx_cur_scope->__pyx_v_P.insert(((__pyx_cur_scope->__pyx_v_P.begin() + __pyx_v_i) + 1), __pyx_v_newpool);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 1031, __pyx_L1_error)
      }

      /* "oasis.pyx":1032
 *             newpool.w, newpool.t, newpool.l = q.dot(q), p, j - p + k
 *             P.insert(P.begin() + i + 1, newpool)
 *             q = h[:p - j]             # <<<<<<<<<<<<<<
 *             P[i].v, P[i].w, P[i].t, P[i].l = q.dot(y[j:p]), q.dot(q), j, p - j
 *             for t in [i, i + 1]:
 */
      __pyx_t_11 = PyInt_FromSsize_t(__pyx_v_j); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1032, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_5 = PyNumber_Subtract(__pyx_v_p, __pyx_t_11); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1032, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_11 = __Pyx_PyObject_GetSlice(((PyObject *)__pyx_v_h), 0, 0, NULL, &__pyx_t_5, NULL, 0, 0, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1032, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF_SET(__pyx_v_q, __pyx_t_11);
      __pyx_t_11 = 0;

      /* "oasis.pyx":1033
 *             P.insert(P.begin() + i + 1, newpool)
 *             q = h[:p - j]
 *             P[i].v, P[i].w, P[i].t, P[i].l = q.dot(y[j:p]), q.dot(q), j, p - j             # <<<<<<<<<<<<<<
 *             for t in [i, i + 1]:
 *                 c[P[t].t:P[t].t + P[t].l] = fmax(0, P[t].v) / P[t].w * h[:P[t].l]
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_q, __pyx_n_s_dot); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1033, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = __Pyx_PyObject_GetSlice(((PyObject *)__pyx_v_y), __pyx_v_j, 0, NULL, &__pyx_v_p, NULL, 1, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1033, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_14 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_14)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_14);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      if (!__pyx_t_14) {
        __pyx_t_11 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1033, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_11);
      } else {
        __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1033, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_14); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_14); __pyx_t_14 = NULL;
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_t_4);
        __pyx_t_4 = 0;
        __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_3, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1033, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_20 = __pyx_PyFloat_AsFloat(__pyx_t_11); if (unlikely((__pyx_t_20 == (npy_float32)-1) && PyErr_Occurred())) __PYX_ERR(0, 1033, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_q, __pyx_n_s_dot); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1033, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      if (!__pyx_t_3) {
        __pyx_t_11 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_q); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1033, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
      } else {
        __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1033, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
        __Pyx_INCREF(__pyx_v_q);
        __Pyx_GIVEREF(__pyx_v_q);
        PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_q);
        __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_4, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1033, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_34 = __pyx_PyFloat_AsFloat(__pyx_t_11); if (unlikely((__pyx_t_34 == (npy_float32)-1) && PyErr_Occurred())) __PYX_ERR(0, 1033, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_1 = __pyx_v_j;
      __pyx_t_11 = PyInt_FromSsize_t(__pyx_v_j); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1033, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_5 = PyNumber_Subtract(__pyx_v_p, __pyx_t_11); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1033, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_23 = __Pyx_PyIndex_AsSsize_t(__pyx_t_5); if (unlikely((__pyx_t_23 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1033, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      (__pyx_cur_scope->__pyx_v_P[__pyx_v_i]).v = __pyx_t_20;
      (__pyx_cur_scope->__pyx_v_P[__pyx_v_i]).w = __pyx_t_34;
      (__pyx_cur_scope->__pyx_v_P[__pyx_v_i]).t = __pyx_t_1;
      (__pyx_cur_scope->__pyx_v_P[__pyx_v_i]).l = __pyx_t_23;

      /* "oasis.pyx":1034
 *             q = h[:p - j]
 *             P[i].v, P[i].w, P[i].t, P[i].l = q.dot(y[j:p]), q.dot(q), j, p - j
 *             for t in [i, i + 1]:             # <<<<<<<<<<<<<<
 *                 c[P[t].t:P[t].t + P[t].l] = fmax(0, P[t].v) / P[t].w * h[:P[t].l]
 *             # calc RSS
 */
      __pyx_t_5 = PyInt_FromSsize_t(__pyx_v_i); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1034, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_11 = PyInt_FromSsize_t((__pyx_v_i + 1)); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1034, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1034, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_11);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_11);
      __pyx_t_5 = 0;
      __pyx_t_11 = 0;
      __pyx_t_11 = __pyx_t_4; __Pyx_INCREF(__pyx_t_11); __pyx_t_23 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      for (;;) {
        if (__pyx_t_23 >= 2) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_11, __pyx_t_23); __Pyx_INCREF(__pyx_t_4); __pyx_t_23++; if (unlikely(0 < 0)) __PYX_ERR(0, 1034, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_11, __pyx_t_23); __pyx_t_23++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1034, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
        __pyx_t_1 = __Pyx_PyIndex_AsSsize_t(__pyx_t_4); if (unlikely((__pyx_t_1 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1034, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_v_t = __pyx_t_1;

        /* "oasis.pyx":1035
 *             P[i].v, P[i].w, P[i].t, P[i].l = q.dot(y[j:p]), q.dot(q), j, p - j
 *             for t in [i, i + 1]:
 *                 c[P[t].t:P[t].t + P[t].l] = fmax(0, P[t].v) / P[t].w * h[:P[t].l]             # <<<<<<<<<<<<<<
 *             # calc RSS
 *             RSS -= res[j:j + k].dot(res[j:j + k])
 */
        __pyx_t_4 = PyFloat_FromDouble((fmax(0.0, (__pyx_cur_scope->__pyx_v_P[__pyx_v_t]).v) / (__pyx_cur_scope->__pyx_v_P[__pyx_v_t]).w)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1035, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = __Pyx_PyObject_GetSlice(((PyObject *)__pyx_v_h), 0, (__pyx_cur_scope->__pyx_v_P[__pyx_v_t]).l, NULL, NULL, NULL, 0, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1035, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_3 = PyNumber_Multiply(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1035, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (__Pyx_PyObject_SetSlice(((PyObject *)__pyx_v_c), __pyx_t_3, (__pyx_cur_scope->__pyx_v_P[__pyx_v_t]).t, ((__pyx_cur_scope->__pyx_v_P[__pyx_v_t]).t + (__pyx_cur_scope->__pyx_v_P[__pyx_v_t]).l), NULL, NULL, NULL, 1, 1, 1) < 0) __PYX_ERR(0, 1035, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "oasis.pyx":1034
 *             q = h[:p - j]
 *             P[i].v, P[i].w, P[i].t, P[i].l = q.dot(y[j:p]), q.dot(q), j, p - j
 *             for t in [i, i + 1]:             # <<<<<<<<<<<<<<
 *                 c[P[t].t:P[t].t + P[t].l] = fmax(0, P[t].v) / P[t].w * h[:P[t].l]
 *             # calc RSS
 */
      }
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

      /* "oasis.pyx":1037
 *                 c[P[t].t:P[t].t + P[t].l] = fmax(0, P[t].v) / P[t].w * h[:P[t].l]
 *             # calc RSS
 *             RSS -= res[j:j + k].dot(res[j:j + k])             # <<<<<<<<<<<<<<
 *             res[P[i].t:j + k] = c[P[i].t:j + k] - y[P[i].t:j + k]
 *             RSS += res[P[i].t:j + k].dot(res[P[i].t:j + k])
 */
      __pyx_t_11 = PyFloat_FromDouble(__pyx_v_RSS); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1037, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_5 = __Pyx_PyObject_GetSlice(((PyObject *)__pyx_v_res), __pyx_v_j, (__pyx_v_j + __pyx_v_k), NULL, NULL, NULL, 1, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1037, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_dot); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1037, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyObject_GetSlice(((PyObject *)__pyx_v_res), __pyx_v_j, (__pyx_v_j + __pyx_v_k), NULL, NULL, NULL, 1, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1037, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_14 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_14)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_14);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      if (!__pyx_t_14) {
        __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1037, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_GOTREF(__pyx_t_3);
      } else {
        __pyx_t_16 = PyTuple_New(1+1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1037, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
        __Pyx_GIVEREF(__pyx_t_14); PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_14); __pyx_t_14 = NULL;
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_16, 0+1, __pyx_t_5);
        __pyx_t_5 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_16, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1037, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyNumber_InPlaceSubtract(__pyx_t_11, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1037, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_34 = __pyx_PyFloat_AsFloat(__pyx_t_4); if (unlikely((__pyx_t_34 == (npy_float32)-1) && PyErr_Occurred())) __PYX_ERR(0, 1037, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_v_RSS = __pyx_t_34;

      /* "oasis.pyx":1038
 *             # calc RSS
 *             RSS -= res[j:j + k].dot(res[j:j + k])
 *             res[P[i].t:j + k] = c[P[i].t:j + k] - y[P[i].t:j + k]             # <<<<<<<<<<<<<<
 *             RSS += res[P[i].t:j + k].dot(res[P[i].t:j + k])
 *             if RSS < thresh:
 */
      __pyx_t_4 = __Pyx_PyObject_GetSlice(((PyObject *)__pyx_v_c), (__pyx_cur_scope->__pyx_v_P[__pyx_v_i]).t, (__pyx_v_j + __pyx_v_k), NULL, NULL, NULL, 1, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1038, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = __Pyx_PyObject_GetSlice(((PyObject *)__pyx_v_y), (__pyx_cur_scope->__pyx_v_P[__pyx_v_i]).t, (__pyx_v_j + __pyx_v_k), NULL, NULL, NULL, 1, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1038, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_11 = PyNumber_Subtract(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1038, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__Pyx_PyObject_SetSlice(((PyObject *)__pyx_v_res), __pyx_t_11, (__pyx_cur_scope->__pyx_v_P[__pyx_v_i]).t, (__pyx_v_j + __pyx_v_k), NULL, NULL, NULL, 1, 1, 1) < 0) __PYX_ERR(0, 1038, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

      /* "oasis.pyx":1039
 *             RSS -= res[j:j + k].dot(res[j:j + k])
 *             res[P[i].t:j + k] = c[P[i].t:j + k] - y[P[i].t:j + k]
 *             RSS += res[P[i].t:j + k].dot(res[P[i].t:j + k])             # <<<<<<<<<<<<<<
 *             if RSS < thresh:
 *                 break
 */
      __pyx_t_11 = PyFloat_FromDouble(__pyx_v_RSS); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1039, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_4 = __Pyx_PyObject_GetSlice(((PyObject *)__pyx_v_res), (__pyx_cur_scope->__pyx_v_P[__pyx_v_i]).t, (__pyx_v_j + __pyx_v_k), NULL, NULL, NULL, 1, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1039, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_dot); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1039, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_GetSlice(((PyObject *)__pyx_v_res), (__pyx_cur_scope->__pyx_v_P[__pyx_v_i]).t, (__pyx_v_j + __pyx_v_k), NULL, NULL, NULL, 1, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1039, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_16))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_16);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_16, function);
        }
      }
      if (!__pyx_t_5) {
        __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_16, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1039, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_GOTREF(__pyx_t_3);
      } else {
        __pyx_t_14 = PyTuple_New(1+1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1039, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_14, 0+1, __pyx_t_4);
        __pyx_t_4 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_16, __pyx_t_14, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1039, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      }
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      __pyx_t_16 = PyNumber_InPlaceAdd(__pyx_t_11, __pyx_t_3); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1039, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_34 = __pyx_PyFloat_AsFloat(__pyx_t_16); if (unlikely((__pyx_t_34 == (npy_float32)-1) && PyErr_Occurred())) __PYX_ERR(0, 1039, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      __pyx_v_RSS = __pyx_t_34;

      /* "oasis.pyx":1040
 *             res[P[i].t:j + k] = c[P[i].t:j + k] - y[P[i].t:j + k]
 *             RSS += res[P[i].t:j + k].dot(res[P[i].t:j + k])
 *             if RSS < thresh:             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
      __pyx_t_17 = ((__pyx_v_RSS < __pyx_v_thresh) != 0);
      if (__pyx_t_17) {

        /* "oasis.pyx":1041
 *             RSS += res[P[i].t:j + k].dot(res[P[i].t:j + k])
 *             if RSS < thresh:
 *                 break             # <<<<<<<<<<<<<<
 * 
 *     # construct s
 */
        goto __pyx_L94_break;

        /* "oasis.pyx":1040
 *             res[P[i].t:j + k] = c[P[i].t:j + k] - y[P[i].t:j + k]
 *             RSS += res[P[i].t:j + k].dot(res[P[i].t:j + k])
 *             if RSS < thresh:             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
      }

      /* "oasis.pyx":1022
 *         newpool.v, newpool.w, newpool.t, newpool.l = 0, 1, 0, len(y)
 *         P.push_back(newpool)
 *         for p in pos:             # <<<<<<<<<<<<<<
 *             i = 0
 *             while P[i].t + P[i].l <= p:
 */
    }
    __pyx_L94_break:;
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

    /* "oasis.pyx":1011
 *         c, P = oasis(P, g, c)
 * 
 *     if penalty == 0:  # get (locally optimal) L0 solution             # <<<<<<<<<<<<<<
 *         lls = [(P[i + 1].v / P[i + 1].w - P[i].v / P[i].w * g**P[i].l)
 *                for i in range(P.size() - 1)]
 */
  }

  /* "oasis.pyx":1044
 * 
 *     # construct s
 *     s = c.copy()             # <<<<<<<<<<<<<<
 *     s[0] = 0
 *     s[1:] -= g * c[:-1]
 */
  __pyx_t_16 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_c), __pyx_n_s_copy); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1044, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_16))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_16);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_16, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_12 = __Pyx_PyObject_CallOneArg(__pyx_t_16, __pyx_t_3); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1044, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_12 = __Pyx_PyObject_CallNoArg(__pyx_t_16); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1044, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  if (!(likely(((__pyx_t_12) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_12, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1044, __pyx_L1_error)
  __pyx_t_6 = ((PyArrayObject *)__pyx_t_12);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_s.rcbuffer->pybuffer);
    __pyx_t_7 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_s.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack);
    if (unlikely(__pyx_t_7 < 0)) {
      PyErr_Fetch(&__pyx_t_10, &__pyx_t_9, &__pyx_t_8);
      if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_s.rcbuffer->pybuffer, (PyObject*)__pyx_v_s, &__Pyx_TypeInfo_nn___pyx_t_5oasis_SINGLE, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
        Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_8);
        __Pyx_RaiseBufferFallbackError();
      } else {
        PyErr_Restore(__pyx_t_10, __pyx_t_9, __pyx_t_8);
      }
    }
    __pyx_pybuffernd_s.diminfo[0].strides = __pyx_pybuffernd_s.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_s.diminfo[0].shape = __pyx_pybuffernd_s.rcbuffer->pybuffer.shape[0];
    if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1044, __pyx_L1_error)
  }
  __pyx_t_6 = 0;
  __pyx_v_s = ((PyArrayObject *)__pyx_t_12);
  __pyx_t_12 = 0;

  /* "oasis.pyx":1045
 *     # construct s
 *     s = c.copy()
 *     s[0] = 0             # <<<<<<<<<<<<<<
 *     s[1:] -= g * c[:-1]
 *     return c, s, b, g, lam
 */
  __pyx_t_46 = 0;
  __pyx_t_7 = -1;
  if (__pyx_t_46 < 0) {
    __pyx_t_46 += __pyx_pybuffernd_s.diminfo[0].shape;
    if (unlikely(__pyx_t_46 < 0)) __pyx_t_7 = 0;
  } else if (unlikely(__pyx_t_46 >= __pyx_pybuffernd_s.diminfo[0].shape)) __pyx_t_7 = 0;
  if (unlikely(__pyx_t_7 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_7);
    __PYX_ERR(0, 1045, __pyx_L1_error)
  }
  *__Pyx_BufPtrStrided1d(__pyx_t_5oasis_SINGLE *, __pyx_pybuffernd_s.rcbuffer->pybuffer.buf, __pyx_t_46, __pyx_pybuffernd_s.diminfo[0].strides) = 0.0;

  /* "oasis.pyx":1046
 *     s = c.copy()
 *     s[0] = 0
 *     s[1:] -= g * c[:-1]             # <<<<<<<<<<<<<<
 *     return c, s, b, g, lam
 */
  __Pyx_INCREF(__pyx_slice__24);
  __pyx_t_47 = __pyx_slice__24;
  __pyx_t_12 = PyObject_GetItem(((PyObject *)__pyx_v_s), __pyx_t_47); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1046, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_16 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_g); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1046, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_3 = __Pyx_PyObject_GetSlice(((PyObject *)__pyx_v_c), 0, -1L, NULL, NULL, &__pyx_slice__25, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1046, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_11 = PyNumber_Multiply(__pyx_t_16, __pyx_t_3); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1046, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_InPlaceSubtract(__pyx_t_12, __pyx_t_11); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1046, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_s), __pyx_t_47, __pyx_t_3) < 0)) __PYX_ERR(0, 1046, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_47); __pyx_t_47 = 0;

  /* "oasis.pyx":1047
 *     s[0] = 0
 *     s[1:] -= g * c[:-1]
 *     return c, s, b, g, lam             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_b); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1047, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_11 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_g); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1047, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_12 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_lam); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1047, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_16 = PyTuple_New(5); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1047, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_INCREF(((PyObject *)__pyx_v_c));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_c));
  PyTuple_SET_ITEM(__pyx_t_16, 0, ((PyObject *)__pyx_v_c));
  __Pyx_INCREF(((PyObject *)__pyx_v_s));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_s));
  PyTuple_SET_ITEM(__pyx_t_16, 1, ((PyObject *)__pyx_v_s));
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_16, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_11);
  PyTuple_SET_ITEM(__pyx_t_16, 3, __pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_12);
  PyTuple_SET_ITEM(__pyx_t_16, 4, __pyx_t_12);
  __pyx_t_3 = 0;
  __pyx_t_11 = 0;
  __pyx_t_12 = 0;
  __pyx_r = __pyx_t_16;
  __pyx_t_16 = 0;
  goto __pyx_L0;

  /* "oasis.pyx":659
 * 
 * @cython.cdivision(True)
 * def constrained_oasisAR1(np.ndarray[SINGLE, ndim=1] y, SINGLE g, SINGLE sn,             # <<<<<<<<<<<<<<
 *                          bool optimize_b=False, bool b_nonneg=True, int optimize_g=0,
 *                          int decimate=1, int max_iter=5, int penalty=1):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_35);
  __Pyx_XDECREF(__pyx_t_36);
  __Pyx_XDECREF(__pyx_t_47);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_c.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_ff.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_fluor.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_h.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_ll.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_res.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_s.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_tmp.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_y.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("oasis.constrained_oasisAR1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_c.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_ff.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_fluor.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_h.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_ll.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_res.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_s.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_tmp.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_y.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_g_converged);
  __Pyx_XDECREF((PyObject *)__pyx_v_c);
  __Pyx_XDECREF((PyObject *)__pyx_v_s);
  __Pyx_XDECREF((PyObject *)__pyx_v_res);
  __Pyx_XDECREF((PyObject *)__pyx_v_tmp);
  __Pyx_XDECREF((PyObject *)__pyx_v_fluor);
  __Pyx_XDECREF((PyObject *)__pyx_v_h);
  __Pyx_XDECREF((PyObject *)__pyx_v_ff);
  __Pyx_XDECREF((PyObject *)__pyx_v_ll);
  __Pyx_XDECREF(__pyx_v_oasis1strun);
  __Pyx_XDECREF(__pyx_v_oasis);
  __Pyx_XDECREF(__pyx_v_idx);
  __Pyx_XDECREF(__pyx_v_Pt);
  __Pyx_XDECREF(__pyx_v_Pl);
  __Pyx_XDECREF(__pyx_v_baz);
  __Pyx_XDECREF(__pyx_v_q);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_lls);
  __Pyx_XDECREF(__pyx_v_pos);
  __Pyx_XDECREF(__pyx_v_p);
  __Pyx_XDECREF((PyObject *)__pyx_v_y);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":197
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5numpy_7ndarray___getbuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_v_copy_shape;
  int __pyx_v_i;
  int __pyx_v_ndim;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  int __pyx_v_t;
  char *__pyx_v_f;
  PyArray_Descr *__pyx_v_descr = 0;
  int __pyx_v_offset;
  int __pyx_v_hasfields;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  char *__pyx_t_7;
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  if (__pyx_v_info != NULL) {
    __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(__pyx_v_info->obj);
  }

  /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":203
 *             # of flags
 * 
 *             if info == NULL: return             # <<<<<<<<<<<<<<
 * 
 *             cdef int copy_shape, i, ndim
 */
  __pyx_t_1 = ((__pyx_v_info == NULL) != 0);
  if (__pyx_t_1) {
    __pyx_r = 0;
    goto __pyx_L0;
  }

  /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":206
 * 
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 */
  __pyx_v_endian_detector = 1;

  /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":207
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 * 
 *             ndim = PyArray_NDIM(self)
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":209
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 *             ndim = PyArray_NDIM(self)             # <<<<<<<<<<<<<<
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_v_ndim = PyArray_NDIM(__pyx_v_self);

  /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":211
 *             ndim = PyArray_NDIM(self)
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 copy_shape = 1
 *             else:
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":212
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 copy_shape = 1             # <<<<<<<<<<<<<<
 *             else:
 *                 copy_shape = 0
 */
    __pyx_v_copy_shape = 1;

    /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":211
 *             ndim = PyArray_NDIM(self)
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 copy_shape = 1
 *             else:
 */
    goto __pyx_L4;
  }

  /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":214
 *                 copy_shape = 1
 *             else:
 *                 copy_shape = 0             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 */
  /*else*/ {
    __pyx_v_copy_shape = 0;
  }
  __pyx_L4:;

  /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":216
 *                 copy_shape = 0
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_C_CONTIGUOUS) == PyBUF_C_CONTIGUOUS) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L6_bool_binop_done;
  }

  /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":217
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 */
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_C_CONTIGUOUS) != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L6_bool_binop_done:;

  /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":216
 *                 copy_shape = 0
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  if (__pyx_t_1) {

    /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":218
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__26, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 218, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 218, __pyx_L1_error)

    /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":216
 *                 copy_shape = 0
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  }

  /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":220
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_F_CONTIGUOUS) == PyBUF_F_CONTIGUOUS) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L9_bool_binop_done;
  }

  /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":221
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 */
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_F_CONTIGUOUS) != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L9_bool_binop_done:;

  /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":220
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  if (__pyx_t_1) {

    /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":222
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__27, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 222, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 222, __pyx_L1_error)

    /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":220
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  }

  /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":224
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 *             info.buf = PyArray_DATA(self)             # <<<<<<<<<<<<<<
 *             info.ndim = ndim
 *             if copy_shape:
 */
  __pyx_v_info->buf = PyArray_DATA(__pyx_v_self);

  /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":225
 * 
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim             # <<<<<<<<<<<<<<
 *             if copy_shape:
 *                 # Allocate new buffer for strides and shape info.
 */
  __pyx_v_info->ndim = __pyx_v_ndim;

  /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":226
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if copy_shape:             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */
  __pyx_t_1 = (__pyx_v_copy_shape != 0);
  if (__pyx_t_1) {

    /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":229
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)             # <<<<<<<<<<<<<<
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 */
    __pyx_v_info->strides = ((Py_ssize_t *)malloc((((sizeof(Py_ssize_t)) * ((size_t)__pyx_v_ndim)) * 2)));

    /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":230
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)
 *                 info.shape = info.strides + ndim             # <<<<<<<<<<<<<<
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 */
    __pyx_v_info->shape = (__pyx_v_info->strides + __pyx_v_ndim);

    /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":231
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):             # <<<<<<<<<<<<<<
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 */
    __pyx_t_4 = __pyx_v_ndim;
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":232
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]             # <<<<<<<<<<<<<<
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 */
      (__pyx_v_info->strides[__pyx_v_i]) = (PyArray_STRIDES(__pyx_v_self)[__pyx_v_i]);

      /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":233
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]             # <<<<<<<<<<<<<<
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 */
      (__pyx_v_info->shape[__pyx_v_i]) = (PyArray_DIMS(__pyx_v_self)[__pyx_v_i]);
    }

    /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":226
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if copy_shape:             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */
    goto __pyx_L11;
  }

  /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":235
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)             # <<<<<<<<<<<<<<
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 */
  /*else*/ {
    __pyx_v_info->strides = ((Py_ssize_t *)PyArray_STRIDES(__pyx_v_self));

    /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":236
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)             # <<<<<<<<<<<<<<
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 */
    __pyx_v_info->shape = ((Py_ssize_t *)PyArray_DIMS(__pyx_v_self));
  }
  __pyx_L11:;

  /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":237
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 */
  __pyx_v_info->suboffsets = NULL;

  /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":238
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)             # <<<<<<<<<<<<<<
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 * 
 */
  __pyx_v_info->itemsize = PyArray_ITEMSIZE(__pyx_v_self);

  /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":239
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)             # <<<<<<<<<<<<<<
 * 
 *             cdef int t
 */
  __pyx_v_info->readonly = (!(PyArray_ISWRITEABLE(__pyx_v_self) != 0));

  /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":242
 * 
 *             cdef int t
 *             cdef char* f = NULL             # <<<<<<<<<<<<<<
 *             cdef dtype descr = self.descr
 *             cdef int offset
 */
  __pyx_v_f = NULL;

  /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":243
 *             cdef int t
 *             cdef char* f = NULL
 *             cdef dtype descr = self.descr             # <<<<<<<<<<<<<<
 *             cdef int offset
 * 
 */
  __pyx_t_3 = ((PyObject *)__pyx_v_self->descr);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_v_descr = ((PyArray_Descr *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":246
 *             cdef int offset
 * 
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields and not copy_shape:
 */
  __pyx_v_hasfields = PyDataType_HASFIELDS(__pyx_v_descr);

  /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":248
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)
 * 
 *             if not hasfields and not copy_shape:             # <<<<<<<<<<<<<<
 *                 # do not call releasebuffer
 *                 info.obj = None
 */
  __pyx_t_2 = ((!(__pyx_v_hasfields != 0)) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L15_bool_binop_done;
  }
  __pyx_t_2 = ((!(__pyx_v_copy_shape != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L15_bool_binop_done:;
  if (__pyx_t_1) {

    /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":250
 *             if not hasfields and not copy_shape:
 *                 # do not call releasebuffer
 *                 info.obj = None             # <<<<<<<<<<<<<<
 *             else:
 *                 # need to call releasebuffer
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj);
    __pyx_v_info->obj = Py_None;

    /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":248
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)
 * 
 *             if not hasfields and not copy_shape:             # <<<<<<<<<<<<<<
 *                 # do not call releasebuffer
 *                 info.obj = None
 */
    goto __pyx_L14;
  }

  /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":253
 *             else:
 *                 # need to call releasebuffer
 *                 info.obj = self             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields:
 */
  /*else*/ {
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj);
    __pyx_v_info->obj = ((PyObject *)__pyx_v_self);
  }
  __pyx_L14:;

  /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":255
 *                 info.obj = self
 * 
 *             if not hasfields:             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */
  __pyx_t_1 = ((!(__pyx_v_hasfields != 0)) != 0);
  if (__pyx_t_1) {

    /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":256
 * 
 *             if not hasfields:
 *                 t = descr.type_num             # <<<<<<<<<<<<<<
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 */
    __pyx_t_4 = __pyx_v_descr->type_num;
    __pyx_v_t = __pyx_t_4;

    /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":257
 *             if not hasfields:
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '>') != 0);
    if (!__pyx_t_2) {
      goto __pyx_L20_next_or;
    } else {
    }
    __pyx_t_2 = (__pyx_v_little_endian != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L19_bool_binop_done;
    }
    __pyx_L20_next_or:;

    /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":258
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 */
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '<') != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L19_bool_binop_done;
    }
    __pyx_t_2 = ((!(__pyx_v_little_endian != 0)) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L19_bool_binop_done:;

    /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":257
 *             if not hasfields:
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    if (__pyx_t_1) {

      /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":259
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__28, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 259, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(1, 259, __pyx_L1_error)

      /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":257
 *             if not hasfields:
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    }

    /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":260
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 */
    switch (__pyx_v_t) {
      case NPY_BYTE:
      __pyx_v_f = ((char *)"b");
      break;

      /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":261
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 */
      case NPY_UBYTE:
      __pyx_v_f = ((char *)"B");
      break;

      /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":262
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 */
      case NPY_SHORT:
      __pyx_v_f = ((char *)"h");
      break;

      /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":263
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 */
      case NPY_USHORT:
      __pyx_v_f = ((char *)"H");
      break;

      /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":264
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 */
      case NPY_INT:
      __pyx_v_f = ((char *)"i");
      break;

      /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":265
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 */
      case NPY_UINT:
      __pyx_v_f = ((char *)"I");
      break;

      /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":266
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 */
      case NPY_LONG:
      __pyx_v_f = ((char *)"l");
      break;

      /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":267
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 */
      case NPY_ULONG:
      __pyx_v_f = ((char *)"L");
      break;

      /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":268
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 */
      case NPY_LONGLONG:
      __pyx_v_f = ((char *)"q");
      break;

      /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":269
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 */
      case NPY_ULONGLONG:
      __pyx_v_f = ((char *)"Q");
      break;

      /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":270
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 */
      case NPY_FLOAT:
      __pyx_v_f = ((char *)"f");
      break;

      /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":271
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 */
      case NPY_DOUBLE:
      __pyx_v_f = ((char *)"d");
      break;

      /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":272
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 */
      case NPY_LONGDOUBLE:
      __pyx_v_f = ((char *)"g");
      break;

      /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":273
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 */
      case NPY_CFLOAT:
      __pyx_v_f = ((char *)"Zf");
      break;

      /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":274
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"
 */
      case NPY_CDOUBLE:
      __pyx_v_f = ((char *)"Zd");
      break;

      /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":275
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 */
      case NPY_CLONGDOUBLE:
      __pyx_v_f = ((char *)"Zg");
      break;

      /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":276
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      case NPY_OBJECT:
      __pyx_v_f = ((char *)"O");
      break;
      default:

      /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":278
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *                 info.format = f
 *                 return
 */
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 278, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 278, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 278, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 278, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __PYX_ERR(1, 278, __pyx_L1_error)
      break;
    }

    /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":279
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f             # <<<<<<<<<<<<<<
 *                 return
 *             else:
 */
    __pyx_v_info->format = __pyx_v_f;

    /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":280
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f
 *                 return             # <<<<<<<<<<<<<<
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":255
 *                 info.obj = self
 * 
 *             if not hasfields:             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */
  }

  /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":282
 *                 return
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)             # <<<<<<<<<<<<<<
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 */
  /*else*/ {
    __pyx_v_info->format = ((char *)malloc(0xFF));

    /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":283
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment             # <<<<<<<<<<<<<<
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,
 */
    (__pyx_v_info->format[0]) = '^';

    /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":284
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0             # <<<<<<<<<<<<<<
 *                 f = _util_dtypestring(descr, info.format + 1,
 *                                       info.format + _buffer_format_string_len,
 */
    __pyx_v_offset = 0;

    /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":285
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,             # <<<<<<<<<<<<<<
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 */
    __pyx_t_7 = __pyx_f_5numpy__util_dtypestring(__pyx_v_descr, (__pyx_v_info->format + 1), (__pyx_v_info->format + 0xFF), (&__pyx_v_offset)); if (unlikely(__pyx_t_7 == NULL)) __PYX_ERR(1, 285, __pyx_L1_error)
    __pyx_v_f = __pyx_t_7;

    /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":288
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 *                 f[0] = c'\0' # Terminate format string             # <<<<<<<<<<<<<<
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 */
    (__pyx_v_f[0]) = '\x00';
  }

  /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":197
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("numpy.ndarray.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info != NULL && __pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = NULL;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info != NULL && __pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(Py_None);
    __Pyx_DECREF(Py_None); __pyx_v_info->obj = NULL;
  }
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_descr);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":290
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 */

/* Python wrapper */
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info); /*proto*/
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__releasebuffer__ (wrapper)", 0);
  __pyx_pf_5numpy_7ndarray_2__releasebuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__releasebuffer__", 0);

  /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":291
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_t_1 = (PyArray_HASFIELDS(__pyx_v_self) != 0);
  if (__pyx_t_1) {

    /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":292
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)             # <<<<<<<<<<<<<<
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 stdlib.free(info.strides)
 */
    free(__pyx_v_info->format);

    /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":291
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  }

  /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":293
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":294
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 stdlib.free(info.strides)             # <<<<<<<<<<<<<<
 *                 # info.shape was stored after info.strides in the same block
 * 
 */
    free(__pyx_v_info->strides);

    /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":293
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */
  }

  /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":290
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":770
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);

  /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":771
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 771, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":770
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":773
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);

  /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":774
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 774, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":773
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":776
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);

  /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":777
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 777, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":776
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":779
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);

  /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":780
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 780, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":779
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":782
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);

  /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":783
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 783, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":782
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":785
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *__pyx_v_descr, char *__pyx_v_f, char *__pyx_v_end, int *__pyx_v_offset) {
  PyArray_Descr *__pyx_v_child = 0;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  PyObject *__pyx_v_fields = 0;
  PyObject *__pyx_v_childname = NULL;
  PyObject *__pyx_v_new_offset = NULL;
  PyObject *__pyx_v_t = NULL;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  long __pyx_t_8;
  char *__pyx_t_9;
  __Pyx_RefNannySetupContext("_util_dtypestring", 0);

  /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":790
 * 
 *     cdef dtype child
 *     cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 *     cdef tuple fields
 */
  __pyx_v_endian_detector = 1;

  /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":791
 *     cdef dtype child
 *     cdef int endian_detector = 1
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 *     cdef tuple fields
 * 
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":794
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  if (unlikely(__pyx_v_descr->names == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(1, 794, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_descr->names; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 794, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 794, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_childname, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":795
 * 
 *     for childname in descr.names:
 *         fields = descr.fields[childname]             # <<<<<<<<<<<<<<
 *         child, new_offset = fields
 * 
 */
    if (unlikely(__pyx_v_descr->fields == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 795, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_descr->fields, __pyx_v_childname); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 795, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(PyTuple_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(1, 795, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_fields, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":796
 *     for childname in descr.names:
 *         fields = descr.fields[childname]
 *         child, new_offset = fields             # <<<<<<<<<<<<<<
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 */
    if (likely(__pyx_v_fields != Py_None)) {
      PyObject* sequence = __pyx_v_fields;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(1, 796, __pyx_L1_error)
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 796, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 796, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      #endif
    } else {
      __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(1, 796, __pyx_L1_error)
    }
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_dtype))))) __PYX_ERR(1, 796, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_child, ((PyArray_Descr *)__pyx_t_3));
    __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_new_offset, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":798
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 798, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyNumber_Subtract(__pyx_v_new_offset, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 798, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 798, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = ((((__pyx_v_end - __pyx_v_f) - ((int)__pyx_t_5)) < 15) != 0);
    if (__pyx_t_6) {

      /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":799
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__29, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 799, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(1, 799, __pyx_L1_error)

      /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":798
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    }

    /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":801
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_7 = ((__pyx_v_child->byteorder == '>') != 0);
    if (!__pyx_t_7) {
      goto __pyx_L8_next_or;
    } else {
    }
    __pyx_t_7 = (__pyx_v_little_endian != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_L8_next_or:;

    /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":802
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *             raise ValueError(u"Non-native byte order not supported")
 *             # One could encode it in the format string and have Cython
 */
    __pyx_t_7 = ((__pyx_v_child->byteorder == '<') != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_7 = ((!(__pyx_v_little_endian != 0)) != 0);
    __pyx_t_6 = __pyx_t_7;
    __pyx_L7_bool_binop_done:;

    /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":801
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    if (__pyx_t_6) {

      /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":803
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__30, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 803, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(1, 803, __pyx_L1_error)

      /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":801
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    }

    /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":813
 * 
 *         # Output padding bytes
 *         while offset[0] < new_offset:             # <<<<<<<<<<<<<<
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 */
    while (1) {
      __pyx_t_3 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 813, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, __pyx_v_new_offset, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 813, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 813, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (!__pyx_t_6) break;

      /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":814
 *         # Output padding bytes
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte             # <<<<<<<<<<<<<<
 *             f += 1
 *             offset[0] += 1
 */
      (__pyx_v_f[0]) = 0x78;

      /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":815
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte
 *             f += 1             # <<<<<<<<<<<<<<
 *             offset[0] += 1
 * 
 */
      __pyx_v_f = (__pyx_v_f + 1);

      /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":816
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 *             offset[0] += 1             # <<<<<<<<<<<<<<
 * 
 *         offset[0] += child.itemsize
 */
      __pyx_t_8 = 0;
      (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + 1);
    }

    /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":818
 *             offset[0] += 1
 * 
 *         offset[0] += child.itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not PyDataType_HASFIELDS(child):
 */
    __pyx_t_8 = 0;
    (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + __pyx_v_child->elsize);

    /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":820
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
    __pyx_t_6 = ((!(PyDataType_HASFIELDS(__pyx_v_child) != 0)) != 0);
    if (__pyx_t_6) {

      /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":821
 * 
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num             # <<<<<<<<<<<<<<
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")
 */
      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_child->type_num); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 821, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":822
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */
      __pyx_t_6 = (((__pyx_v_end - __pyx_v_f) < 5) != 0);
      if (__pyx_t_6) {

        /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":823
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__31, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 823, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __PYX_ERR(1, 823, __pyx_L1_error)

        /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":822
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */
      }

      /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":826
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_BYTE); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 826, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 826, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 826, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 98;
        goto __pyx_L15;
      }

      /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":827
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"             # <<<<<<<<<<<<<<
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UBYTE); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 827, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 827, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 827, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 66;
        goto __pyx_L15;
      }

      /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":828
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"             # <<<<<<<<<<<<<<
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_SHORT); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 828, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 828, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 828, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x68;
        goto __pyx_L15;
      }

      /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":829
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"             # <<<<<<<<<<<<<<
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_USHORT); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 829, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 829, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 829, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 72;
        goto __pyx_L15;
      }

      /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":830
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_INT); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 830, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 830, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 830, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x69;
        goto __pyx_L15;
      }

      /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":831
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UINT); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 831, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 831, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 831, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 73;
        goto __pyx_L15;
      }

      /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":832
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONG); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 832, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 832, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 832, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x6C;
        goto __pyx_L15;
      }

      /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":833
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONG); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 833, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 833, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 833, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 76;
        goto __pyx_L15;
      }

      /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":834
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGLONG); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 834, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 834, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 834, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x71;
        goto __pyx_L15;
      }

      /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":835
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONGLONG); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 835, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 835, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 835, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 81;
        goto __pyx_L15;
      }

      /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":836
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"             # <<<<<<<<<<<<<<
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_FLOAT); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 836, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 836, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 836, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x66;
        goto __pyx_L15;
      }

      /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":837
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_DOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 837, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 837, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 837, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x64;
        goto __pyx_L15;
      }

      /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":838
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"             # <<<<<<<<<<<<<<
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGDOUBLE); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 838, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 838, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 838, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x67;
        goto __pyx_L15;
      }

      /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":839
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf             # <<<<<<<<<<<<<<
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CFLOAT); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 839, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 839, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 839, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x66;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":840
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd             # <<<<<<<<<<<<<<
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CDOUBLE); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 840, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 840, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 840, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x64;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":841
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg             # <<<<<<<<<<<<<<
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CLONGDOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 841, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 841, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 841, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x67;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":842
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_OBJECT); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 842, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 842, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(1, 842, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 79;
        goto __pyx_L15;
      }

      /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":844
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *             f += 1
 *         else:
 */
      /*else*/ {
        __pyx_t_3 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 844, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 844, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 844, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_Raise(__pyx_t_3, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __PYX_ERR(1, 844, __pyx_L1_error)
      }
      __pyx_L15:;

      /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":845
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *             f += 1             # <<<<<<<<<<<<<<
 *         else:
 *             # Cython ignores struct boundary information ("T{...}"),
 */
      __pyx_v_f = (__pyx_v_f + 1);

      /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":820
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
      goto __pyx_L13;
    }

    /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":849
 *             # Cython ignores struct boundary information ("T{...}"),
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)             # <<<<<<<<<<<<<<
 *     return f
 * 
 */
    /*else*/ {
      __pyx_t_9 = __pyx_f_5numpy__util_dtypestring(__pyx_v_child, __pyx_v_f, __pyx_v_end, __pyx_v_offset); if (unlikely(__pyx_t_9 == NULL)) __PYX_ERR(1, 849, __pyx_L1_error)
      __pyx_v_f = __pyx_t_9;
    }
    __pyx_L13:;

    /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":794
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":850
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)
 *     return f             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_f;
  goto __pyx_L0;

  /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":785
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("numpy._util_dtypestring", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_child);
  __Pyx_XDECREF(__pyx_v_fields);
  __Pyx_XDECREF(__pyx_v_childname);
  __Pyx_XDECREF(__pyx_v_new_offset);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":966
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  PyObject *__pyx_v_baseptr;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("set_array_base", 0);

  /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":968
 * cdef inline void set_array_base(ndarray arr, object base):
 *      cdef PyObject* baseptr
 *      if base is None:             # <<<<<<<<<<<<<<
 *          baseptr = NULL
 *      else:
 */
  __pyx_t_1 = (__pyx_v_base == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":969
 *      cdef PyObject* baseptr
 *      if base is None:
 *          baseptr = NULL             # <<<<<<<<<<<<<<
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 */
    __pyx_v_baseptr = NULL;

    /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":968
 * cdef inline void set_array_base(ndarray arr, object base):
 *      cdef PyObject* baseptr
 *      if base is None:             # <<<<<<<<<<<<<<
 *          baseptr = NULL
 *      else:
 */
    goto __pyx_L3;
  }

  /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":971
 *          baseptr = NULL
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!             # <<<<<<<<<<<<<<
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 */
  /*else*/ {
    Py_INCREF(__pyx_v_base);

    /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":972
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base             # <<<<<<<<<<<<<<
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr
 */
    __pyx_v_baseptr = ((PyObject *)__pyx_v_base);
  }
  __pyx_L3:;

  /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":973
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)             # <<<<<<<<<<<<<<
 *      arr.base = baseptr
 * 
 */
  Py_XDECREF(__pyx_v_arr->base);

  /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":974
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  __pyx_v_arr->base = __pyx_v_baseptr;

  /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":966
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":976
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base", 0);

  /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":977
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_arr->base == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":978
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     else:
 *         return <object>arr.base
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;

    /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":977
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     else:
 */
  }

  /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":980
 *         return None
 *     else:
 *         return <object>arr.base             # <<<<<<<<<<<<<<
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_arr->base));
    __pyx_r = ((PyObject *)__pyx_v_arr->base);
    goto __pyx_L0;
  }

  /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":976
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "FromPyStructUtility":11
 * 
 * @cname("__pyx_convert__from_py_struct____pyx_t_5oasis_Pool")
 * cdef Pool __pyx_convert__from_py_struct____pyx_t_5oasis_Pool(obj) except *:             # <<<<<<<<<<<<<<
 *     cdef Pool result
 *     if not PyMapping_Check(obj):
 */

static struct __pyx_t_5oasis_Pool __pyx_convert__from_py_struct____pyx_t_5oasis_Pool(PyObject *__pyx_v_obj) {
  struct __pyx_t_5oasis_Pool __pyx_v_result;
  PyObject *__pyx_v_value = NULL;
  struct __pyx_t_5oasis_Pool __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  __pyx_t_5oasis_SINGLE __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  __Pyx_RefNannySetupContext("__pyx_convert__from_py_struct____pyx_t_5oasis_Pool", 0);

  /* "FromPyStructUtility":13
 * cdef Pool __pyx_convert__from_py_struct____pyx_t_5oasis_Pool(obj) except *:
 *     cdef Pool result
 *     if not PyMapping_Check(obj):             # <<<<<<<<<<<<<<
 *         PyErr_Format(TypeError, b"Expected %.16s, got %.200s", b"a mapping", Py_TYPE(obj).tp_name)
 * 
 */
  __pyx_t_1 = ((!(PyMapping_Check(__pyx_v_obj) != 0)) != 0);
  if (__pyx_t_1) {

    /* "FromPyStructUtility":14
 *     cdef Pool result
 *     if not PyMapping_Check(obj):
 *         PyErr_Format(TypeError, b"Expected %.16s, got %.200s", b"a mapping", Py_TYPE(obj).tp_name)             # <<<<<<<<<<<<<<
 * 
 *     try:
 */
    __pyx_t_2 = PyErr_Format(__pyx_builtin_TypeError, ((char const *)"Expected %.16s, got %.200s"), ((char *)"a mapping"), Py_TYPE(__pyx_v_obj)->tp_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "FromPyStructUtility":13
 * cdef Pool __pyx_convert__from_py_struct____pyx_t_5oasis_Pool(obj) except *:
 *     cdef Pool result
 *     if not PyMapping_Check(obj):             # <<<<<<<<<<<<<<
 *         PyErr_Format(TypeError, b"Expected %.16s, got %.200s", b"a mapping", Py_TYPE(obj).tp_name)
 * 
 */
  }

  /* "FromPyStructUtility":16
 *         PyErr_Format(TypeError, b"Expected %.16s, got %.200s", b"a mapping", Py_TYPE(obj).tp_name)
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['v']
 *     except KeyError:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_5);
    /*try:*/ {

      /* "FromPyStructUtility":17
 * 
 *     try:
 *         value = obj['v']             # <<<<<<<<<<<<<<
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'v'")
 */
      __pyx_t_2 = PyObject_GetItem(__pyx_v_obj, __pyx_n_s_v); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 17, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_v_value = __pyx_t_2;
      __pyx_t_2 = 0;

      /* "FromPyStructUtility":16
 *         PyErr_Format(TypeError, b"Expected %.16s, got %.200s", b"a mapping", Py_TYPE(obj).tp_name)
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['v']
 *     except KeyError:
 */
    }
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L11_try_end;
    __pyx_L4_error:;
    __Pyx_PyThreadState_assign
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "FromPyStructUtility":18
 *     try:
 *         value = obj['v']
 *     except KeyError:             # <<<<<<<<<<<<<<
 *         raise ValueError("No value specified for struct attribute 'v'")
 *     result.v = value
 */
    __pyx_t_6 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError);
    if (__pyx_t_6) {
      __Pyx_AddTraceback("FromPyStructUtility.__pyx_convert__from_py_struct____pyx_t_5oasis_Pool", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_7, &__pyx_t_8) < 0) __PYX_ERR(2, 18, __pyx_L6_except_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GOTREF(__pyx_t_8);

      /* "FromPyStructUtility":19
 *         value = obj['v']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'v'")             # <<<<<<<<<<<<<<
 *     result.v = value
 *     try:
 */
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__32, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 19, __pyx_L6_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_Raise(__pyx_t_9, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __PYX_ERR(2, 19, __pyx_L6_except_error)
    }
    goto __pyx_L6_except_error;
    __pyx_L6_except_error:;

    /* "FromPyStructUtility":16
 *         PyErr_Format(TypeError, b"Expected %.16s, got %.200s", b"a mapping", Py_TYPE(obj).tp_name)
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['v']
 *     except KeyError:
 */
    __Pyx_PyThreadState_assign
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    goto __pyx_L1_error;
    __pyx_L11_try_end:;
  }

  /* "FromPyStructUtility":20
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'v'")
 *     result.v = value             # <<<<<<<<<<<<<<
 *     try:
 *         value = obj['w']
 */
  __pyx_t_10 = __pyx_PyFloat_AsFloat(__pyx_v_value); if (unlikely((__pyx_t_10 == (npy_float32)-1) && PyErr_Occurred())) __PYX_ERR(2, 20, __pyx_L1_error)
  __pyx_v_result.v = __pyx_t_10;

  /* "FromPyStructUtility":21
 *         raise ValueError("No value specified for struct attribute 'v'")
 *     result.v = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['w']
 *     except KeyError:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_4, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "FromPyStructUtility":22
 *     result.v = value
 *     try:
 *         value = obj['w']             # <<<<<<<<<<<<<<
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'w'")
 */
      __pyx_t_8 = PyObject_GetItem(__pyx_v_obj, __pyx_n_s_w); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 22, __pyx_L14_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF_SET(__pyx_v_value, __pyx_t_8);
      __pyx_t_8 = 0;

      /* "FromPyStructUtility":21
 *         raise ValueError("No value specified for struct attribute 'v'")
 *     result.v = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['w']
 *     except KeyError:
 */
    }
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L21_try_end;
    __pyx_L14_error:;
    __Pyx_PyThreadState_assign
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "FromPyStructUtility":23
 *     try:
 *         value = obj['w']
 *     except KeyError:             # <<<<<<<<<<<<<<
 *         raise ValueError("No value specified for struct attribute 'w'")
 *     result.w = value
 */
    __pyx_t_6 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError);
    if (__pyx_t_6) {
      __Pyx_AddTraceback("FromPyStructUtility.__pyx_convert__from_py_struct____pyx_t_5oasis_Pool", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_8, &__pyx_t_7, &__pyx_t_2) < 0) __PYX_ERR(2, 23, __pyx_L16_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GOTREF(__pyx_t_2);

      /* "FromPyStructUtility":24
 *         value = obj['w']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'w'")             # <<<<<<<<<<<<<<
 *     result.w = value
 *     try:
 */
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__33, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 24, __pyx_L16_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_Raise(__pyx_t_9, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __PYX_ERR(2, 24, __pyx_L16_except_error)
    }
    goto __pyx_L16_except_error;
    __pyx_L16_except_error:;

    /* "FromPyStructUtility":21
 *         raise ValueError("No value specified for struct attribute 'v'")
 *     result.v = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['w']
 *     except KeyError:
 */
    __Pyx_PyThreadState_assign
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_4, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L21_try_end:;
  }

  /* "FromPyStructUtility":25
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'w'")
 *     result.w = value             # <<<<<<<<<<<<<<
 *     try:
 *         value = obj['t']
 */
  __pyx_t_10 = __pyx_PyFloat_AsFloat(__pyx_v_value); if (unlikely((__pyx_t_10 == (npy_float32)-1) && PyErr_Occurred())) __PYX_ERR(2, 25, __pyx_L1_error)
  __pyx_v_result.w = __pyx_t_10;

  /* "FromPyStructUtility":26
 *         raise ValueError("No value specified for struct attribute 'w'")
 *     result.w = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['t']
 *     except KeyError:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_5);
    /*try:*/ {

      /* "FromPyStructUtility":27
 *     result.w = value
 *     try:
 *         value = obj['t']             # <<<<<<<<<<<<<<
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 't'")
 */
      __pyx_t_2 = PyObject_GetItem(__pyx_v_obj, __pyx_n_s_t); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 27, __pyx_L24_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF_SET(__pyx_v_value, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "FromPyStructUtility":26
 *         raise ValueError("No value specified for struct attribute 'w'")
 *     result.w = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['t']
 *     except KeyError:
 */
    }
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L31_try_end;
    __pyx_L24_error:;
    __Pyx_PyThreadState_assign
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "FromPyStructUtility":28
 *     try:
 *         value = obj['t']
 *     except KeyError:             # <<<<<<<<<<<<<<
 *         raise ValueError("No value specified for struct attribute 't'")
 *     result.t = value
 */
    __pyx_t_6 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError);
    if (__pyx_t_6) {
      __Pyx_AddTraceback("FromPyStructUtility.__pyx_convert__from_py_struct____pyx_t_5oasis_Pool", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_7, &__pyx_t_8) < 0) __PYX_ERR(2, 28, __pyx_L26_except_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GOTREF(__pyx_t_8);

      /* "FromPyStructUtility":29
 *         value = obj['t']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 't'")             # <<<<<<<<<<<<<<
 *     result.t = value
 *     try:
 */
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__34, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 29, __pyx_L26_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_Raise(__pyx_t_9, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __PYX_ERR(2, 29, __pyx_L26_except_error)
    }
    goto __pyx_L26_except_error;
    __pyx_L26_except_error:;

    /* "FromPyStructUtility":26
 *         raise ValueError("No value specified for struct attribute 'w'")
 *     result.w = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['t']
 *     except KeyError:
 */
    __Pyx_PyThreadState_assign
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    goto __pyx_L1_error;
    __pyx_L31_try_end:;
  }

  /* "FromPyStructUtility":30
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 't'")
 *     result.t = value             # <<<<<<<<<<<<<<
 *     try:
 *         value = obj['l']
 */
  __pyx_t_11 = __Pyx_PyIndex_AsSsize_t(__pyx_v_value); if (unlikely((__pyx_t_11 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 30, __pyx_L1_error)
  __pyx_v_result.t = __pyx_t_11;

  /* "FromPyStructUtility":31
 *         raise ValueError("No value specified for struct attribute 't'")
 *     result.t = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['l']
 *     except KeyError:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_4, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "FromPyStructUtility":32
 *     result.t = value
 *     try:
 *         value = obj['l']             # <<<<<<<<<<<<<<
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'l'")
 */
      __pyx_t_8 = PyObject_GetItem(__pyx_v_obj, __pyx_n_s_l); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 32, __pyx_L34_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF_SET(__pyx_v_value, __pyx_t_8);
      __pyx_t_8 = 0;

      /* "FromPyStructUtility":31
 *         raise ValueError("No value specified for struct attribute 't'")
 *     result.t = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['l']
 *     except KeyError:
 */
    }
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L41_try_end;
    __pyx_L34_error:;
    __Pyx_PyThreadState_assign
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "FromPyStructUtility":33
 *     try:
 *         value = obj['l']
 *     except KeyError:             # <<<<<<<<<<<<<<
 *         raise ValueError("No value specified for struct attribute 'l'")
 *     result.l = value
 */
    __pyx_t_6 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError);
    if (__pyx_t_6) {
      __Pyx_AddTraceback("FromPyStructUtility.__pyx_convert__from_py_struct____pyx_t_5oasis_Pool", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_8, &__pyx_t_7, &__pyx_t_2) < 0) __PYX_ERR(2, 33, __pyx_L36_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GOTREF(__pyx_t_2);

      /* "FromPyStructUtility":34
 *         value = obj['l']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'l'")             # <<<<<<<<<<<<<<
 *     result.l = value
 *     return result
 */
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__35, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 34, __pyx_L36_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_Raise(__pyx_t_9, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __PYX_ERR(2, 34, __pyx_L36_except_error)
    }
    goto __pyx_L36_except_error;
    __pyx_L36_except_error:;

    /* "FromPyStructUtility":31
 *         raise ValueError("No value specified for struct attribute 't'")
 *     result.t = value
 *     try:             # <<<<<<<<<<<<<<
 *         value = obj['l']
 *     except KeyError:
 */
    __Pyx_PyThreadState_assign
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_4, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L41_try_end:;
  }

  /* "FromPyStructUtility":35
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'l'")
 *     result.l = value             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
  __pyx_t_11 = __Pyx_PyIndex_AsSsize_t(__pyx_v_value); if (unlikely((__pyx_t_11 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 35, __pyx_L1_error)
  __pyx_v_result.l = __pyx_t_11;

  /* "FromPyStructUtility":36
 *         raise ValueError("No value specified for struct attribute 'l'")
 *     result.l = value
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "FromPyStructUtility":11
 * 
 * @cname("__pyx_convert__from_py_struct____pyx_t_5oasis_Pool")
 * cdef Pool __pyx_convert__from_py_struct____pyx_t_5oasis_Pool(obj) except *:             # <<<<<<<<<<<<<<
 *     cdef Pool result
 *     if not PyMapping_Check(obj):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("FromPyStructUtility.__pyx_convert__from_py_struct____pyx_t_5oasis_Pool", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.from_py":50
 * 
 * @cname("__pyx_convert_vector_from_py_struct____pyx_t_5oasis_Pool")
 * cdef vector[X] __pyx_convert_vector_from_py_struct____pyx_t_5oasis_Pool(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

static std::vector<struct __pyx_t_5oasis_Pool>  __pyx_convert_vector_from_py_struct____pyx_t_5oasis_Pool(PyObject *__pyx_v_o) {
  std::vector<struct __pyx_t_5oasis_Pool>  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<struct __pyx_t_5oasis_Pool>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  struct __pyx_t_5oasis_Pool __pyx_t_5;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_struct____pyx_t_5oasis_Pool", 0);

  /* "vector.from_py":52
 * cdef vector[X] __pyx_convert_vector_from_py_struct____pyx_t_5oasis_Pool(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(X_from_py(item))
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 52, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 52, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(2, 52, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 52, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(2, 52, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 52, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(2, 52, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":53
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(X_from_py(item))             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __pyx_convert__from_py_struct____pyx_t_5oasis_Pool(__pyx_v_item); if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 53, __pyx_L1_error)
    __pyx_v_v.push_back(__pyx_t_5);

    /* "vector.from_py":52
 * cdef vector[X] __pyx_convert_vector_from_py_struct____pyx_t_5oasis_Pool(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(X_from_py(item))
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":54
 *     for item in o:
 *         v.push_back(X_from_py(item))
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":50
 * 
 * @cname("__pyx_convert_vector_from_py_struct____pyx_t_5oasis_Pool")
 * cdef vector[X] __pyx_convert_vector_from_py_struct____pyx_t_5oasis_Pool(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_struct____pyx_t_5oasis_Pool", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.from_py":49
 * 
 * @cname("__pyx_convert_vector_from_py___pyx_t_5oasis_SINGLE")
 * cdef vector[X] __pyx_convert_vector_from_py___pyx_t_5oasis_SINGLE(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

static std::vector<__pyx_t_5oasis_SINGLE>  __pyx_convert_vector_from_py___pyx_t_5oasis_SINGLE(PyObject *__pyx_v_o) {
  std::vector<__pyx_t_5oasis_SINGLE>  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<__pyx_t_5oasis_SINGLE>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  __pyx_t_5oasis_SINGLE __pyx_t_5;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py___pyx_t_5oasis_SINGLE", 0);

  /* "vector.from_py":51
 * cdef vector[X] __pyx_convert_vector_from_py___pyx_t_5oasis_SINGLE(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(X_from_py(item))
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 51, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 51, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(2, 51, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 51, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(2, 51, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 51, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(2, 51, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":52
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(X_from_py(item))             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __pyx_PyFloat_AsFloat(__pyx_v_item); if (unlikely(__pyx_t_5 == -1LL && PyErr_Occurred())) __PYX_ERR(2, 52, __pyx_L1_error)
    __pyx_v_v.push_back(__pyx_t_5);

    /* "vector.from_py":51
 * cdef vector[X] __pyx_convert_vector_from_py___pyx_t_5oasis_SINGLE(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(X_from_py(item))
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":53
 *     for item in o:
 *         v.push_back(X_from_py(item))
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":49
 * 
 * @cname("__pyx_convert_vector_from_py___pyx_t_5oasis_SINGLE")
 * cdef vector[X] __pyx_convert_vector_from_py___pyx_t_5oasis_SINGLE(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py___pyx_t_5oasis_SINGLE", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":67
 * 
 * @cname("__pyx_convert_vector_to_py_struct____pyx_t_5oasis_Pool")
 * cdef object __pyx_convert_vector_to_py_struct____pyx_t_5oasis_Pool(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

static PyObject *__pyx_convert_vector_to_py_struct____pyx_t_5oasis_Pool(const std::vector<struct __pyx_t_5oasis_Pool>  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_struct____pyx_t_5oasis_Pool", 0);

  /* "vector.to_py":68
 * @cname("__pyx_convert_vector_to_py_struct____pyx_t_5oasis_Pool")
 * cdef object __pyx_convert_vector_to_py_struct____pyx_t_5oasis_Pool(vector[X]& v):
 *     return [X_to_py(v[i]) for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;
    __pyx_t_4 = __pyx_convert__to_py_struct____pyx_t_5oasis_Pool((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 68, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) __PYX_ERR(2, 68, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":67
 * 
 * @cname("__pyx_convert_vector_to_py_struct____pyx_t_5oasis_Pool")
 * cdef object __pyx_convert_vector_to_py_struct____pyx_t_5oasis_Pool(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_struct____pyx_t_5oasis_Pool", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_5oasis_OASIS(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5oasis_OASIS *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_5oasis_OASIS *)o);
  new((void*)&(p->P)) std::vector<struct __pyx_t_5oasis_Pool> ();
  new((void*)&(p->_y)) std::vector<__pyx_t_5oasis_SINGLE> ();
  return o;
}

static void __pyx_tp_dealloc_5oasis_OASIS(PyObject *o) {
  struct __pyx_obj_5oasis_OASIS *p = (struct __pyx_obj_5oasis_OASIS *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->P);
  __Pyx_call_destructor(p->_y);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_5oasis_5OASIS_P(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5oasis_5OASIS_1P_1__get__(o);
}

static PyObject *__pyx_getprop_5oasis_5OASIS_g(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5oasis_5OASIS_1g_1__get__(o);
}

static PyObject *__pyx_getprop_5oasis_5OASIS_g2(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5oasis_5OASIS_2g2_1__get__(o);
}

static PyObject *__pyx_getprop_5oasis_5OASIS_lam(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5oasis_5OASIS_3lam_1__get__(o);
}

static PyObject *__pyx_getprop_5oasis_5OASIS_s_min(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5oasis_5OASIS_5s_min_1__get__(o);
}

static PyObject *__pyx_getprop_5oasis_5OASIS_b(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5oasis_5OASIS_1b_1__get__(o);
}

static PyObject *__pyx_getprop_5oasis_5OASIS_t(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5oasis_5OASIS_1t_1__get__(o);
}

static PyObject *__pyx_getprop_5oasis_5OASIS_c(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5oasis_5OASIS_1c_1__get__(o);
}

static PyObject *__pyx_getprop_5oasis_5OASIS_s(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_5oasis_5OASIS_1s_1__get__(o);
}

static PyMethodDef __pyx_methods_5oasis_OASIS[] = {
  {"fit_next", (PyCFunction)__pyx_pw_5oasis_5OASIS_3fit_next, METH_O, __pyx_doc_5oasis_5OASIS_2fit_next},
  {"fit_next_tmp", (PyCFunction)__pyx_pw_5oasis_5OASIS_5fit_next_tmp, METH_VARARGS|METH_KEYWORDS, __pyx_doc_5oasis_5OASIS_4fit_next_tmp},
  {"fit", (PyCFunction)__pyx_pw_5oasis_5OASIS_7fit, METH_O, __pyx_doc_5oasis_5OASIS_6fit},
  {"get_c", (PyCFunction)__pyx_pw_5oasis_5OASIS_9get_c, METH_O, __pyx_doc_5oasis_5OASIS_8get_c},
  {"get_s", (PyCFunction)__pyx_pw_5oasis_5OASIS_11get_s, METH_O, __pyx_doc_5oasis_5OASIS_10get_s},
  {"get_l_of_last_pool", (PyCFunction)__pyx_pw_5oasis_5OASIS_13get_l_of_last_pool, METH_NOARGS, __pyx_doc_5oasis_5OASIS_12get_l_of_last_pool},
  {"get_c_of_last_pool", (PyCFunction)__pyx_pw_5oasis_5OASIS_15get_c_of_last_pool, METH_NOARGS, __pyx_doc_5oasis_5OASIS_14get_c_of_last_pool},
  {"remove_last_pool", (PyCFunction)__pyx_pw_5oasis_5OASIS_17remove_last_pool, METH_NOARGS, 0},
  {"get_l_of_pool", (PyCFunction)__pyx_pw_5oasis_5OASIS_19get_l_of_pool, METH_VARARGS|METH_KEYWORDS, 0},
  {"set_poolvalue", (PyCFunction)__pyx_pw_5oasis_5OASIS_21set_poolvalue, METH_VARARGS|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_5oasis_OASIS[] = {
  {(char *)"P", __pyx_getprop_5oasis_5OASIS_P, 0, (char *)0, 0},
  {(char *)"g", __pyx_getprop_5oasis_5OASIS_g, 0, (char *)0, 0},
  {(char *)"g2", __pyx_getprop_5oasis_5OASIS_g2, 0, (char *)0, 0},
  {(char *)"lam", __pyx_getprop_5oasis_5OASIS_lam, 0, (char *)0, 0},
  {(char *)"s_min", __pyx_getprop_5oasis_5OASIS_s_min, 0, (char *)0, 0},
  {(char *)"b", __pyx_getprop_5oasis_5OASIS_b, 0, (char *)0, 0},
  {(char *)"t", __pyx_getprop_5oasis_5OASIS_t, 0, (char *)0, 0},
  {(char *)"c", __pyx_getprop_5oasis_5OASIS_c, 0, (char *)"\n        construct and return full calcium trace\n        ", 0},
  {(char *)"s", __pyx_getprop_5oasis_5OASIS_s, 0, (char *)"\n        construct and return full deconvolved activity, 'spike rates'\n        ", 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_5oasis_OASIS = {
  PyVarObject_HEAD_INIT(0, 0)
  "oasis.OASIS", /*tp_name*/
  sizeof(struct __pyx_obj_5oasis_OASIS), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5oasis_OASIS, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "\n    Deconvolution class implementing OASIS\n    Infer the most likely discretized spike train underlying an AR(1) fluorescence trace\n\n    Solves the sparse non-negative deconvolution problem\n    min 1/2|c-y|^2 + lam |s|_1 subject to s_t = c_t-g c_{t-1} >=s_min or =0\n\n    Parameters\n    ----------\n    g : float\n        Parameter of the AR(1) or 1st parameter of the AR(2) process that models the fluorescence impulse response.\n    lam : float, optional, default 0\n        Sparsity penalty parameter lambda.\n    s_min : float, optional, default 0\n        Minimal non-zero activity within each bin (minimal 'spike size').\n    b : float, optional, default 0\n        Baseline that is substracted.\n    num_empty_samples : int\n        Number of elapsed frames until neuron is added and OASIS initialized\n    g2 : float\n        0 for AR(1) or 2nd parameter of the AR(2) process that models the fluorescence impulse response.\n\n\n    Attributes\n    ----------\n    g, lam, smin, b: see Parameters above\n    p : order of the AR process\n    P : vector of struct of (float, float, int, int)\n        Pools of the active set method, i.e. a sufficient statistics.\n    t : int\n        Number of processed time steps.\n    h : array of float\n        Explicit calcium kernel to avoid duplicated recalculations.\n    d : float\n        Decay factor. Only for AR(2).\n    r : float\n        Rise factor. Only for AR(2).\n    g12, g11g11, g11g12 : arrays of float\n        Precomputed quantitites related to the calcium kernel. Only for AR(2).\n\n    References\n    ----------\n    * Friedrich J and Paninski L, NIPS 2016\n    * Friedrich J, Zhou P, and Paninski L, PLOS Computational Biology 2017\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_5oasis_OASIS, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_5oasis_OASIS, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_5oasis_5OASIS_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5oasis_OASIS, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_5oasis___pyx_scope_struct__constrained_oasisAR1 *__pyx_freelist_5oasis___pyx_scope_struct__constrained_oasisAR1[8];
static int __pyx_freecount_5oasis___pyx_scope_struct__constrained_oasisAR1 = 0;

static PyObject *__pyx_tp_new_5oasis___pyx_scope_struct__constrained_oasisAR1(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_5oasis___pyx_scope_struct__constrained_oasisAR1 *p;
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5oasis___pyx_scope_struct__constrained_oasisAR1 > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5oasis___pyx_scope_struct__constrained_oasisAR1)))) {
    o = (PyObject*)__pyx_freelist_5oasis___pyx_scope_struct__constrained_oasisAR1[--__pyx_freecount_5oasis___pyx_scope_struct__constrained_oasisAR1];
    memset(o, 0, sizeof(struct __pyx_obj_5oasis___pyx_scope_struct__constrained_oasisAR1));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  p = ((struct __pyx_obj_5oasis___pyx_scope_struct__constrained_oasisAR1 *)o);
  new((void*)&(p->__pyx_v_P)) std::vector<struct __pyx_t_5oasis_Pool> ();
  return o;
}

static void __pyx_tp_dealloc_5oasis___pyx_scope_struct__constrained_oasisAR1(PyObject *o) {
  struct __pyx_obj_5oasis___pyx_scope_struct__constrained_oasisAR1 *p = (struct __pyx_obj_5oasis___pyx_scope_struct__constrained_oasisAR1 *)o;
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->__pyx_v_P);
  Py_CLEAR(p->__pyx_v_b_nonneg);
  Py_CLEAR(p->__pyx_v_bar);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5oasis___pyx_scope_struct__constrained_oasisAR1 < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5oasis___pyx_scope_struct__constrained_oasisAR1)))) {
    __pyx_freelist_5oasis___pyx_scope_struct__constrained_oasisAR1[__pyx_freecount_5oasis___pyx_scope_struct__constrained_oasisAR1++] = ((struct __pyx_obj_5oasis___pyx_scope_struct__constrained_oasisAR1 *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5oasis___pyx_scope_struct__constrained_oasisAR1(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5oasis___pyx_scope_struct__constrained_oasisAR1 *p = (struct __pyx_obj_5oasis___pyx_scope_struct__constrained_oasisAR1 *)o;
  if (p->__pyx_v_b_nonneg) {
    e = (*v)(((PyObject*)p->__pyx_v_b_nonneg), a); if (e) return e;
  }
  if (p->__pyx_v_bar) {
    e = (*v)(p->__pyx_v_bar, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5oasis___pyx_scope_struct__constrained_oasisAR1(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5oasis___pyx_scope_struct__constrained_oasisAR1 *p = (struct __pyx_obj_5oasis___pyx_scope_struct__constrained_oasisAR1 *)o;
  tmp = ((PyObject*)p->__pyx_v_b_nonneg);
  p->__pyx_v_b_nonneg = ((PyBoolObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_bar);
  p->__pyx_v_bar = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_5oasis___pyx_scope_struct__constrained_oasisAR1 = {
  PyVarObject_HEAD_INIT(0, 0)
  "oasis.__pyx_scope_struct__constrained_oasisAR1", /*tp_name*/
  sizeof(struct __pyx_obj_5oasis___pyx_scope_struct__constrained_oasisAR1), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5oasis___pyx_scope_struct__constrained_oasisAR1, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5oasis___pyx_scope_struct__constrained_oasisAR1, /*tp_traverse*/
  __pyx_tp_clear_5oasis___pyx_scope_struct__constrained_oasisAR1, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5oasis___pyx_scope_struct__constrained_oasisAR1, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_5oasis___pyx_scope_struct_1_baz *__pyx_freelist_5oasis___pyx_scope_struct_1_baz[8];
static int __pyx_freecount_5oasis___pyx_scope_struct_1_baz = 0;

static PyObject *__pyx_tp_new_5oasis___pyx_scope_struct_1_baz(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5oasis___pyx_scope_struct_1_baz > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5oasis___pyx_scope_struct_1_baz)))) {
    o = (PyObject*)__pyx_freelist_5oasis___pyx_scope_struct_1_baz[--__pyx_freecount_5oasis___pyx_scope_struct_1_baz];
    memset(o, 0, sizeof(struct __pyx_obj_5oasis___pyx_scope_struct_1_baz));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5oasis___pyx_scope_struct_1_baz(PyObject *o) {
  struct __pyx_obj_5oasis___pyx_scope_struct_1_baz *p = (struct __pyx_obj_5oasis___pyx_scope_struct_1_baz *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_Pl);
  Py_CLEAR(p->__pyx_v_Pt);
  Py_CLEAR(p->__pyx_v_y);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5oasis___pyx_scope_struct_1_baz < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5oasis___pyx_scope_struct_1_baz)))) {
    __pyx_freelist_5oasis___pyx_scope_struct_1_baz[__pyx_freecount_5oasis___pyx_scope_struct_1_baz++] = ((struct __pyx_obj_5oasis___pyx_scope_struct_1_baz *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5oasis___pyx_scope_struct_1_baz(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5oasis___pyx_scope_struct_1_baz *p = (struct __pyx_obj_5oasis___pyx_scope_struct_1_baz *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject*)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_Pl) {
    e = (*v)(p->__pyx_v_Pl, a); if (e) return e;
  }
  if (p->__pyx_v_Pt) {
    e = (*v)(p->__pyx_v_Pt, a); if (e) return e;
  }
  if (p->__pyx_v_y) {
    e = (*v)(p->__pyx_v_y, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5oasis___pyx_scope_struct_1_baz(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5oasis___pyx_scope_struct_1_baz *p = (struct __pyx_obj_5oasis___pyx_scope_struct_1_baz *)o;
  tmp = ((PyObject*)p->__pyx_outer_scope);
  p->__pyx_outer_scope = ((struct __pyx_obj_5oasis___pyx_scope_struct__constrained_oasisAR1 *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_Pl);
  p->__pyx_v_Pl = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_Pt);
  p->__pyx_v_Pt = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_y);
  p->__pyx_v_y = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_5oasis___pyx_scope_struct_1_baz = {
  PyVarObject_HEAD_INIT(0, 0)
  "oasis.__pyx_scope_struct_1_baz", /*tp_name*/
  sizeof(struct __pyx_obj_5oasis___pyx_scope_struct_1_baz), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5oasis___pyx_scope_struct_1_baz, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5oasis___pyx_scope_struct_1_baz, /*tp_traverse*/
  __pyx_tp_clear_5oasis___pyx_scope_struct_1_baz, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5oasis___pyx_scope_struct_1_baz, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_5oasis___pyx_scope_struct_2_baz *__pyx_freelist_5oasis___pyx_scope_struct_2_baz[8];
static int __pyx_freecount_5oasis___pyx_scope_struct_2_baz = 0;

static PyObject *__pyx_tp_new_5oasis___pyx_scope_struct_2_baz(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_5oasis___pyx_scope_struct_2_baz > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_5oasis___pyx_scope_struct_2_baz)))) {
    o = (PyObject*)__pyx_freelist_5oasis___pyx_scope_struct_2_baz[--__pyx_freecount_5oasis___pyx_scope_struct_2_baz];
    memset(o, 0, sizeof(struct __pyx_obj_5oasis___pyx_scope_struct_2_baz));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_5oasis___pyx_scope_struct_2_baz(PyObject *o) {
  struct __pyx_obj_5oasis___pyx_scope_struct_2_baz *p = (struct __pyx_obj_5oasis___pyx_scope_struct_2_baz *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_Pl);
  Py_CLEAR(p->__pyx_v_Pt);
  Py_CLEAR(p->__pyx_v_y);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_5oasis___pyx_scope_struct_2_baz < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_5oasis___pyx_scope_struct_2_baz)))) {
    __pyx_freelist_5oasis___pyx_scope_struct_2_baz[__pyx_freecount_5oasis___pyx_scope_struct_2_baz++] = ((struct __pyx_obj_5oasis___pyx_scope_struct_2_baz *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_5oasis___pyx_scope_struct_2_baz(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_5oasis___pyx_scope_struct_2_baz *p = (struct __pyx_obj_5oasis___pyx_scope_struct_2_baz *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject*)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_Pl) {
    e = (*v)(p->__pyx_v_Pl, a); if (e) return e;
  }
  if (p->__pyx_v_Pt) {
    e = (*v)(p->__pyx_v_Pt, a); if (e) return e;
  }
  if (p->__pyx_v_y) {
    e = (*v)(p->__pyx_v_y, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_5oasis___pyx_scope_struct_2_baz(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_5oasis___pyx_scope_struct_2_baz *p = (struct __pyx_obj_5oasis___pyx_scope_struct_2_baz *)o;
  tmp = ((PyObject*)p->__pyx_outer_scope);
  p->__pyx_outer_scope = ((struct __pyx_obj_5oasis___pyx_scope_struct__constrained_oasisAR1 *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_Pl);
  p->__pyx_v_Pl = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_Pt);
  p->__pyx_v_Pt = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_y);
  p->__pyx_v_y = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_5oasis___pyx_scope_struct_2_baz = {
  PyVarObject_HEAD_INIT(0, 0)
  "oasis.__pyx_scope_struct_2_baz", /*tp_name*/
  sizeof(struct __pyx_obj_5oasis___pyx_scope_struct_2_baz), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_5oasis___pyx_scope_struct_2_baz, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_5oasis___pyx_scope_struct_2_baz, /*tp_traverse*/
  __pyx_tp_clear_5oasis___pyx_scope_struct_2_baz, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_5oasis___pyx_scope_struct_2_baz, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "oasis",
    __pyx_k_Extract_neural_activity_from_a_f, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_u_Format_string_allocated_too_shor, __pyx_k_Format_string_allocated_too_shor, sizeof(__pyx_k_Format_string_allocated_too_shor), 0, 1, 0, 0},
  {&__pyx_kp_u_Format_string_allocated_too_shor_2, __pyx_k_Format_string_allocated_too_shor_2, sizeof(__pyx_k_Format_string_allocated_too_shor_2), 0, 1, 0, 0},
  {&__pyx_n_s_KeyError, __pyx_k_KeyError, sizeof(__pyx_k_KeyError), 0, 0, 1, 1},
  {&__pyx_kp_s_L_BFGS_B, __pyx_k_L_BFGS_B, sizeof(__pyx_k_L_BFGS_B), 0, 0, 1, 0},
  {&__pyx_kp_s_No_value_specified_for_struct_at, __pyx_k_No_value_specified_for_struct_at, sizeof(__pyx_k_No_value_specified_for_struct_at), 0, 0, 1, 0},
  {&__pyx_kp_s_No_value_specified_for_struct_at_2, __pyx_k_No_value_specified_for_struct_at_2, sizeof(__pyx_k_No_value_specified_for_struct_at_2), 0, 0, 1, 0},
  {&__pyx_kp_s_No_value_specified_for_struct_at_3, __pyx_k_No_value_specified_for_struct_at_3, sizeof(__pyx_k_No_value_specified_for_struct_at_3), 0, 0, 1, 0},
  {&__pyx_kp_s_No_value_specified_for_struct_at_4, __pyx_k_No_value_specified_for_struct_at_4, sizeof(__pyx_k_No_value_specified_for_struct_at_4), 0, 0, 1, 0},
  {&__pyx_kp_u_Non_native_byte_order_not_suppor, __pyx_k_Non_native_byte_order_not_suppor, sizeof(__pyx_k_Non_native_byte_order_not_suppor), 0, 1, 0, 0},
  {&__pyx_n_s_P, __pyx_k_P, sizeof(__pyx_k_P), 0, 0, 1, 1},
  {&__pyx_n_s_Pl, __pyx_k_Pl, sizeof(__pyx_k_Pl), 0, 0, 1, 1},
  {&__pyx_n_s_Pt, __pyx_k_Pt, sizeof(__pyx_k_Pt), 0, 0, 1, 1},
  {&__pyx_n_s_RSS, __pyx_k_RSS, sizeof(__pyx_k_RSS), 0, 0, 1, 1},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_n_s_T, __pyx_k_T, sizeof(__pyx_k_T), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s_aa, __pyx_k_aa, sizeof(__pyx_k_aa), 0, 0, 1, 1},
  {&__pyx_n_s_append, __pyx_k_append, sizeof(__pyx_k_append), 0, 0, 1, 1},
  {&__pyx_n_s_arange, __pyx_k_arange, sizeof(__pyx_k_arange), 0, 0, 1, 1},
  {&__pyx_n_s_argsort, __pyx_k_argsort, sizeof(__pyx_k_argsort), 0, 0, 1, 1},
  {&__pyx_n_s_b, __pyx_k_b, sizeof(__pyx_k_b), 0, 0, 1, 1},
  {&__pyx_n_s_b_nonneg, __pyx_k_b_nonneg, sizeof(__pyx_k_b_nonneg), 0, 0, 1, 1},
  {&__pyx_n_s_bar, __pyx_k_bar, sizeof(__pyx_k_bar), 0, 0, 1, 1},
  {&__pyx_n_s_baz, __pyx_k_baz, sizeof(__pyx_k_baz), 0, 0, 1, 1},
  {&__pyx_n_s_bb, __pyx_k_bb, sizeof(__pyx_k_bb), 0, 0, 1, 1},
  {&__pyx_n_s_bounds, __pyx_k_bounds, sizeof(__pyx_k_bounds), 0, 0, 1, 1},
  {&__pyx_n_s_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 0, 1, 1},
  {&__pyx_n_s_cc, __pyx_k_cc, sizeof(__pyx_k_cc), 0, 0, 1, 1},
  {&__pyx_n_s_constrained_oasisAR1, __pyx_k_constrained_oasisAR1, sizeof(__pyx_k_constrained_oasisAR1), 0, 0, 1, 1},
  {&__pyx_n_s_constrained_oasisAR1_locals_bar, __pyx_k_constrained_oasisAR1_locals_bar, sizeof(__pyx_k_constrained_oasisAR1_locals_bar), 0, 0, 1, 1},
  {&__pyx_n_s_constrained_oasisAR1_locals_bar_2, __pyx_k_constrained_oasisAR1_locals_bar_2, sizeof(__pyx_k_constrained_oasisAR1_locals_bar_2), 0, 0, 1, 1},
  {&__pyx_n_s_constrained_oasisAR1_locals_baz, __pyx_k_constrained_oasisAR1_locals_baz, sizeof(__pyx_k_constrained_oasisAR1_locals_baz), 0, 0, 1, 1},
  {&__pyx_n_s_constrained_oasisAR1_locals_baz_2, __pyx_k_constrained_oasisAR1_locals_baz_2, sizeof(__pyx_k_constrained_oasisAR1_locals_baz_2), 0, 0, 1, 1},
  {&__pyx_n_s_constrained_oasisAR1_locals_oasi, __pyx_k_constrained_oasisAR1_locals_oasi, sizeof(__pyx_k_constrained_oasisAR1_locals_oasi), 0, 0, 1, 1},
  {&__pyx_n_s_constrained_oasisAR1_locals_oasi_2, __pyx_k_constrained_oasisAR1_locals_oasi_2, sizeof(__pyx_k_constrained_oasisAR1_locals_oasi_2), 0, 0, 1, 1},
  {&__pyx_n_s_copy, __pyx_k_copy, sizeof(__pyx_k_copy), 0, 0, 1, 1},
  {&__pyx_n_s_count, __pyx_k_count, sizeof(__pyx_k_count), 0, 0, 1, 1},
  {&__pyx_n_s_db, __pyx_k_db, sizeof(__pyx_k_db), 0, 0, 1, 1},
  {&__pyx_n_s_decimate, __pyx_k_decimate, sizeof(__pyx_k_decimate), 0, 0, 1, 1},
  {&__pyx_n_s_dlam, __pyx_k_dlam, sizeof(__pyx_k_dlam), 0, 0, 1, 1},
  {&__pyx_n_s_dot, __pyx_k_dot, sizeof(__pyx_k_dot), 0, 0, 1, 1},
  {&__pyx_n_s_dphi, __pyx_k_dphi, sizeof(__pyx_k_dphi), 0, 0, 1, 1},
  {&__pyx_n_s_dtype, __pyx_k_dtype, sizeof(__pyx_k_dtype), 0, 0, 1, 1},
  {&__pyx_n_s_empty, __pyx_k_empty, sizeof(__pyx_k_empty), 0, 0, 1, 1},
  {&__pyx_n_s_exp, __pyx_k_exp, sizeof(__pyx_k_exp), 0, 0, 1, 1},
  {&__pyx_n_s_ff, __pyx_k_ff, sizeof(__pyx_k_ff), 0, 0, 1, 1},
  {&__pyx_n_s_fit_next, __pyx_k_fit_next, sizeof(__pyx_k_fit_next), 0, 0, 1, 1},
  {&__pyx_n_s_float32, __pyx_k_float32, sizeof(__pyx_k_float32), 0, 0, 1, 1},
  {&__pyx_n_s_fluor, __pyx_k_fluor, sizeof(__pyx_k_fluor), 0, 0, 1, 1},
  {&__pyx_n_s_fminbound, __pyx_k_fminbound, sizeof(__pyx_k_fminbound), 0, 0, 1, 1},
  {&__pyx_n_s_foo, __pyx_k_foo, sizeof(__pyx_k_foo), 0, 0, 1, 1},
  {&__pyx_n_s_ftol, __pyx_k_ftol, sizeof(__pyx_k_ftol), 0, 0, 1, 1},
  {&__pyx_n_s_g, __pyx_k_g, sizeof(__pyx_k_g), 0, 0, 1, 1},
  {&__pyx_n_s_g2, __pyx_k_g2, sizeof(__pyx_k_g2), 0, 0, 1, 1},
  {&__pyx_n_s_g_converged, __pyx_k_g_converged, sizeof(__pyx_k_g_converged), 0, 0, 1, 1},
  {&__pyx_n_s_get_s, __pyx_k_get_s, sizeof(__pyx_k_get_s), 0, 0, 1, 1},
  {&__pyx_n_s_gtol, __pyx_k_gtol, sizeof(__pyx_k_gtol), 0, 0, 1, 1},
  {&__pyx_n_s_h, __pyx_k_h, sizeof(__pyx_k_h), 0, 0, 1, 1},
  {&__pyx_kp_s_home_cat_code_caimin_CaimAn_oas, __pyx_k_home_cat_code_caimin_CaimAn_oas, sizeof(__pyx_k_home_cat_code_caimin_CaimAn_oas), 0, 0, 1, 0},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_n_s_idx, __pyx_k_idx, sizeof(__pyx_k_idx), 0, 0, 1, 1},
  {&__pyx_n_s_idx_from_end, __pyx_k_idx_from_end, sizeof(__pyx_k_idx_from_end), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_inf, __pyx_k_inf, sizeof(__pyx_k_inf), 0, 0, 1, 1},
  {&__pyx_n_s_j, __pyx_k_j, sizeof(__pyx_k_j), 0, 0, 1, 1},
  {&__pyx_n_s_k, __pyx_k_k, sizeof(__pyx_k_k), 0, 0, 1, 1},
  {&__pyx_n_s_l, __pyx_k_l, sizeof(__pyx_k_l), 0, 0, 1, 1},
  {&__pyx_n_s_lam, __pyx_k_lam, sizeof(__pyx_k_lam), 0, 0, 1, 1},
  {&__pyx_n_s_ll, __pyx_k_ll, sizeof(__pyx_k_ll), 0, 0, 1, 1},
  {&__pyx_n_s_lls, __pyx_k_lls, sizeof(__pyx_k_lls), 0, 0, 1, 1},
  {&__pyx_n_s_ma, __pyx_k_ma, sizeof(__pyx_k_ma), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_max, __pyx_k_max, sizeof(__pyx_k_max), 0, 0, 1, 1},
  {&__pyx_n_s_max_iter, __pyx_k_max_iter, sizeof(__pyx_k_max_iter), 0, 0, 1, 1},
  {&__pyx_n_s_maxfun, __pyx_k_maxfun, sizeof(__pyx_k_maxfun), 0, 0, 1, 1},
  {&__pyx_n_s_maxiter, __pyx_k_maxiter, sizeof(__pyx_k_maxiter), 0, 0, 1, 1},
  {&__pyx_n_s_mean, __pyx_k_mean, sizeof(__pyx_k_mean), 0, 0, 1, 1},
  {&__pyx_n_s_method, __pyx_k_method, sizeof(__pyx_k_method), 0, 0, 1, 1},
  {&__pyx_n_s_minimize, __pyx_k_minimize, sizeof(__pyx_k_minimize), 0, 0, 1, 1},
  {&__pyx_kp_u_ndarray_is_not_C_contiguous, __pyx_k_ndarray_is_not_C_contiguous, sizeof(__pyx_k_ndarray_is_not_C_contiguous), 0, 1, 0, 0},
  {&__pyx_kp_u_ndarray_is_not_Fortran_contiguou, __pyx_k_ndarray_is_not_Fortran_contiguou, sizeof(__pyx_k_ndarray_is_not_Fortran_contiguou), 0, 1, 0, 0},
  {&__pyx_n_s_newpool, __pyx_k_newpool, sizeof(__pyx_k_newpool), 0, 0, 1, 1},
  {&__pyx_n_s_np, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
  {&__pyx_n_s_num, __pyx_k_num, sizeof(__pyx_k_num), 0, 0, 1, 1},
  {&__pyx_n_s_num_empty_samples, __pyx_k_num_empty_samples, sizeof(__pyx_k_num_empty_samples), 0, 0, 1, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_n_s_oasis, __pyx_k_oasis, sizeof(__pyx_k_oasis), 0, 0, 1, 1},
  {&__pyx_n_s_oasis1strun, __pyx_k_oasis1strun, sizeof(__pyx_k_oasis1strun), 0, 0, 1, 1},
  {&__pyx_n_s_oasisAR1, __pyx_k_oasisAR1, sizeof(__pyx_k_oasisAR1), 0, 0, 1, 1},
  {&__pyx_n_s_opt, __pyx_k_opt, sizeof(__pyx_k_opt), 0, 0, 1, 1},
  {&__pyx_n_s_optimize_b, __pyx_k_optimize_b, sizeof(__pyx_k_optimize_b), 0, 0, 1, 1},
  {&__pyx_n_s_optimize_g, __pyx_k_optimize_g, sizeof(__pyx_k_optimize_g), 0, 0, 1, 1},
  {&__pyx_n_s_options, __pyx_k_options, sizeof(__pyx_k_options), 0, 0, 1, 1},
  {&__pyx_n_s_p, __pyx_k_p, sizeof(__pyx_k_p), 0, 0, 1, 1},
  {&__pyx_n_s_penalty, __pyx_k_penalty, sizeof(__pyx_k_penalty), 0, 0, 1, 1},
  {&__pyx_n_s_percentile, __pyx_k_percentile, sizeof(__pyx_k_percentile), 0, 0, 1, 1},
  {&__pyx_n_s_pos, __pyx_k_pos, sizeof(__pyx_k_pos), 0, 0, 1, 1},
  {&__pyx_n_s_q, __pyx_k_q, sizeof(__pyx_k_q), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_ravel, __pyx_k_ravel, sizeof(__pyx_k_ravel), 0, 0, 1, 1},
  {&__pyx_n_s_res, __pyx_k_res, sizeof(__pyx_k_res), 0, 0, 1, 1},
  {&__pyx_n_s_reshape, __pyx_k_reshape, sizeof(__pyx_k_reshape), 0, 0, 1, 1},
  {&__pyx_n_s_result, __pyx_k_result, sizeof(__pyx_k_result), 0, 0, 1, 1},
  {&__pyx_n_s_s, __pyx_k_s, sizeof(__pyx_k_s), 0, 0, 1, 1},
  {&__pyx_n_s_s_min, __pyx_k_s_min, sizeof(__pyx_k_s_min), 0, 0, 1, 1},
  {&__pyx_n_s_scipy_optimize, __pyx_k_scipy_optimize, sizeof(__pyx_k_scipy_optimize), 0, 0, 1, 1},
  {&__pyx_n_s_sn, __pyx_k_sn, sizeof(__pyx_k_sn), 0, 0, 1, 1},
  {&__pyx_n_s_sum, __pyx_k_sum, sizeof(__pyx_k_sum), 0, 0, 1, 1},
  {&__pyx_n_s_t, __pyx_k_t, sizeof(__pyx_k_t), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_thresh, __pyx_k_thresh, sizeof(__pyx_k_thresh), 0, 0, 1, 1},
  {&__pyx_n_s_tmp, __pyx_k_tmp, sizeof(__pyx_k_tmp), 0, 0, 1, 1},
  {&__pyx_n_s_unique, __pyx_k_unique, sizeof(__pyx_k_unique), 0, 0, 1, 1},
  {&__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_k_unknown_dtype_code_in_numpy_pxd, sizeof(__pyx_k_unknown_dtype_code_in_numpy_pxd), 0, 1, 0, 0},
  {&__pyx_n_s_v, __pyx_k_v, sizeof(__pyx_k_v), 0, 0, 1, 1},
  {&__pyx_n_s_val, __pyx_k_val, sizeof(__pyx_k_val), 0, 0, 1, 1},
  {&__pyx_n_s_w, __pyx_k_w, sizeof(__pyx_k_w), 0, 0, 1, 1},
  {&__pyx_n_s_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
  {&__pyx_n_s_xtol, __pyx_k_xtol, sizeof(__pyx_k_xtol), 0, 0, 1, 1},
  {&__pyx_n_s_y, __pyx_k_y, sizeof(__pyx_k_y), 0, 0, 1, 1},
  {&__pyx_n_s_yt, __pyx_k_yt, sizeof(__pyx_k_yt), 0, 0, 1, 1},
  {&__pyx_n_s_yt_2, __pyx_k_yt_2, sizeof(__pyx_k_yt_2), 0, 0, 1, 1},
  {&__pyx_n_s_yy, __pyx_k_yy, sizeof(__pyx_k_yy), 0, 0, 1, 1},
  {&__pyx_n_s_zeros, __pyx_k_zeros, sizeof(__pyx_k_zeros), 0, 0, 1, 1},
  {&__pyx_n_s_zeros_like, __pyx_k_zeros_like, sizeof(__pyx_k_zeros_like), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 99, __pyx_L1_error)
  __pyx_builtin_max = __Pyx_GetBuiltinName(__pyx_n_s_max); if (!__pyx_builtin_max) __PYX_ERR(0, 833, __pyx_L1_error)
  __pyx_builtin_sum = __Pyx_GetBuiltinName(__pyx_n_s_sum); if (!__pyx_builtin_sum) __PYX_ERR(0, 850, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(1, 218, __pyx_L1_error)
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) __PYX_ERR(1, 799, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(2, 14, __pyx_L1_error)
  __pyx_builtin_KeyError = __Pyx_GetBuiltinName(__pyx_n_s_KeyError); if (!__pyx_builtin_KeyError) __PYX_ERR(2, 18, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "oasis.pyx":654
 *     s = c.copy()
 *     s[0] = 0
 *     s[1:] -= g * c[:-1]             # <<<<<<<<<<<<<<
 *     return c, s
 * 
 */
  __pyx_slice_ = PySlice_New(__pyx_int_1, Py_None, Py_None); if (unlikely(!__pyx_slice_)) __PYX_ERR(0, 654, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice_);
  __Pyx_GIVEREF(__pyx_slice_);
  __pyx_slice__2 = PySlice_New(Py_None, __pyx_int_neg_1, Py_None); if (unlikely(!__pyx_slice__2)) __PYX_ERR(0, 654, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__2);
  __Pyx_GIVEREF(__pyx_slice__2);

  /* "oasis.pyx":841
 *                     h = np.exp(log(g) * np.arange(ma, dtype=np.float32))
 * 
 *                     def foo(y, t, l, q, g, lam=lam):             # <<<<<<<<<<<<<<
 *                         yy = y[t:t + l]
 *                         if t + l == T:  # |s|_1 instead |c|_1
 */
  __pyx_tuple__3 = PyTuple_Pack(8, __pyx_n_s_y, __pyx_n_s_t, __pyx_n_s_l, __pyx_n_s_q, __pyx_n_s_g, __pyx_n_s_lam, __pyx_n_s_yy, __pyx_n_s_tmp); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 841, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);
  __pyx_codeobj__4 = (PyObject*)__Pyx_PyCode_New(6, 0, 8, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__3, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_cat_code_caimin_CaimAn_oas, __pyx_n_s_foo, 841, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__4)) __PYX_ERR(0, 841, __pyx_L1_error)

  /* "oasis.pyx":941
 *                     h = np.exp(log(g) * np.arange(ma, dtype=np.float32))
 * 
 *                     def foo(y, t, l, q, b, g, lam=lam):             # <<<<<<<<<<<<<<
 *                         yy = y[t:t + l] - b
 *                         if t + l == T:  # |s|_1 instead |c|_1
 */
  __pyx_tuple__5 = PyTuple_Pack(9, __pyx_n_s_y, __pyx_n_s_t, __pyx_n_s_l, __pyx_n_s_q, __pyx_n_s_b, __pyx_n_s_g, __pyx_n_s_lam, __pyx_n_s_yy, __pyx_n_s_tmp); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 941, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);
  __pyx_codeobj__6 = (PyObject*)__Pyx_PyCode_New(7, 0, 9, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__5, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_cat_code_caimin_CaimAn_oas, __pyx_n_s_foo, 941, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__6)) __PYX_ERR(0, 941, __pyx_L1_error)

  /* "oasis.pyx":955
 *                 def baz(y, Pt, Pl):
 *                     return minimize(lambda x: bar(y, x, Pt, Pl), (b, g),
 *                                     bounds=((0 if b_nonneg else None, None), (.001, .999)),             # <<<<<<<<<<<<<<
 *                                     method='L-BFGS-B',
 *                                     options={'gtol': 1e-04, 'maxiter': 3, 'ftol': 1e-05})
 */
  __pyx_tuple__7 = PyTuple_Pack(2, __pyx_float__001, __pyx_float__999); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 955, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "oasis.pyx":723
 *     if decimate > 1:  # parameter changes due to downsampling
 *         fluor = y.copy()
 *         y = y.reshape(-1, decimate).mean(1)             # <<<<<<<<<<<<<<
 *         g = g**decimate
 *         thresh = thresh / decimate / decimate
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 723, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "oasis.pyx":733
 *     lam = 0  # sn/sqrt(1-g*g)
 * 
 *     def oasis1strun(np.ndarray[SINGLE, ndim=1] y, SINGLE g, np.ndarray[SINGLE, ndim=1] c):             # <<<<<<<<<<<<<<
 * 
 *         cdef:
 */
  __pyx_tuple__9 = PyTuple_Pack(11, __pyx_n_s_y, __pyx_n_s_g, __pyx_n_s_c, __pyx_n_s_i, __pyx_n_s_j, __pyx_n_s_k, __pyx_n_s_t, __pyx_n_s_T, __pyx_n_s_tmp, __pyx_n_s_P, __pyx_n_s_newpool); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(0, 733, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);
  __pyx_codeobj__10 = (PyObject*)__Pyx_PyCode_New(3, 0, 11, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__9, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_cat_code_caimin_CaimAn_oas, __pyx_n_s_oasis1strun, 733, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__10)) __PYX_ERR(0, 733, __pyx_L1_error)

  /* "oasis.pyx":772
 *         return c, P
 * 
 *     def oasis(vector[Pool] P, SINGLE g, np.ndarray[SINGLE, ndim=1] c):             # <<<<<<<<<<<<<<
 * 
 *         cdef:
 */
  __pyx_tuple__11 = PyTuple_Pack(7, __pyx_n_s_P, __pyx_n_s_g, __pyx_n_s_c, __pyx_n_s_i, __pyx_n_s_j, __pyx_n_s_k, __pyx_n_s_tmp); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(0, 772, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);
  __pyx_codeobj__12 = (PyObject*)__Pyx_PyCode_New(3, 0, 7, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__11, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_cat_code_caimin_CaimAn_oas, __pyx_n_s_oasis, 772, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__12)) __PYX_ERR(0, 772, __pyx_L1_error)

  /* "oasis.pyx":838
 *                 Pl = [P[i].l for i in idx[-optimize_g:]]
 * 
 *                 def bar(y, g, Pt, Pl):             # <<<<<<<<<<<<<<
 *                     h = np.exp(log(g) * np.arange(ma, dtype=np.float32))
 * 
 */
  __pyx_tuple__13 = PyTuple_Pack(8, __pyx_n_s_y, __pyx_n_s_g, __pyx_n_s_Pt, __pyx_n_s_Pl, __pyx_n_s_h, __pyx_n_s_foo, __pyx_n_s_foo, __pyx_n_s_i); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(0, 838, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);
  __pyx_codeobj__14 = (PyObject*)__Pyx_PyCode_New(4, 0, 8, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__13, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_cat_code_caimin_CaimAn_oas, __pyx_n_s_bar, 838, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__14)) __PYX_ERR(0, 838, __pyx_L1_error)

  /* "oasis.pyx":853
 *                                 for i in range(optimize_g)])
 * 
 *                 def baz(y, Pt, Pl):             # <<<<<<<<<<<<<<
 *                     # minimizes residual
 *                     return fminbound(lambda x: bar(y, x, Pt, Pl), 0, 1, xtol=1e-4, maxfun=50)
 */
  __pyx_tuple__15 = PyTuple_Pack(3, __pyx_n_s_y, __pyx_n_s_Pt, __pyx_n_s_Pl); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(0, 853, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);
  __pyx_codeobj__16 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__15, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_cat_code_caimin_CaimAn_oas, __pyx_n_s_baz, 853, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__16)) __PYX_ERR(0, 853, __pyx_L1_error)

  /* "oasis.pyx":937
 *                 Pl = [P[i].l for i in idx[-optimize_g:]]
 * 
 *                 def bar(y, opt, Pt, Pl):             # <<<<<<<<<<<<<<
 *                     b, g = opt
 *                     h = np.exp(log(g) * np.arange(ma, dtype=np.float32))
 */
  __pyx_tuple__17 = PyTuple_Pack(10, __pyx_n_s_y, __pyx_n_s_opt, __pyx_n_s_Pt, __pyx_n_s_Pl, __pyx_n_s_b, __pyx_n_s_g, __pyx_n_s_h, __pyx_n_s_foo, __pyx_n_s_foo, __pyx_n_s_i); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(0, 937, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);
  __pyx_codeobj__18 = (PyObject*)__Pyx_PyCode_New(4, 0, 10, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__17, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_cat_code_caimin_CaimAn_oas, __pyx_n_s_bar, 937, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__18)) __PYX_ERR(0, 937, __pyx_L1_error)

  /* "oasis.pyx":953
 *                                 for i in range(P.size() if P.size() < optimize_g else optimize_g)])
 * 
 *                 def baz(y, Pt, Pl):             # <<<<<<<<<<<<<<
 *                     return minimize(lambda x: bar(y, x, Pt, Pl), (b, g),
 *                                     bounds=((0 if b_nonneg else None, None), (.001, .999)),
 */
  __pyx_tuple__19 = PyTuple_Pack(3, __pyx_n_s_y, __pyx_n_s_Pt, __pyx_n_s_Pl); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(0, 953, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);
  __pyx_codeobj__20 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__19, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_cat_code_caimin_CaimAn_oas, __pyx_n_s_baz, 953, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__20)) __PYX_ERR(0, 953, __pyx_L1_error)

  /* "oasis.pyx":996
 *                        for i in range(P.size())])  # this window size seems necessary and sufficient
 *         ff = np.unique(ff[(ff >= 0) * (ff < T)])
 *         ll = np.append(ff[1:] - ff[:-1], T - ff[-1])             # <<<<<<<<<<<<<<
 *         h = np.exp(log(g) * np.arange(T, dtype=np.float32))
 *         P.resize(0)
 */
  __pyx_slice__21 = PySlice_New(__pyx_int_1, Py_None, Py_None); if (unlikely(!__pyx_slice__21)) __PYX_ERR(0, 996, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__21);
  __Pyx_GIVEREF(__pyx_slice__21);
  __pyx_slice__22 = PySlice_New(Py_None, __pyx_int_neg_1, Py_None); if (unlikely(!__pyx_slice__22)) __PYX_ERR(0, 996, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__22);
  __Pyx_GIVEREF(__pyx_slice__22);

  /* "oasis.pyx":1014
 *         lls = [(P[i + 1].v / P[i + 1].w - P[i].v / P[i].w * g**P[i].l)
 *                for i in range(P.size() - 1)]
 *         pos = [P[i + 1].t for i in np.argsort(lls)[::-1]]             # <<<<<<<<<<<<<<
 *         y = y - b
 *         res = -y
 */
  __pyx_slice__23 = PySlice_New(Py_None, Py_None, __pyx_int_neg_1); if (unlikely(!__pyx_slice__23)) __PYX_ERR(0, 1014, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__23);
  __Pyx_GIVEREF(__pyx_slice__23);

  /* "oasis.pyx":1046
 *     s = c.copy()
 *     s[0] = 0
 *     s[1:] -= g * c[:-1]             # <<<<<<<<<<<<<<
 *     return c, s, b, g, lam
 */
  __pyx_slice__24 = PySlice_New(__pyx_int_1, Py_None, Py_None); if (unlikely(!__pyx_slice__24)) __PYX_ERR(0, 1046, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__24);
  __Pyx_GIVEREF(__pyx_slice__24);
  __pyx_slice__25 = PySlice_New(Py_None, __pyx_int_neg_1, Py_None); if (unlikely(!__pyx_slice__25)) __PYX_ERR(0, 1046, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__25);
  __Pyx_GIVEREF(__pyx_slice__25);

  /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":218
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
  __pyx_tuple__26 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_C_contiguous); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(1, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);

  /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":222
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
  __pyx_tuple__27 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_Fortran_contiguou); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(1, 222, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);

  /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":259
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
  __pyx_tuple__28 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(1, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);

  /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":799
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
  __pyx_tuple__29 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(1, 799, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);

  /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":803
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
  __pyx_tuple__30 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(1, 803, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);

  /* "../../../../../usr/local/lib/python2.7/dist-packages/Cython/Includes/numpy/__init__.pxd":823
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
  __pyx_tuple__31 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor_2); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(1, 823, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);

  /* "FromPyStructUtility":19
 *         value = obj['v']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'v'")             # <<<<<<<<<<<<<<
 *     result.v = value
 *     try:
 */
  __pyx_tuple__32 = PyTuple_Pack(1, __pyx_kp_s_No_value_specified_for_struct_at); if (unlikely(!__pyx_tuple__32)) __PYX_ERR(2, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);

  /* "FromPyStructUtility":24
 *         value = obj['w']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'w'")             # <<<<<<<<<<<<<<
 *     result.w = value
 *     try:
 */
  __pyx_tuple__33 = PyTuple_Pack(1, __pyx_kp_s_No_value_specified_for_struct_at_2); if (unlikely(!__pyx_tuple__33)) __PYX_ERR(2, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);

  /* "FromPyStructUtility":29
 *         value = obj['t']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 't'")             # <<<<<<<<<<<<<<
 *     result.t = value
 *     try:
 */
  __pyx_tuple__34 = PyTuple_Pack(1, __pyx_kp_s_No_value_specified_for_struct_at_3); if (unlikely(!__pyx_tuple__34)) __PYX_ERR(2, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);

  /* "FromPyStructUtility":34
 *         value = obj['l']
 *     except KeyError:
 *         raise ValueError("No value specified for struct attribute 'l'")             # <<<<<<<<<<<<<<
 *     result.l = value
 *     return result
 */
  __pyx_tuple__35 = PyTuple_Pack(1, __pyx_kp_s_No_value_specified_for_struct_at_4); if (unlikely(!__pyx_tuple__35)) __PYX_ERR(2, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);

  /* "oasis.pyx":585
 * 
 * @cython.cdivision(True)
 * def oasisAR1(np.ndarray[SINGLE, ndim=1] y, SINGLE g, SINGLE lam=0, SINGLE s_min=0):             # <<<<<<<<<<<<<<
 *     """ Infer the most likely discretized spike train underlying an AR(1) fluorescence trace
 * 
 */
  __pyx_tuple__36 = PyTuple_Pack(14, __pyx_n_s_y, __pyx_n_s_g, __pyx_n_s_lam, __pyx_n_s_s_min, __pyx_n_s_i, __pyx_n_s_j, __pyx_n_s_k, __pyx_n_s_t, __pyx_n_s_T, __pyx_n_s_tmp, __pyx_n_s_c, __pyx_n_s_s, __pyx_n_s_P, __pyx_n_s_newpool); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(0, 585, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);
  __pyx_codeobj__37 = (PyObject*)__Pyx_PyCode_New(4, 0, 14, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__36, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_cat_code_caimin_CaimAn_oas, __pyx_n_s_oasisAR1, 585, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__37)) __PYX_ERR(0, 585, __pyx_L1_error)

  /* "oasis.pyx":659
 * 
 * @cython.cdivision(True)
 * def constrained_oasisAR1(np.ndarray[SINGLE, ndim=1] y, SINGLE g, SINGLE sn,             # <<<<<<<<<<<<<<
 *                          bool optimize_b=False, bool b_nonneg=True, int optimize_g=0,
 *                          int decimate=1, int max_iter=5, int penalty=1):
 */
  __pyx_tuple__38 = PyTuple_Pack(58, __pyx_n_s_y, __pyx_n_s_g, __pyx_n_s_sn, __pyx_n_s_optimize_b, __pyx_n_s_b_nonneg, __pyx_n_s_optimize_g, __pyx_n_s_decimate, __pyx_n_s_max_iter, __pyx_n_s_penalty, __pyx_n_s_i, __pyx_n_s_j, __pyx_n_s_k, __pyx_n_s_t, __pyx_n_s_l, __pyx_n_s_ma, __pyx_n_s_count, __pyx_n_s_T, __pyx_n_s_thresh, __pyx_n_s_v, __pyx_n_s_w, __pyx_n_s_RSS, __pyx_n_s_aa, __pyx_n_s_bb, __pyx_n_s_cc, __pyx_n_s_lam, __pyx_n_s_dlam, __pyx_n_s_b, __pyx_n_s_db, __pyx_n_s_dphi, __pyx_n_s_g_converged, __pyx_n_s_c, __pyx_n_s_s, __pyx_n_s_res, __pyx_n_s_tmp, __pyx_n_s_fluor, __pyx_n_s_h, __pyx_n_s_ff, __pyx_n_s_ll, __pyx_n_s_P, __pyx_n_s_newpool, __pyx_n_s_oasis1strun, __pyx_n_s_oasis1strun, __pyx_n_s_oasis, __pyx_n_s_oasis, __pyx_n_s_idx, __pyx_n_s_Pt, __pyx_n_s_Pl, __pyx_n_s_bar, __pyx_n_s_bar, __pyx_n_s_baz, __pyx_n_s_baz, __pyx_n_s_q, __pyx_n_s_bar, __pyx_n_s_baz, __pyx_n_s_result, __pyx_n_s_lls, __pyx_n_s_pos, __pyx_n_s_p); if (unlikely(!__pyx_tuple__38)) __PYX_ERR(0, 659, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);
  __pyx_codeobj__39 = (PyObject*)__Pyx_PyCode_New(9, 0, 58, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__38, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_cat_code_caimin_CaimAn_oas, __pyx_n_s_constrained_oasisAR1, 659, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__39)) __PYX_ERR(0, 659, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_float__001 = PyFloat_FromDouble(.001); if (unlikely(!__pyx_float__001)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float__999 = PyFloat_FromDouble(.999); if (unlikely(!__pyx_float__999)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_1eneg_4 = PyFloat_FromDouble(1e-4); if (unlikely(!__pyx_float_1eneg_4)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_1eneg_9 = PyFloat_FromDouble(1e-9); if (unlikely(!__pyx_float_1eneg_9)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_1eneg_04 = PyFloat_FromDouble(1e-04); if (unlikely(!__pyx_float_1eneg_04)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_1eneg_05 = PyFloat_FromDouble(1e-05); if (unlikely(!__pyx_float_1eneg_05)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4 = PyInt_FromLong(4); if (unlikely(!__pyx_int_4)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_15 = PyInt_FromLong(15); if (unlikely(!__pyx_int_15)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_50 = PyInt_FromLong(50); if (unlikely(!__pyx_int_50)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1000 = PyInt_FromLong(1000); if (unlikely(!__pyx_int_1000)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initoasis(void); /*proto*/
PyMODINIT_FUNC initoasis(void)
#else
PyMODINIT_FUNC PyInit_oasis(void); /*proto*/
PyMODINIT_FUNC PyInit_oasis(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_oasis(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("oasis", __pyx_methods, __pyx_k_Extract_neural_activity_from_a_f, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_oasis) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "oasis")) {
      if (unlikely(PyDict_SetItemString(modules, "oasis", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_5oasis_OASIS) < 0) __PYX_ERR(0, 29, __pyx_L1_error)
  __pyx_type_5oasis_OASIS.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "OASIS", (PyObject *)&__pyx_type_5oasis_OASIS) < 0) __PYX_ERR(0, 29, __pyx_L1_error)
  __pyx_ptype_5oasis_OASIS = &__pyx_type_5oasis_OASIS;
  if (PyType_Ready(&__pyx_type_5oasis___pyx_scope_struct__constrained_oasisAR1) < 0) __PYX_ERR(0, 659, __pyx_L1_error)
  __pyx_type_5oasis___pyx_scope_struct__constrained_oasisAR1.tp_print = 0;
  __pyx_ptype_5oasis___pyx_scope_struct__constrained_oasisAR1 = &__pyx_type_5oasis___pyx_scope_struct__constrained_oasisAR1;
  if (PyType_Ready(&__pyx_type_5oasis___pyx_scope_struct_1_baz) < 0) __PYX_ERR(0, 853, __pyx_L1_error)
  __pyx_type_5oasis___pyx_scope_struct_1_baz.tp_print = 0;
  __pyx_ptype_5oasis___pyx_scope_struct_1_baz = &__pyx_type_5oasis___pyx_scope_struct_1_baz;
  if (PyType_Ready(&__pyx_type_5oasis___pyx_scope_struct_2_baz) < 0) __PYX_ERR(0, 953, __pyx_L1_error)
  __pyx_type_5oasis___pyx_scope_struct_2_baz.tp_print = 0;
  __pyx_ptype_5oasis___pyx_scope_struct_2_baz = &__pyx_type_5oasis___pyx_scope_struct_2_baz;
  /*--- Type import code ---*/
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "type", 
  #if CYTHON_COMPILING_IN_PYPY
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  0); if (unlikely(!__pyx_ptype_7cpython_4type_type)) __PYX_ERR(3, 9, __pyx_L1_error)
  __pyx_ptype_7cpython_4bool_bool = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "bool", sizeof(PyBoolObject), 0); if (unlikely(!__pyx_ptype_7cpython_4bool_bool)) __PYX_ERR(4, 8, __pyx_L1_error)
  __pyx_ptype_7cpython_7complex_complex = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "complex", sizeof(PyComplexObject), 0); if (unlikely(!__pyx_ptype_7cpython_7complex_complex)) __PYX_ERR(5, 15, __pyx_L1_error)
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType("numpy", "dtype", sizeof(PyArray_Descr), 0); if (unlikely(!__pyx_ptype_5numpy_dtype)) __PYX_ERR(1, 155, __pyx_L1_error)
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType("numpy", "flatiter", sizeof(PyArrayIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_flatiter)) __PYX_ERR(1, 168, __pyx_L1_error)
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType("numpy", "broadcast", sizeof(PyArrayMultiIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_broadcast)) __PYX_ERR(1, 172, __pyx_L1_error)
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType("numpy", "ndarray", sizeof(PyArrayObject), 0); if (unlikely(!__pyx_ptype_5numpy_ndarray)) __PYX_ERR(1, 181, __pyx_L1_error)
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType("numpy", "ufunc", sizeof(PyUFuncObject), 0); if (unlikely(!__pyx_ptype_5numpy_ufunc)) __PYX_ERR(1, 861, __pyx_L1_error)
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "oasis.pyx":7
 * """
 * 
 * import numpy as np             # <<<<<<<<<<<<<<
 * cimport numpy as np
 * cimport cython
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_1) < 0) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "oasis.pyx":11
 * cimport cython
 * from libc.math cimport sqrt, log, exp, fmax, fabs
 * from scipy.optimize import fminbound, minimize             # <<<<<<<<<<<<<<
 * from cpython cimport bool
 * from libcpp.vector cimport vector
 */
  __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_fminbound);
  __Pyx_GIVEREF(__pyx_n_s_fminbound);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_fminbound);
  __Pyx_INCREF(__pyx_n_s_minimize);
  __Pyx_GIVEREF(__pyx_n_s_minimize);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_minimize);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_scipy_optimize, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_fminbound); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_fminbound, __pyx_t_1) < 0) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_minimize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_minimize, __pyx_t_1) < 0) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "oasis.pyx":585
 * 
 * @cython.cdivision(True)
 * def oasisAR1(np.ndarray[SINGLE, ndim=1] y, SINGLE g, SINGLE lam=0, SINGLE s_min=0):             # <<<<<<<<<<<<<<
 *     """ Infer the most likely discretized spike train underlying an AR(1) fluorescence trace
 * 
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_5oasis_1oasisAR1, NULL, __pyx_n_s_oasis); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 585, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_oasisAR1, __pyx_t_2) < 0) __PYX_ERR(0, 585, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "oasis.pyx":659
 * 
 * @cython.cdivision(True)
 * def constrained_oasisAR1(np.ndarray[SINGLE, ndim=1] y, SINGLE g, SINGLE sn,             # <<<<<<<<<<<<<<
 *                          bool optimize_b=False, bool b_nonneg=True, int optimize_g=0,
 *                          int decimate=1, int max_iter=5, int penalty=1):
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_5oasis_3constrained_oasisAR1, NULL, __pyx_n_s_oasis); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 659, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_constrained_oasisAR1, __pyx_t_2) < 0) __PYX_ERR(0, 659, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "oasis.pyx":1
 * """Extract neural activity from a fluorescence trace using OASIS,             # <<<<<<<<<<<<<<
 * an active set method for sparse nonnegative deconvolution
 * Created on Mon Apr 4 18:21:13 2016
 */
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vector.to_py":67
 * 
 * @cname("__pyx_convert_vector_to_py_struct____pyx_t_5oasis_Pool")
 * cdef object __pyx_convert_vector_to_py_struct____pyx_t_5oasis_Pool(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init oasis", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init oasis");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* PyIntBinop */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    if (op1 == op2) {
        Py_RETURN_TRUE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a == b) {
            Py_RETURN_TRUE;
        } else {
            Py_RETURN_FALSE;
        }
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS && PY_MAJOR_VERSION >= 3
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a;
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                #if PyLong_SHIFT < 30 && PyLong_SHIFT != 15
                default: return PyLong_Type.tp_richcompare(op1, op2, Py_EQ);
                #else
                default: Py_RETURN_FALSE;
                #endif
            }
        }
            if (a == b) {
                Py_RETURN_TRUE;
            } else {
                Py_RETURN_FALSE;
            }
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            if ((double)a == (double)b) {
                Py_RETURN_TRUE;
            } else {
                Py_RETURN_FALSE;
            }
    }
    return PyObject_RichCompare(op1, op2, Py_EQ);
}
#endif

/* PyIntBinop */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx_PyInt_SubtractCObj(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op2))) {
        const long a = intval;
        long x;
        long b = PyInt_AS_LONG(op2);
            x = (long)((unsigned long)a - b);
            if (likely((x^a) >= 0 || (x^~b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS && PY_MAJOR_VERSION >= 3
    if (likely(PyLong_CheckExact(op2))) {
        const long a = intval;
        long b, x;
        const PY_LONG_LONG lla = intval;
        PY_LONG_LONG llb, llx;
        const digit* digits = ((PyLongObject*)op2)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op2);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            b = likely(size) ? digits[0] : 0;
            if (size == -1) b = -b;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        b = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        llb = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        b = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        llb = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        b = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        llb = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        b = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        llb = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        b = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        llb = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        b = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        llb = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                default: return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
            }
        }
                x = a - b;
            return PyLong_FromLong(x);
        long_long:
                llx = lla - llb;
            return PyLong_FromLongLong(llx);
    }
    #endif
    if (PyFloat_CheckExact(op2)) {
        const long a = intval;
        double b = PyFloat_AS_DOUBLE(op2);
            double result;
            PyFPE_START_PROTECT("subtract", return NULL)
            result = ((double)a) - (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceSubtract : PyNumber_Subtract)(op1, op2);
}
#endif

/* GetModuleGlobalName */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

/* PyObjectCall */
  #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* ExtTypeTest */
  static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* BufferFormatCheck */
  static CYTHON_INLINE int __Pyx_IsLittleEndian(void) {
  unsigned int n = 1;
  return *(unsigned char*)(&n) != 0;
}
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type) {
  stack[0].field = &ctx->root;
  stack[0].parent_offset = 0;
  ctx->root.type = type;
  ctx->root.name = "buffer dtype";
  ctx->root.offset = 0;
  ctx->head = stack;
  ctx->head->field = &ctx->root;
  ctx->fmt_offset = 0;
  ctx->head->parent_offset = 0;
  ctx->new_packmode = '@';
  ctx->enc_packmode = '@';
  ctx->new_count = 1;
  ctx->enc_count = 0;
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  ctx->is_valid_array = 0;
  ctx->struct_alignment = 0;
  while (type->typegroup == 'S') {
    ++ctx->head;
    ctx->head->field = type->fields;
    ctx->head->parent_offset = 0;
    type = type->fields->type;
  }
}
static int __Pyx_BufFmt_ParseNumber(const char** ts) {
    int count;
    const char* t = *ts;
    if (*t < '0' || *t > '9') {
      return -1;
    } else {
        count = *t++ - '0';
        while (*t >= '0' && *t < '9') {
            count *= 10;
            count += *t++ - '0';
        }
    }
    *ts = t;
    return count;
}
static int __Pyx_BufFmt_ExpectNumber(const char **ts) {
    int number = __Pyx_BufFmt_ParseNumber(ts);
    if (number == -1)
        PyErr_Format(PyExc_ValueError,\
                     "Does not understand character buffer dtype format string ('%c')", **ts);
    return number;
}
static void __Pyx_BufFmt_RaiseUnexpectedChar(char ch) {
  PyErr_Format(PyExc_ValueError,
               "Unexpected format string character: '%c'", ch);
}
static const char* __Pyx_BufFmt_DescribeTypeChar(char ch, int is_complex) {
  switch (ch) {
    case 'c': return "'char'";
    case 'b': return "'signed char'";
    case 'B': return "'unsigned char'";
    case 'h': return "'short'";
    case 'H': return "'unsigned short'";
    case 'i': return "'int'";
    case 'I': return "'unsigned int'";
    case 'l': return "'long'";
    case 'L': return "'unsigned long'";
    case 'q': return "'long long'";
    case 'Q': return "'unsigned long long'";
    case 'f': return (is_complex ? "'complex float'" : "'float'");
    case 'd': return (is_complex ? "'complex double'" : "'double'");
    case 'g': return (is_complex ? "'complex long double'" : "'long double'");
    case 'T': return "a struct";
    case 'O': return "Python object";
    case 'P': return "a pointer";
    case 's': case 'p': return "a string";
    case 0: return "end";
    default: return "unparseable format string";
  }
}
static size_t __Pyx_BufFmt_TypeCharToStandardSize(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return 2;
    case 'i': case 'I': case 'l': case 'L': return 4;
    case 'q': case 'Q': return 8;
    case 'f': return (is_complex ? 8 : 4);
    case 'd': return (is_complex ? 16 : 8);
    case 'g': {
      PyErr_SetString(PyExc_ValueError, "Python does not define a standard format string size for long double ('g')..");
      return 0;
    }
    case 'O': case 'P': return sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static size_t __Pyx_BufFmt_TypeCharToNativeSize(char ch, int is_complex) {
  switch (ch) {
    case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(short);
    case 'i': case 'I': return sizeof(int);
    case 'l': case 'L': return sizeof(long);
    #ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(PY_LONG_LONG);
    #endif
    case 'f': return sizeof(float) * (is_complex ? 2 : 1);
    case 'd': return sizeof(double) * (is_complex ? 2 : 1);
    case 'g': return sizeof(long double) * (is_complex ? 2 : 1);
    case 'O': case 'P': return sizeof(void*);
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
typedef struct { char c; short x; } __Pyx_st_short;
typedef struct { char c; int x; } __Pyx_st_int;
typedef struct { char c; long x; } __Pyx_st_long;
typedef struct { char c; float x; } __Pyx_st_float;
typedef struct { char c; double x; } __Pyx_st_double;
typedef struct { char c; long double x; } __Pyx_st_longdouble;
typedef struct { char c; void *x; } __Pyx_st_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { char c; PY_LONG_LONG x; } __Pyx_st_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToAlignment(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_st_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_st_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_st_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_st_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_st_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_st_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_st_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_st_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
/* These are for computing the padding at the end of the struct to align
   on the first member of the struct. This will probably the same as above,
   but we don't have any guarantees.
 */
typedef struct { short x; char c; } __Pyx_pad_short;
typedef struct { int x; char c; } __Pyx_pad_int;
typedef struct { long x; char c; } __Pyx_pad_long;
typedef struct { float x; char c; } __Pyx_pad_float;
typedef struct { double x; char c; } __Pyx_pad_double;
typedef struct { long double x; char c; } __Pyx_pad_longdouble;
typedef struct { void *x; char c; } __Pyx_pad_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { PY_LONG_LONG x; char c; } __Pyx_pad_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToPadding(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_pad_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_pad_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_pad_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_pad_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_pad_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_pad_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_pad_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_pad_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static char __Pyx_BufFmt_TypeCharToGroup(char ch, int is_complex) {
  switch (ch) {
    case 'c':
        return 'H';
    case 'b': case 'h': case 'i':
    case 'l': case 'q': case 's': case 'p':
        return 'I';
    case 'B': case 'H': case 'I': case 'L': case 'Q':
        return 'U';
    case 'f': case 'd': case 'g':
        return (is_complex ? 'C' : 'R');
    case 'O':
        return 'O';
    case 'P':
        return 'P';
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
static void __Pyx_BufFmt_RaiseExpected(__Pyx_BufFmt_Context* ctx) {
  if (ctx->head == NULL || ctx->head->field == &ctx->root) {
    const char* expected;
    const char* quote;
    if (ctx->head == NULL) {
      expected = "end";
      quote = "";
    } else {
      expected = ctx->head->field->type->name;
      quote = "'";
    }
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected %s%s%s but got %s",
                 quote, expected, quote,
                 __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex));
  } else {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_StructField* parent = (ctx->head - 1)->field;
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected '%s' but got %s in '%s.%s'",
                 field->type->name, __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex),
                 parent->type->name, field->name);
  }
}
static int __Pyx_BufFmt_ProcessTypeChunk(__Pyx_BufFmt_Context* ctx) {
  char group;
  size_t size, offset, arraysize = 1;
  if (ctx->enc_type == 0) return 0;
  if (ctx->head->field->type->arraysize[0]) {
    int i, ndim = 0;
    if (ctx->enc_type == 's' || ctx->enc_type == 'p') {
        ctx->is_valid_array = ctx->head->field->type->ndim == 1;
        ndim = 1;
        if (ctx->enc_count != ctx->head->field->type->arraysize[0]) {
            PyErr_Format(PyExc_ValueError,
                         "Expected a dimension of size %zu, got %zu",
                         ctx->head->field->type->arraysize[0], ctx->enc_count);
            return -1;
        }
    }
    if (!ctx->is_valid_array) {
      PyErr_Format(PyExc_ValueError, "Expected %d dimensions, got %d",
                   ctx->head->field->type->ndim, ndim);
      return -1;
    }
    for (i = 0; i < ctx->head->field->type->ndim; i++) {
      arraysize *= ctx->head->field->type->arraysize[i];
    }
    ctx->is_valid_array = 0;
    ctx->enc_count = 1;
  }
  group = __Pyx_BufFmt_TypeCharToGroup(ctx->enc_type, ctx->is_complex);
  do {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_TypeInfo* type = field->type;
    if (ctx->enc_packmode == '@' || ctx->enc_packmode == '^') {
      size = __Pyx_BufFmt_TypeCharToNativeSize(ctx->enc_type, ctx->is_complex);
    } else {
      size = __Pyx_BufFmt_TypeCharToStandardSize(ctx->enc_type, ctx->is_complex);
    }
    if (ctx->enc_packmode == '@') {
      size_t align_at = __Pyx_BufFmt_TypeCharToAlignment(ctx->enc_type, ctx->is_complex);
      size_t align_mod_offset;
      if (align_at == 0) return -1;
      align_mod_offset = ctx->fmt_offset % align_at;
      if (align_mod_offset > 0) ctx->fmt_offset += align_at - align_mod_offset;
      if (ctx->struct_alignment == 0)
          ctx->struct_alignment = __Pyx_BufFmt_TypeCharToPadding(ctx->enc_type,
                                                                 ctx->is_complex);
    }
    if (type->size != size || type->typegroup != group) {
      if (type->typegroup == 'C' && type->fields != NULL) {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        ++ctx->head;
        ctx->head->field = type->fields;
        ctx->head->parent_offset = parent_offset;
        continue;
      }
      if ((type->typegroup == 'H' || group == 'H') && type->size == size) {
      } else {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
      }
    }
    offset = ctx->head->parent_offset + field->offset;
    if (ctx->fmt_offset != offset) {
      PyErr_Format(PyExc_ValueError,
                   "Buffer dtype mismatch; next field is at offset %" CYTHON_FORMAT_SSIZE_T "d but %" CYTHON_FORMAT_SSIZE_T "d expected",
                   (Py_ssize_t)ctx->fmt_offset, (Py_ssize_t)offset);
      return -1;
    }
    ctx->fmt_offset += size;
    if (arraysize)
      ctx->fmt_offset += (arraysize - 1) * size;
    --ctx->enc_count;
    while (1) {
      if (field == &ctx->root) {
        ctx->head = NULL;
        if (ctx->enc_count != 0) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
        }
        break;
      }
      ctx->head->field = ++field;
      if (field->type == NULL) {
        --ctx->head;
        field = ctx->head->field;
        continue;
      } else if (field->type->typegroup == 'S') {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        if (field->type->fields->type == NULL) continue;
        field = field->type->fields;
        ++ctx->head;
        ctx->head->field = field;
        ctx->head->parent_offset = parent_offset;
        break;
      } else {
        break;
      }
    }
  } while (ctx->enc_count);
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  return 0;
}
static CYTHON_INLINE PyObject *
__pyx_buffmt_parse_array(__Pyx_BufFmt_Context* ctx, const char** tsp)
{
    const char *ts = *tsp;
    int i = 0, number;
    int ndim = ctx->head->field->type->ndim;
;
    ++ts;
    if (ctx->new_count != 1) {
        PyErr_SetString(PyExc_ValueError,
                        "Cannot handle repeated arrays in format string");
        return NULL;
    }
    if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
    while (*ts && *ts != ')') {
        switch (*ts) {
            case ' ': case '\f': case '\r': case '\n': case '\t': case '\v':  continue;
            default:  break;
        }
        number = __Pyx_BufFmt_ExpectNumber(&ts);
        if (number == -1) return NULL;
        if (i < ndim && (size_t) number != ctx->head->field->type->arraysize[i])
            return PyErr_Format(PyExc_ValueError,
                        "Expected a dimension of size %zu, got %d",
                        ctx->head->field->type->arraysize[i], number);
        if (*ts != ',' && *ts != ')')
            return PyErr_Format(PyExc_ValueError,
                                "Expected a comma in format string, got '%c'", *ts);
        if (*ts == ',') ts++;
        i++;
    }
    if (i != ndim)
        return PyErr_Format(PyExc_ValueError, "Expected %d dimension(s), got %d",
                            ctx->head->field->type->ndim, i);
    if (!*ts) {
        PyErr_SetString(PyExc_ValueError,
                        "Unexpected end of format string, expected ')'");
        return NULL;
    }
    ctx->is_valid_array = 1;
    ctx->new_count = 1;
    *tsp = ++ts;
    return Py_None;
}
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts) {
  int got_Z = 0;
  while (1) {
    switch(*ts) {
      case 0:
        if (ctx->enc_type != 0 && ctx->head == NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        if (ctx->head != NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        return ts;
      case ' ':
      case '\r':
      case '\n':
        ++ts;
        break;
      case '<':
        if (!__Pyx_IsLittleEndian()) {
          PyErr_SetString(PyExc_ValueError, "Little-endian buffer not supported on big-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '>':
      case '!':
        if (__Pyx_IsLittleEndian()) {
          PyErr_SetString(PyExc_ValueError, "Big-endian buffer not supported on little-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '=':
      case '@':
      case '^':
        ctx->new_packmode = *ts++;
        break;
      case 'T':
        {
          const char* ts_after_sub;
          size_t i, struct_count = ctx->new_count;
          size_t struct_alignment = ctx->struct_alignment;
          ctx->new_count = 1;
          ++ts;
          if (*ts != '{') {
            PyErr_SetString(PyExc_ValueError, "Buffer acquisition: Expected '{' after 'T'");
            return NULL;
          }
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          ctx->enc_count = 0;
          ctx->struct_alignment = 0;
          ++ts;
          ts_after_sub = ts;
          for (i = 0; i != struct_count; ++i) {
            ts_after_sub = __Pyx_BufFmt_CheckString(ctx, ts);
            if (!ts_after_sub) return NULL;
          }
          ts = ts_after_sub;
          if (struct_alignment) ctx->struct_alignment = struct_alignment;
        }
        break;
      case '}':
        {
          size_t alignment = ctx->struct_alignment;
          ++ts;
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          if (alignment && ctx->fmt_offset % alignment) {
            ctx->fmt_offset += alignment - (ctx->fmt_offset % alignment);
          }
        }
        return ts;
      case 'x':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->fmt_offset += ctx->new_count;
        ctx->new_count = 1;
        ctx->enc_count = 0;
        ctx->enc_type = 0;
        ctx->enc_packmode = ctx->new_packmode;
        ++ts;
        break;
      case 'Z':
        got_Z = 1;
        ++ts;
        if (*ts != 'f' && *ts != 'd' && *ts != 'g') {
          __Pyx_BufFmt_RaiseUnexpectedChar('Z');
          return NULL;
        }
      case 'c': case 'b': case 'B': case 'h': case 'H': case 'i': case 'I':
      case 'l': case 'L': case 'q': case 'Q':
      case 'f': case 'd': case 'g':
      case 'O': case 'p':
        if (ctx->enc_type == *ts && got_Z == ctx->is_complex &&
            ctx->enc_packmode == ctx->new_packmode) {
          ctx->enc_count += ctx->new_count;
          ctx->new_count = 1;
          got_Z = 0;
          ++ts;
          break;
        }
      case 's':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->enc_count = ctx->new_count;
        ctx->enc_packmode = ctx->new_packmode;
        ctx->enc_type = *ts;
        ctx->is_complex = got_Z;
        ++ts;
        ctx->new_count = 1;
        got_Z = 0;
        break;
      case ':':
        ++ts;
        while(*ts != ':') ++ts;
        ++ts;
        break;
      case '(':
        if (!__pyx_buffmt_parse_array(ctx, &ts)) return NULL;
        break;
      default:
        {
          int number = __Pyx_BufFmt_ExpectNumber(&ts);
          if (number == -1) return NULL;
          ctx->new_count = (size_t)number;
        }
    }
  }
}
static CYTHON_INLINE void __Pyx_ZeroBuffer(Py_buffer* buf) {
  buf->buf = NULL;
  buf->obj = NULL;
  buf->strides = __Pyx_zeros;
  buf->shape = __Pyx_zeros;
  buf->suboffsets = __Pyx_minusones;
}
static CYTHON_INLINE int __Pyx_GetBufferAndValidate(
        Py_buffer* buf, PyObject* obj,  __Pyx_TypeInfo* dtype, int flags,
        int nd, int cast, __Pyx_BufFmt_StackElem* stack)
{
  if (obj == Py_None || obj == NULL) {
    __Pyx_ZeroBuffer(buf);
    return 0;
  }
  buf->buf = NULL;
  if (__Pyx_GetBuffer(obj, buf, flags) == -1) goto fail;
  if (buf->ndim != nd) {
    PyErr_Format(PyExc_ValueError,
                 "Buffer has wrong number of dimensions (expected %d, got %d)",
                 nd, buf->ndim);
    goto fail;
  }
  if (!cast) {
    __Pyx_BufFmt_Context ctx;
    __Pyx_BufFmt_Init(&ctx, stack, dtype);
    if (!__Pyx_BufFmt_CheckString(&ctx, buf->format)) goto fail;
  }
  if ((unsigned)buf->itemsize != dtype->size) {
    PyErr_Format(PyExc_ValueError,
      "Item size of buffer (%" CYTHON_FORMAT_SSIZE_T "d byte%s) does not match size of '%s' (%" CYTHON_FORMAT_SSIZE_T "d byte%s)",
      buf->itemsize, (buf->itemsize > 1) ? "s" : "",
      dtype->name, (Py_ssize_t)dtype->size, (dtype->size > 1) ? "s" : "");
    goto fail;
  }
  if (buf->suboffsets == NULL) buf->suboffsets = __Pyx_minusones;
  return 0;
fail:;
  __Pyx_ZeroBuffer(buf);
  return -1;
}
static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info) {
  if (info->buf == NULL) return;
  if (info->suboffsets == __Pyx_minusones) info->suboffsets = NULL;
  __Pyx_ReleaseBuffer(info);
}

/* BufferFallbackError */
    static void __Pyx_RaiseBufferFallbackError(void) {
  PyErr_SetString(PyExc_ValueError,
     "Buffer acquisition failed on assignment; and then reacquiring the old buffer failed too!");
}

/* BufferIndexError */
    static void __Pyx_RaiseBufferIndexError(int axis) {
  PyErr_Format(PyExc_IndexError,
     "Out of bounds on buffer access (axis %d)", axis);
}

/* PyErrFetchRestore */
    #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* PyObjectCallMethO */
    #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
    #if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* ArgTypeTest */
      static void __Pyx_RaiseArgumentTypeInvalid(const char* name, PyObject *obj, PyTypeObject *type) {
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
}
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (likely(Py_TYPE(obj) == type)) return 1;
        #if PY_MAJOR_VERSION == 2
        else if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(PyObject_TypeCheck(obj, type))) return 1;
    }
    __Pyx_RaiseArgumentTypeInvalid(name, obj, type);
    return 0;
}

/* PyObjectCallNoArg */
      #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* SliceObject */
        static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(PyObject* obj,
        Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** _py_start, PyObject** _py_stop, PyObject** _py_slice,
        int has_cstart, int has_cstop, CYTHON_UNUSED int wraparound) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyMappingMethods* mp;
#if PY_MAJOR_VERSION < 3
    PySequenceMethods* ms = Py_TYPE(obj)->tp_as_sequence;
    if (likely(ms && ms->sq_slice)) {
        if (!has_cstart) {
            if (_py_start && (*_py_start != Py_None)) {
                cstart = __Pyx_PyIndex_AsSsize_t(*_py_start);
                if ((cstart == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstart = 0;
        }
        if (!has_cstop) {
            if (_py_stop && (*_py_stop != Py_None)) {
                cstop = __Pyx_PyIndex_AsSsize_t(*_py_stop);
                if ((cstop == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstop = PY_SSIZE_T_MAX;
        }
        if (wraparound && unlikely((cstart < 0) | (cstop < 0)) && likely(ms->sq_length)) {
            Py_ssize_t l = ms->sq_length(obj);
            if (likely(l >= 0)) {
                if (cstop < 0) {
                    cstop += l;
                    if (cstop < 0) cstop = 0;
                }
                if (cstart < 0) {
                    cstart += l;
                    if (cstart < 0) cstart = 0;
                }
            } else {
                if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                    goto bad;
                PyErr_Clear();
            }
        }
        return ms->sq_slice(obj, cstart, cstop);
    }
#endif
    mp = Py_TYPE(obj)->tp_as_mapping;
    if (likely(mp && mp->mp_subscript))
#endif
    {
        PyObject* result;
        PyObject *py_slice, *py_start, *py_stop;
        if (_py_slice) {
            py_slice = *_py_slice;
        } else {
            PyObject* owned_start = NULL;
            PyObject* owned_stop = NULL;
            if (_py_start) {
                py_start = *_py_start;
            } else {
                if (has_cstart) {
                    owned_start = py_start = PyInt_FromSsize_t(cstart);
                    if (unlikely(!py_start)) goto bad;
                } else
                    py_start = Py_None;
            }
            if (_py_stop) {
                py_stop = *_py_stop;
            } else {
                if (has_cstop) {
                    owned_stop = py_stop = PyInt_FromSsize_t(cstop);
                    if (unlikely(!py_stop)) {
                        Py_XDECREF(owned_start);
                        goto bad;
                    }
                } else
                    py_stop = Py_None;
            }
            py_slice = PySlice_New(py_start, py_stop, Py_None);
            Py_XDECREF(owned_start);
            Py_XDECREF(owned_stop);
            if (unlikely(!py_slice)) goto bad;
        }
#if CYTHON_COMPILING_IN_CPYTHON
        result = mp->mp_subscript(obj, py_slice);
#else
        result = PyObject_GetItem(obj, py_slice);
#endif
        if (!_py_slice) {
            Py_DECREF(py_slice);
        }
        return result;
    }
    PyErr_Format(PyExc_TypeError,
        "'%.200s' object is unsliceable", Py_TYPE(obj)->tp_name);
bad:
    return NULL;
}

/* FetchCommonType */
        static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* CythonFunction */
        static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_COMPILING_IN_CPYTHON
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(__pyx_CyFunctionObject, func.m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(m->func.m_ml->ml_name);
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_New(PyTypeObject *type, PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    __pyx_CyFunctionObject *op = PyObject_GC_New(__pyx_CyFunctionObject, type);
    if (op == NULL)
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    PyObject_GC_Track(op);
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return __Pyx_PyMethod_New(func, type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
    return __Pyx_PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
#if CYTHON_COMPILING_IN_PYPY
static PyObject * __Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    PyObject *self = f->m_self;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0 = PySequence_ITEM(arg, 0);
                if (unlikely(!arg0)) return NULL;
                result = (*meth)(self, arg0);
                Py_DECREF(arg0);
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
#else
static PyObject * __Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
	return PyCFunction_Call(func, arg, kw);
}
#endif
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_Call,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_CyFunction_descr_get,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
};
static int __pyx_CyFunction_init(void) {
#if !CYTHON_COMPILING_IN_PYPY
    __pyx_CyFunctionType_type.tp_call = PyCFunction_Call;
#endif
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (__pyx_CyFunctionType == NULL) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (!m->defaults)
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* GetItemInt */
            static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyList_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyTuple_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* None */
            static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname) {
    PyErr_Format(PyExc_NameError, "free variable '%s' referenced before assignment in enclosing scope", varname);
}

/* RaiseTooManyValuesToUnpack */
            static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
            static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
            static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(exc_type == PyExc_StopIteration) || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* UnpackItemEndCheck */
            static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* SliceObject */
            static CYTHON_INLINE int __Pyx_PyObject_SetSlice(PyObject* obj, PyObject* value,
        Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** _py_start, PyObject** _py_stop, PyObject** _py_slice,
        int has_cstart, int has_cstop, CYTHON_UNUSED int wraparound) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyMappingMethods* mp;
#if PY_MAJOR_VERSION < 3
    PySequenceMethods* ms = Py_TYPE(obj)->tp_as_sequence;
    if (likely(ms && ms->sq_ass_slice)) {
        if (!has_cstart) {
            if (_py_start && (*_py_start != Py_None)) {
                cstart = __Pyx_PyIndex_AsSsize_t(*_py_start);
                if ((cstart == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstart = 0;
        }
        if (!has_cstop) {
            if (_py_stop && (*_py_stop != Py_None)) {
                cstop = __Pyx_PyIndex_AsSsize_t(*_py_stop);
                if ((cstop == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstop = PY_SSIZE_T_MAX;
        }
        if (wraparound && unlikely((cstart < 0) | (cstop < 0)) && likely(ms->sq_length)) {
            Py_ssize_t l = ms->sq_length(obj);
            if (likely(l >= 0)) {
                if (cstop < 0) {
                    cstop += l;
                    if (cstop < 0) cstop = 0;
                }
                if (cstart < 0) {
                    cstart += l;
                    if (cstart < 0) cstart = 0;
                }
            } else {
                if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                    goto bad;
                PyErr_Clear();
            }
        }
        return ms->sq_ass_slice(obj, cstart, cstop, value);
    }
#endif
    mp = Py_TYPE(obj)->tp_as_mapping;
    if (likely(mp && mp->mp_ass_subscript))
#endif
    {
        int result;
        PyObject *py_slice, *py_start, *py_stop;
        if (_py_slice) {
            py_slice = *_py_slice;
        } else {
            PyObject* owned_start = NULL;
            PyObject* owned_stop = NULL;
            if (_py_start) {
                py_start = *_py_start;
            } else {
                if (has_cstart) {
                    owned_start = py_start = PyInt_FromSsize_t(cstart);
                    if (unlikely(!py_start)) goto bad;
                } else
                    py_start = Py_None;
            }
            if (_py_stop) {
                py_stop = *_py_stop;
            } else {
                if (has_cstop) {
                    owned_stop = py_stop = PyInt_FromSsize_t(cstop);
                    if (unlikely(!py_stop)) {
                        Py_XDECREF(owned_start);
                        goto bad;
                    }
                } else
                    py_stop = Py_None;
            }
            py_slice = PySlice_New(py_start, py_stop, Py_None);
            Py_XDECREF(owned_start);
            Py_XDECREF(owned_stop);
            if (unlikely(!py_slice)) goto bad;
        }
#if CYTHON_COMPILING_IN_CPYTHON
        result = mp->mp_ass_subscript(obj, py_slice, value);
#else
        result = value ? PyObject_SetItem(obj, py_slice, value) : PyObject_DelItem(obj, py_slice);
#endif
        if (!_py_slice) {
            Py_DECREF(py_slice);
        }
        return result;
    }
    PyErr_Format(PyExc_TypeError,
        "'%.200s' object does not support slice %.10s",
        Py_TYPE(obj)->tp_name, value ? "assignment" : "deletion");
bad:
    return -1;
}

/* RaiseException */
            #if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
#if PY_VERSION_HEX >= 0x03030000
    if (cause) {
#else
    if (cause && cause != Py_None) {
#endif
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* RaiseNoneIterError */
              static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* SaveResetException */
              #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* PyErrExceptionMatches */
              #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    return PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetException */
              #if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb) {
#endif
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_COMPILING_IN_CPYTHON
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* Import */
                static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
                static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* CodeObjectCache */
                static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
                #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

#if PY_MAJOR_VERSION < 3
static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags) {
    if (PyObject_CheckBuffer(obj)) return PyObject_GetBuffer(obj, view, flags);
        if (PyObject_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) return __pyx_pw_5numpy_7ndarray_1__getbuffer__(obj, view, flags);
    PyErr_Format(PyExc_TypeError, "'%.200s' does not have the buffer interface", Py_TYPE(obj)->tp_name);
    return -1;
}
static void __Pyx_ReleaseBuffer(Py_buffer *view) {
    PyObject *obj = view->obj;
    if (!obj) return;
    if (PyObject_CheckBuffer(obj)) {
        PyBuffer_Release(view);
        return;
    }
        if (PyObject_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) { __pyx_pw_5numpy_7ndarray_3__releasebuffer__(obj, view); return; }
    Py_DECREF(obj);
    view->obj = NULL;
}
#endif


                /* CIntFromPyVerify */
                #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
                static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value) {
    const unsigned int neg_one = (unsigned int) -1, const_zero = (unsigned int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(unsigned int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(unsigned int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
                static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
                static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

static PyObject* __pyx_convert__to_py_struct____pyx_t_5oasis_Pool(struct __pyx_t_5oasis_Pool s) {
                  PyObject* res;
                  PyObject* member;
                  res = PyDict_New(); if (unlikely(!res)) return NULL;
                  member = PyFloat_FromDouble(s.v); if (unlikely(!member)) goto bad;
                  if (unlikely(PyDict_SetItem(res, __pyx_n_s_v, member) < 0)) goto bad;
                  Py_DECREF(member);
                  member = PyFloat_FromDouble(s.w); if (unlikely(!member)) goto bad;
                  if (unlikely(PyDict_SetItem(res, __pyx_n_s_w, member) < 0)) goto bad;
                  Py_DECREF(member);
                  member = PyInt_FromSsize_t(s.t); if (unlikely(!member)) goto bad;
                  if (unlikely(PyDict_SetItem(res, __pyx_n_s_t, member) < 0)) goto bad;
                  Py_DECREF(member);
                  member = PyInt_FromSsize_t(s.l); if (unlikely(!member)) goto bad;
                  if (unlikely(PyDict_SetItem(res, __pyx_n_s_l, member) < 0)) goto bad;
                  Py_DECREF(member);
                  return res;
                  bad:
                  Py_XDECREF(member);
                  Py_DECREF(res);
                  return NULL;
                }
                /* None */
                #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* None */
                #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eqf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sumf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_difff(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prodf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quotf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        float denom = b.real * b.real + b.imag * b.imag;
        z.real = (a.real * b.real + a.imag * b.imag) / denom;
        z.imag = (a.imag * b.real - a.real * b.imag) / denom;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_negf(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zerof(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conjf(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_absf(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_powf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(a, a);
                    case 3:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(z, a);
                    case 4:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                }
                r = a.real;
                theta = 0;
            } else {
                r = __Pyx_c_absf(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

/* None */
                #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* None */
                #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        double denom = b.real * b.real + b.imag * b.imag;
        z.real = (a.real * b.real + a.imag * b.imag) / denom;
        z.imag = (a.imag * b.real - a.real * b.imag) / denom;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(a, a);
                    case 3:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(z, a);
                    case 4:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                }
                r = a.real;
                theta = 0;
            } else {
                r = __Pyx_c_abs(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

/* CIntToPy */
                static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NPY_TYPES(enum NPY_TYPES value) {
    const enum NPY_TYPES neg_one = (enum NPY_TYPES) -1, const_zero = (enum NPY_TYPES) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum NPY_TYPES) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum NPY_TYPES) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(enum NPY_TYPES) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(enum NPY_TYPES) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum NPY_TYPES) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(enum NPY_TYPES),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
                static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
                static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *x) {
    const unsigned int neg_one = (unsigned int) -1, const_zero = (unsigned int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(unsigned int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(unsigned int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (unsigned int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(unsigned int, digit, digits[0])
                case 2:
                    if (8 * sizeof(unsigned int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 2 * PyLong_SHIFT) {
                            return (unsigned int) (((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 3 * PyLong_SHIFT) {
                            return (unsigned int) (((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 4 * PyLong_SHIFT) {
                            return (unsigned int) (((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (unsigned int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(unsigned int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(unsigned int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(unsigned int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(unsigned int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(unsigned int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned int) ((((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned int) ((((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned int) ((((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(unsigned int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, long, PyLong_AsLong(x))
            } else if (sizeof(unsigned int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            unsigned int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (unsigned int) -1;
        }
    } else {
        unsigned int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (unsigned int) -1;
        val = __Pyx_PyInt_As_unsigned_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to unsigned int");
    return (unsigned int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to unsigned int");
    return (unsigned int) -1;
}

/* CIntFromPy */
                static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntFromPy */
                static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CheckBinaryVersion */
                static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* ModuleImport */
                #ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

/* TypeImport */
                #ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s has the wrong size, try recompiling. Expected %zd, got %zd",
            module_name, class_name, basicsize, size);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

/* InitStrings */
                static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if CYTHON_COMPILING_IN_CPYTHON && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return __Pyx_NewRef(x);
  m = Py_TYPE(x)->tp_as_number;
#if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
